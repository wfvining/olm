%% DO NOT EIDT THIS FILE
%% It was generated by gen_messages.erl from priv/json_schemas/1.6
%% 2025-08-24T20:51:27-06:00

-module(ocpp_message_1_6).

-export([
    update_firmware_response/1,
    update_firmware_request/1,
    unlock_connector_response/1,
    unlock_connector_request/1,
    trigger_message_response/1,
    trigger_message_request/1,
    stop_transaction_response/1,
    stop_transaction_request/1,
    status_notification_response/1,
    status_notification_request/1,
    start_transaction_response/1,
    start_transaction_request/1,
    set_charging_profile_response/1,
    set_charging_profile_request/1,
    send_local_list_response/1,
    send_local_list_request/1,
    reset_response/1,
    reset_request/1,
    reserve_now_response/1,
    reserve_now_request/1,
    remote_stop_transaction_response/1,
    remote_stop_transaction_request/1,
    remote_start_transaction_response/1,
    remote_start_transaction_request/1,
    meter_values_response/1,
    meter_values_request/1,
    heartbeat_response/1,
    heartbeat_request/1,
    get_local_list_version_response/1,
    get_local_list_version_request/1,
    get_diagnostics_response/1,
    get_diagnostics_request/1,
    get_configuration_response/1,
    get_configuration_request/1,
    get_composite_schedule_response/1,
    get_composite_schedule_request/1,
    firmware_status_notification_response/1,
    firmware_status_notification_request/1,
    diagnostics_status_notification_response/1,
    diagnostics_status_notification_request/1,
    data_transfer_response/1,
    data_transfer_request/1,
    clear_charging_profile_response/1,
    clear_charging_profile_request/1,
    clear_cache_response/1,
    clear_cache_request/1,
    change_configuration_response/1,
    change_configuration_request/1,
    change_availability_response/1,
    change_availability_request/1,
    cancel_reservation_response/1,
    cancel_reservation_request/1,
    boot_notification_response/1,
    boot_notification_request/1,
    authorize_response/1,
    authorize_request/1
]).

-export([decode/3, decode/2]).

-export_type([
    'AuthorizeRequest'/0,
    'AuthorizeResponse'/0,
    'BootNotificationRequest'/0,
    'BootNotificationResponse'/0,
    'CancelReservationRequest'/0,
    'CancelReservationResponse'/0,
    'ChangeAvailabilityRequest'/0,
    'ChangeAvailabilityResponse'/0,
    'ChangeConfigurationRequest'/0,
    'ChangeConfigurationResponse'/0,
    'ClearCacheRequest'/0,
    'ClearCacheResponse'/0,
    'ClearChargingProfileRequest'/0,
    'ClearChargingProfileResponse'/0,
    'DataTransferRequest'/0,
    'DataTransferResponse'/0,
    'DiagnosticsStatusNotificationRequest'/0,
    'DiagnosticsStatusNotificationResponse'/0,
    'FirmwareStatusNotificationRequest'/0,
    'FirmwareStatusNotificationResponse'/0,
    'GetCompositeScheduleRequest'/0,
    'GetCompositeScheduleResponse'/0,
    'GetConfigurationRequest'/0,
    'GetConfigurationResponse'/0,
    'GetDiagnosticsRequest'/0,
    'GetDiagnosticsResponse'/0,
    'GetLocalListVersionRequest'/0,
    'GetLocalListVersionResponse'/0,
    'HeartbeatRequest'/0,
    'HeartbeatResponse'/0,
    'MeterValuesRequest'/0,
    'MeterValuesResponse'/0,
    'RemoteStartTransactionRequest'/0,
    'RemoteStartTransactionResponse'/0,
    'RemoteStopTransactionRequest'/0,
    'RemoteStopTransactionResponse'/0,
    'ReserveNowRequest'/0,
    'ReserveNowResponse'/0,
    'ResetRequest'/0,
    'ResetResponse'/0,
    'SendLocalListRequest'/0,
    'SendLocalListResponse'/0,
    'SetChargingProfileRequest'/0,
    'SetChargingProfileResponse'/0,
    'StartTransactionRequest'/0,
    'StartTransactionResponse'/0,
    'StatusNotificationRequest'/0,
    'StatusNotificationResponse'/0,
    'StopTransactionRequest'/0,
    'StopTransactionResponse'/0,
    'TriggerMessageRequest'/0,
    'TriggerMessageResponse'/0,
    'UnlockConnectorRequest'/0,
    'UnlockConnectorResponse'/0,
    'UpdateFirmwareRequest'/0,
    'UpdateFirmwareResponse'/0
]).

-export_type([message/0, message/1, payload_type/0, payload/0]).

-type message(Payload) :: {?MODULE, payload_type(), Payload}.

-type message() :: message(payload()).

-type payload_type() ::
    'AuthorizeRequest'
    | 'AuthorizeResponse'
    | 'BootNotificationRequest'
    | 'BootNotificationResponse'
    | 'CancelReservationRequest'
    | 'CancelReservationResponse'
    | 'ChangeAvailabilityRequest'
    | 'ChangeAvailabilityResponse'
    | 'ChangeConfigurationRequest'
    | 'ChangeConfigurationResponse'
    | 'ClearCacheRequest'
    | 'ClearCacheResponse'
    | 'ClearChargingProfileRequest'
    | 'ClearChargingProfileResponse'
    | 'DataTransferRequest'
    | 'DataTransferResponse'
    | 'DiagnosticsStatusNotificationRequest'
    | 'DiagnosticsStatusNotificationResponse'
    | 'FirmwareStatusNotificationRequest'
    | 'FirmwareStatusNotificationResponse'
    | 'GetCompositeScheduleRequest'
    | 'GetCompositeScheduleResponse'
    | 'GetConfigurationRequest'
    | 'GetConfigurationResponse'
    | 'GetDiagnosticsRequest'
    | 'GetDiagnosticsResponse'
    | 'GetLocalListVersionRequest'
    | 'GetLocalListVersionResponse'
    | 'HeartbeatRequest'
    | 'HeartbeatResponse'
    | 'MeterValuesRequest'
    | 'MeterValuesResponse'
    | 'RemoteStartTransactionRequest'
    | 'RemoteStartTransactionResponse'
    | 'RemoteStopTransactionRequest'
    | 'RemoteStopTransactionResponse'
    | 'ReserveNowRequest'
    | 'ReserveNowResponse'
    | 'ResetRequest'
    | 'ResetResponse'
    | 'SendLocalListRequest'
    | 'SendLocalListResponse'
    | 'SetChargingProfileRequest'
    | 'SetChargingProfileResponse'
    | 'StartTransactionRequest'
    | 'StartTransactionResponse'
    | 'StatusNotificationRequest'
    | 'StatusNotificationResponse'
    | 'StopTransactionRequest'
    | 'StopTransactionResponse'
    | 'TriggerMessageRequest'
    | 'TriggerMessageResponse'
    | 'UnlockConnectorRequest'
    | 'UnlockConnectorResponse'
    | 'UpdateFirmwareRequest'
    | 'UpdateFirmwareResponse'.

-type payload() ::
    'AuthorizeRequest'()
    | 'AuthorizeResponse'()
    | 'BootNotificationRequest'()
    | 'BootNotificationResponse'()
    | 'CancelReservationRequest'()
    | 'CancelReservationResponse'()
    | 'ChangeAvailabilityRequest'()
    | 'ChangeAvailabilityResponse'()
    | 'ChangeConfigurationRequest'()
    | 'ChangeConfigurationResponse'()
    | 'ClearCacheRequest'()
    | 'ClearCacheResponse'()
    | 'ClearChargingProfileRequest'()
    | 'ClearChargingProfileResponse'()
    | 'DataTransferRequest'()
    | 'DataTransferResponse'()
    | 'DiagnosticsStatusNotificationRequest'()
    | 'DiagnosticsStatusNotificationResponse'()
    | 'FirmwareStatusNotificationRequest'()
    | 'FirmwareStatusNotificationResponse'()
    | 'GetCompositeScheduleRequest'()
    | 'GetCompositeScheduleResponse'()
    | 'GetConfigurationRequest'()
    | 'GetConfigurationResponse'()
    | 'GetDiagnosticsRequest'()
    | 'GetDiagnosticsResponse'()
    | 'GetLocalListVersionRequest'()
    | 'GetLocalListVersionResponse'()
    | 'HeartbeatRequest'()
    | 'HeartbeatResponse'()
    | 'MeterValuesRequest'()
    | 'MeterValuesResponse'()
    | 'RemoteStartTransactionRequest'()
    | 'RemoteStartTransactionResponse'()
    | 'RemoteStopTransactionRequest'()
    | 'RemoteStopTransactionResponse'()
    | 'ReserveNowRequest'()
    | 'ReserveNowResponse'()
    | 'ResetRequest'()
    | 'ResetResponse'()
    | 'SendLocalListRequest'()
    | 'SendLocalListResponse'()
    | 'SetChargingProfileRequest'()
    | 'SetChargingProfileResponse'()
    | 'StartTransactionRequest'()
    | 'StartTransactionResponse'()
    | 'StatusNotificationRequest'()
    | 'StatusNotificationResponse'()
    | 'StopTransactionRequest'()
    | 'StopTransactionResponse'()
    | 'TriggerMessageRequest'()
    | 'TriggerMessageResponse'()
    | 'UnlockConnectorRequest'()
    | 'UnlockConnectorResponse'()
    | 'UpdateFirmwareRequest'()
    | 'UpdateFirmwareResponse'().

-type 'AuthorizeRequest'() :: #{idTag := string()}.

-type 'AuthorizeResponse'() :: #{
    idTagInfo :=
        #{
            status := string(),
            parentIdTag => string(),
            expiryDate => datetime:datetime()
        }
}.

-type 'BootNotificationRequest'() :: #{
    meterType => string(),
    meterSerialNumber => string(),
    imsi => string(),
    iccid => string(),
    firmwareVersion => string(),
    chargePointVendor := string(),
    chargePointSerialNumber => string(),
    chargePointModel := string(),
    chargeBoxSerialNumber => string()
}.

-type 'BootNotificationResponse'() :: #{
    status := string(),
    interval := integer(),
    currentTime := datetime:datetime()
}.

-type 'CancelReservationRequest'() :: #{reservationId := integer()}.

-type 'CancelReservationResponse'() :: #{status := string()}.

-type 'ChangeAvailabilityRequest'() :: #{type := string(), connectorId := integer()}.

-type 'ChangeAvailabilityResponse'() :: #{status := string()}.

-type 'ChangeConfigurationRequest'() :: #{value := string(), key := string()}.

-type 'ChangeConfigurationResponse'() :: #{status := string()}.

-type 'ClearCacheRequest'() :: #{}.

-type 'ClearCacheResponse'() :: #{status := string()}.

-type 'ClearChargingProfileRequest'() :: #{
    stackLevel => integer(),
    id => integer(),
    connectorId => integer(),
    chargingProfilePurpose => string()
}.

-type 'ClearChargingProfileResponse'() :: #{status := string()}.

-type 'DataTransferRequest'() :: #{
    vendorId := string(),
    messageId => string(),
    data => string()
}.

-type 'DataTransferResponse'() :: #{status := string(), data => string()}.

-type 'DiagnosticsStatusNotificationRequest'() :: #{status := string()}.

-type 'DiagnosticsStatusNotificationResponse'() :: #{}.

-type 'FirmwareStatusNotificationRequest'() :: #{status := string()}.

-type 'FirmwareStatusNotificationResponse'() :: #{}.

-type 'GetCompositeScheduleRequest'() :: #{
    duration := integer(),
    connectorId := integer(),
    chargingRateUnit => string()
}.

-type 'GetCompositeScheduleResponse'() :: #{
    status := string(),
    scheduleStart => datetime:datetime(),
    connectorId => integer(),
    chargingSchedule =>
        #{
            startSchedule => datetime:datetime(),
            minChargingRate => number(),
            duration => integer(),
            chargingSchedulePeriod :=
                [
                    #{
                        startPeriod := integer(),
                        numberPhases => integer(),
                        limit := number()
                    }
                ],
            chargingRateUnit := string()
        }
}.

-type 'GetConfigurationRequest'() :: #{key => [string()]}.

-type 'GetConfigurationResponse'() :: #{
    unknownKey => [string()],
    configurationKey =>
        [
            #{
                value => string(),
                readonly := boolean(),
                key := string()
            }
        ]
}.

-type 'GetDiagnosticsRequest'() :: #{
    stopTime => datetime:datetime(),
    startTime => datetime:datetime(),
    retryInterval => integer(),
    retries => integer(),
    location := string()
}.

-type 'GetDiagnosticsResponse'() :: #{fileName => string()}.

-type 'GetLocalListVersionRequest'() :: #{}.

-type 'GetLocalListVersionResponse'() :: #{listVersion := integer()}.

-type 'HeartbeatRequest'() :: #{}.

-type 'HeartbeatResponse'() :: #{currentTime := datetime:datetime()}.

-type 'MeterValuesRequest'() :: #{
    transactionId => integer(),
    meterValue :=
        [
            #{
                timestamp := datetime:datetime(),
                sampledValue :=
                    [
                        #{
                            value := string(),
                            unit => string(),
                            phase => string(),
                            measurand => string(),
                            location => string(),
                            format => string(),
                            context => string()
                        }
                    ]
            }
        ],
    connectorId := integer()
}.

-type 'MeterValuesResponse'() :: #{}.

-type 'RemoteStartTransactionRequest'() :: #{
    idTag := string(),
    connectorId => integer(),
    chargingProfile =>
        #{
            validTo => datetime:datetime(),
            validFrom => datetime:datetime(),
            transactionId => integer(),
            stackLevel := integer(),
            recurrencyKind => string(),
            chargingSchedule :=
                #{
                    startSchedule =>
                        datetime:datetime(),
                    minChargingRate => number(),
                    duration => integer(),
                    chargingSchedulePeriod :=
                        [
                            #{
                                startPeriod :=
                                    integer(),
                                numberPhases =>
                                    integer(),
                                limit := number()
                            }
                        ],
                    chargingRateUnit := string()
                },
            chargingProfilePurpose := string(),
            chargingProfileKind := string(),
            chargingProfileId := integer()
        }
}.

-type 'RemoteStartTransactionResponse'() :: #{status := string()}.

-type 'RemoteStopTransactionRequest'() :: #{transactionId := integer()}.

-type 'RemoteStopTransactionResponse'() :: #{status := string()}.

-type 'ReserveNowRequest'() :: #{
    reservationId := integer(),
    parentIdTag => string(),
    idTag := string(),
    expiryDate := datetime:datetime(),
    connectorId := integer()
}.

-type 'ReserveNowResponse'() :: #{status := string()}.

-type 'ResetRequest'() :: #{type := string()}.

-type 'ResetResponse'() :: #{status := string()}.

-type 'SendLocalListRequest'() :: #{
    updateType := string(),
    localAuthorizationList =>
        [
            #{
                idTagInfo =>
                    #{
                        status := string(),
                        parentIdTag => string(),
                        expiryDate => datetime:datetime()
                    },
                idTag := string()
            }
        ],
    listVersion := integer()
}.

-type 'SendLocalListResponse'() :: #{status := string()}.

-type 'SetChargingProfileRequest'() :: #{
    csChargingProfiles :=
        #{
            validTo => datetime:datetime(),
            validFrom => datetime:datetime(),
            transactionId => integer(),
            stackLevel := integer(),
            recurrencyKind => string(),
            chargingSchedule :=
                #{
                    startSchedule =>
                        datetime:datetime(),
                    minChargingRate => number(),
                    duration => integer(),
                    chargingSchedulePeriod :=
                        [
                            #{
                                startPeriod := integer(),
                                numberPhases => integer(),
                                limit := number()
                            }
                        ],
                    chargingRateUnit := string()
                },
            chargingProfilePurpose := string(),
            chargingProfileKind := string(),
            chargingProfileId := integer()
        },
    connectorId := integer()
}.

-type 'SetChargingProfileResponse'() :: #{status := string()}.

-type 'StartTransactionRequest'() :: #{
    timestamp := datetime:datetime(),
    reservationId => integer(),
    meterStart := integer(),
    idTag := string(),
    connectorId := integer()
}.

-type 'StartTransactionResponse'() :: #{
    transactionId := integer(),
    idTagInfo :=
        #{
            status := string(),
            parentIdTag => string(),
            expiryDate => datetime:datetime()
        }
}.

-type 'StatusNotificationRequest'() :: #{
    vendorId => string(),
    vendorErrorCode => string(),
    timestamp => datetime:datetime(),
    status := string(),
    info => string(),
    errorCode := string(),
    connectorId := integer()
}.

-type 'StatusNotificationResponse'() :: #{}.

-type 'StopTransactionRequest'() :: #{
    transactionId := integer(),
    transactionData =>
        [
            #{
                timestamp := datetime:datetime(),
                sampledValue :=
                    [
                        #{
                            value := string(),
                            unit => string(),
                            phase => string(),
                            measurand => string(),
                            location => string(),
                            format => string(),
                            context => string()
                        }
                    ]
            }
        ],
    timestamp := datetime:datetime(),
    reason => string(),
    meterStop := integer(),
    idTag => string()
}.

-type 'StopTransactionResponse'() :: #{
    idTagInfo =>
        #{
            status := string(),
            parentIdTag => string(),
            expiryDate => datetime:datetime()
        }
}.

-type 'TriggerMessageRequest'() :: #{
    requestedMessage := string(),
    connectorId => integer()
}.

-type 'TriggerMessageResponse'() :: #{status := string()}.

-type 'UnlockConnectorRequest'() :: #{connectorId := integer()}.

-type 'UnlockConnectorResponse'() :: #{status := string()}.

-type 'UpdateFirmwareRequest'() :: #{
    retryInterval => integer(),
    retrieveDate := datetime:datetime(),
    retries => integer(),
    location := string()
}.

-type 'UpdateFirmwareResponse'() :: #{}.

-define(AuthorizeRequest,
    {#{idTag => cmap:string_(#{max_length => 20})}, [{required, [idTag]}, {extra_keys, false}]}
).

-define(AuthorizeResponse,
    {
        #{
            idTagInfo =>
                fun(Input) ->
                    cmap:new(
                        #{
                            status =>
                                cmap:enum_([
                                    'Accepted',
                                    'Blocked',
                                    'Expired',
                                    'Invalid',
                                    'ConcurrentTx'
                                ]),
                            parentIdTag => cmap:string_(#{max_length => 20}),
                            expiryDate => fun cmap:datetime/1
                        },
                        Input,
                        [{extra_keys, false}, {required, [status]}]
                    )
                end
        },
        [{required, [idTagInfo]}, {extra_keys, false}]
    }
).

-define(BootNotificationRequest,
    {
        #{
            meterType => cmap:string_(#{max_length => 25}),
            meterSerialNumber => cmap:string_(#{max_length => 25}),
            imsi => cmap:string_(#{max_length => 20}),
            iccid => cmap:string_(#{max_length => 20}),
            firmwareVersion => cmap:string_(#{max_length => 50}),
            chargePointVendor => cmap:string_(#{max_length => 20}),
            chargePointSerialNumber => cmap:string_(#{max_length => 25}),
            chargePointModel => cmap:string_(#{max_length => 20}),
            chargeBoxSerialNumber => cmap:string_(#{max_length => 25})
        },
        [{required, [chargePointVendor, chargePointModel]}, {extra_keys, false}]
    }
).

-define(BootNotificationResponse,
    {
        #{
            status => cmap:enum_(['Accepted', 'Pending', 'Rejected']),
            interval => cmap:integer_(#{}),
            currentTime => fun cmap:datetime/1
        },
        [{required, [status, currentTime, interval]}, {extra_keys, false}]
    }
).

-define(CancelReservationRequest,
    {#{reservationId => cmap:integer_(#{})}, [{required, [reservationId]}, {extra_keys, false}]}
).

-define(CancelReservationResponse,
    {#{status => cmap:enum_(['Accepted', 'Rejected'])}, [{required, [status]}, {extra_keys, false}]}
).

-define(ChangeAvailabilityRequest,
    {
        #{
            type => cmap:enum_(['Inoperative', 'Operative']),
            connectorId => cmap:integer_(#{})
        },
        [{required, [connectorId, type]}, {extra_keys, false}]
    }
).

-define(ChangeAvailabilityResponse,
    {#{status => cmap:enum_(['Accepted', 'Rejected', 'Scheduled'])}, [
        {required, [status]}, {extra_keys, false}
    ]}
).

-define(ChangeConfigurationRequest,
    {
        #{
            value => cmap:string_(#{max_length => 500}),
            key => cmap:string_(#{max_length => 50})
        },
        [{required, [key, value]}, {extra_keys, false}]
    }
).

-define(ChangeConfigurationResponse,
    {
        #{
            status =>
                cmap:enum_(['Accepted', 'Rejected', 'RebootRequired', 'NotSupported'])
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(ClearCacheRequest, {#{}, [{required, []}, {extra_keys, false}]}).

-define(ClearCacheResponse,
    {#{status => cmap:enum_(['Accepted', 'Rejected'])}, [{required, [status]}, {extra_keys, false}]}
).

-define(ClearChargingProfileRequest,
    {
        #{
            stackLevel => cmap:integer_(#{}),
            id => cmap:integer_(#{}),
            connectorId => cmap:integer_(#{}),
            chargingProfilePurpose =>
                cmap:enum_(['ChargePointMaxProfile', 'TxDefaultProfile', 'TxProfile'])
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(ClearChargingProfileResponse,
    {#{status => cmap:enum_(['Accepted', 'Unknown'])}, [{required, [status]}, {extra_keys, false}]}
).

-define(DataTransferRequest,
    {
        #{
            vendorId => cmap:string_(#{max_length => 255}),
            messageId => cmap:string_(#{max_length => 50}),
            data => cmap:string_(#{})
        },
        [{required, [vendorId]}, {extra_keys, false}]
    }
).

-define(DataTransferResponse,
    {
        #{
            status =>
                cmap:enum_([
                    'Accepted',
                    'Rejected',
                    'UnknownMessageId',
                    'UnknownVendorId'
                ]),
            data => cmap:string_(#{})
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(DiagnosticsStatusNotificationRequest,
    {#{status => cmap:enum_(['Idle', 'Uploaded', 'UploadFailed', 'Uploading'])}, [
        {required, [status]}, {extra_keys, false}
    ]}
).

-define(DiagnosticsStatusNotificationResponse, {#{}, [{required, []}, {extra_keys, false}]}).

-define(FirmwareStatusNotificationRequest,
    {
        #{
            status =>
                cmap:enum_([
                    'Downloaded',
                    'DownloadFailed',
                    'Downloading',
                    'Idle',
                    'InstallationFailed',
                    'Installing',
                    'Installed'
                ])
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(FirmwareStatusNotificationResponse, {#{}, [{required, []}, {extra_keys, false}]}).

-define(GetCompositeScheduleRequest,
    {
        #{
            duration => cmap:integer_(#{}),
            connectorId => cmap:integer_(#{}),
            chargingRateUnit => cmap:enum_(['A', 'W'])
        },
        [{required, [connectorId, duration]}, {extra_keys, false}]
    }
).

-define(GetCompositeScheduleResponse,
    {
        #{
            status => cmap:enum_(['Accepted', 'Rejected']),
            scheduleStart => fun cmap:datetime/1,
            connectorId => cmap:integer_(#{}),
            chargingSchedule =>
                fun(Input) ->
                    cmap:new(
                        #{
                            startSchedule => fun cmap:datetime/1,
                            minChargingRate => fun cmap:number/1,
                            duration => cmap:integer_(#{}),
                            chargingSchedulePeriod =>
                                cmap:list_(#{
                                    items =>
                                        fun(Input) ->
                                            cmap:new(
                                                #{
                                                    startPeriod =>
                                                        cmap:integer_(#{}),
                                                    numberPhases =>
                                                        cmap:integer_(#{}),
                                                    limit =>
                                                        fun cmap:number/1
                                                },
                                                Input,
                                                [
                                                    {extra_keys, false},
                                                    {required, [
                                                        startPeriod,
                                                        limit
                                                    ]}
                                                ]
                                            )
                                        end
                                }),
                            chargingRateUnit => cmap:enum_(['A', 'W'])
                        },
                        Input,
                        [
                            {extra_keys, false},
                            {required, [chargingRateUnit, chargingSchedulePeriod]}
                        ]
                    )
                end
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(GetConfigurationRequest,
    {#{key => cmap:list_(#{items => cmap:string_(#{max_length => 50})})}, [
        {required, []}, {extra_keys, false}
    ]}
).

-define(GetConfigurationResponse,
    {
        #{
            unknownKey => cmap:list_(#{items => cmap:string_(#{max_length => 50})}),
            configurationKey =>
                cmap:list_(#{
                    items =>
                        fun(Input) ->
                            cmap:new(
                                #{
                                    value =>
                                        cmap:string_(#{
                                            max_length =>
                                                500
                                        }),
                                    readonly => fun cmap:boolean/1,
                                    key =>
                                        cmap:string_(#{
                                            max_length =>
                                                50
                                        })
                                },
                                Input,
                                [
                                    {extra_keys, false},
                                    {required, [key, readonly]}
                                ]
                            )
                        end
                })
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(GetDiagnosticsRequest,
    {
        #{
            stopTime => fun cmap:datetime/1,
            startTime => fun cmap:datetime/1,
            retryInterval => cmap:integer_(#{}),
            retries => cmap:integer_(#{}),
            location => cmap:string_(#{})
        },
        [{required, [location]}, {extra_keys, false}]
    }
).

-define(GetDiagnosticsResponse,
    {#{fileName => cmap:string_(#{max_length => 255})}, [{required, []}, {extra_keys, false}]}
).

-define(GetLocalListVersionRequest, {#{}, [{required, []}, {extra_keys, false}]}).

-define(GetLocalListVersionResponse,
    {#{listVersion => cmap:integer_(#{})}, [{required, [listVersion]}, {extra_keys, false}]}
).

-define(HeartbeatRequest, {#{}, [{required, []}, {extra_keys, false}]}).

-define(HeartbeatResponse,
    {#{currentTime => fun cmap:datetime/1}, [{required, [currentTime]}, {extra_keys, false}]}
).

-define(MeterValuesRequest,
    {
        #{
            transactionId => cmap:integer_(#{}),
            meterValue =>
                cmap:list_(#{
                    items =>
                        fun(Input) ->
                            cmap:new(
                                #{
                                    timestamp => fun cmap:datetime/1,
                                    sampledValue =>
                                        cmap:list_(#{
                                            items =>
                                                fun(Input) ->
                                                    cmap:new(
                                                        #{
                                                            value =>
                                                                cmap:string_(#{}),
                                                            unit =>
                                                                cmap:enum_([
                                                                    'Wh',
                                                                    kWh,
                                                                    varh,
                                                                    kvarh,
                                                                    'W',
                                                                    kW,
                                                                    'VA',
                                                                    kVA,
                                                                    var,
                                                                    kvar,
                                                                    'A',
                                                                    'V',
                                                                    'K',
                                                                    'Celcius',
                                                                    'Celsius',
                                                                    'Fahrenheit',
                                                                    'Percent'
                                                                ]),
                                                            phase =>
                                                                cmap:enum_([
                                                                    'L1',
                                                                    'L2',
                                                                    'L3',
                                                                    'N',
                                                                    'L1-N',
                                                                    'L2-N',
                                                                    'L3-N',
                                                                    'L1-L2',
                                                                    'L2-L3',
                                                                    'L3-L1'
                                                                ]),
                                                            measurand =>
                                                                cmap:enum_([
                                                                    'Energy.Active.Export.Register',
                                                                    'Energy.Active.Import.Register',
                                                                    'Energy.Reactive.Export.Register',
                                                                    'Energy.Reactive.Import.Register',
                                                                    'Energy.Active.Export.Interval',
                                                                    'Energy.Active.Import.Interval',
                                                                    'Energy.Reactive.Export.Interval',
                                                                    'Energy.Reactive.Import.Interval',
                                                                    'Power.Active.Export',
                                                                    'Power.Active.Import',
                                                                    'Power.Offered',
                                                                    'Power.Reactive.Export',
                                                                    'Power.Reactive.Import',
                                                                    'Power.Factor',
                                                                    'Current.Import',
                                                                    'Current.Export',
                                                                    'Current.Offered',
                                                                    'Voltage',
                                                                    'Frequency',
                                                                    'Temperature',
                                                                    'SoC',
                                                                    'RPM'
                                                                ]),
                                                            location =>
                                                                cmap:enum_([
                                                                    'Cable',
                                                                    'EV',
                                                                    'Inlet',
                                                                    'Outlet',
                                                                    'Body'
                                                                ]),
                                                            format =>
                                                                cmap:enum_([
                                                                    'Raw',
                                                                    'SignedData'
                                                                ]),
                                                            context =>
                                                                cmap:enum_([
                                                                    'Interruption.Begin',
                                                                    'Interruption.End',
                                                                    'Sample.Clock',
                                                                    'Sample.Periodic',
                                                                    'Transaction.Begin',
                                                                    'Transaction.End',
                                                                    'Trigger',
                                                                    'Other'
                                                                ])
                                                        },
                                                        Input,
                                                        [
                                                            {extra_keys, false},
                                                            {required, [value]}
                                                        ]
                                                    )
                                                end
                                        })
                                },
                                Input,
                                [
                                    {extra_keys, false},
                                    {required, [timestamp, sampledValue]}
                                ]
                            )
                        end
                }),
            connectorId => cmap:integer_(#{})
        },
        [{required, [connectorId, meterValue]}, {extra_keys, false}]
    }
).

-define(MeterValuesResponse, {#{}, [{required, []}, {extra_keys, false}]}).

-define(RemoteStartTransactionRequest,
    {
        #{
            idTag => cmap:string_(#{max_length => 20}),
            connectorId => cmap:integer_(#{}),
            chargingProfile =>
                fun(Input) ->
                    cmap:new(
                        #{
                            validTo => fun cmap:datetime/1,
                            validFrom => fun cmap:datetime/1,
                            transactionId => cmap:integer_(#{}),
                            stackLevel => cmap:integer_(#{}),
                            recurrencyKind => cmap:enum_(['Daily', 'Weekly']),
                            chargingSchedule =>
                                fun(Input) ->
                                    cmap:new(
                                        #{
                                            startSchedule =>
                                                fun cmap:datetime/1,
                                            minChargingRate =>
                                                fun cmap:number/1,
                                            duration => cmap:integer_(#{}),
                                            chargingSchedulePeriod =>
                                                cmap:list_(#{
                                                    items =>
                                                        fun(Input) ->
                                                            cmap:new(
                                                                #{
                                                                    startPeriod =>
                                                                        cmap:integer_(#{}),
                                                                    numberPhases =>
                                                                        cmap:integer_(#{}),
                                                                    limit =>
                                                                        fun cmap:number/1
                                                                },
                                                                Input,
                                                                [
                                                                    {extra_keys, false},
                                                                    {required, [
                                                                        startPeriod,
                                                                        limit
                                                                    ]}
                                                                ]
                                                            )
                                                        end
                                                }),
                                            chargingRateUnit =>
                                                cmap:enum_(['A', 'W'])
                                        },
                                        Input,
                                        [
                                            {extra_keys, false},
                                            {required, [
                                                chargingRateUnit,
                                                chargingSchedulePeriod
                                            ]}
                                        ]
                                    )
                                end,
                            chargingProfilePurpose =>
                                cmap:enum_([
                                    'ChargePointMaxProfile',
                                    'TxDefaultProfile',
                                    'TxProfile'
                                ]),
                            chargingProfileKind =>
                                cmap:enum_(['Absolute', 'Recurring', 'Relative']),
                            chargingProfileId => cmap:integer_(#{})
                        },
                        Input,
                        [
                            {extra_keys, false},
                            {required, [
                                chargingProfileId,
                                stackLevel,
                                chargingProfilePurpose,
                                chargingProfileKind,
                                chargingSchedule
                            ]}
                        ]
                    )
                end
        },
        [{required, [idTag]}, {extra_keys, false}]
    }
).

-define(RemoteStartTransactionResponse,
    {#{status => cmap:enum_(['Accepted', 'Rejected'])}, [{required, [status]}, {extra_keys, false}]}
).

-define(RemoteStopTransactionRequest,
    {#{transactionId => cmap:integer_(#{})}, [{required, [transactionId]}, {extra_keys, false}]}
).

-define(RemoteStopTransactionResponse,
    {#{status => cmap:enum_(['Accepted', 'Rejected'])}, [{required, [status]}, {extra_keys, false}]}
).

-define(ReserveNowRequest,
    {
        #{
            reservationId => cmap:integer_(#{}),
            parentIdTag => cmap:string_(#{max_length => 20}),
            idTag => cmap:string_(#{max_length => 20}),
            expiryDate => fun cmap:datetime/1,
            connectorId => cmap:integer_(#{})
        },
        [
            {required, [connectorId, expiryDate, idTag, reservationId]},
            {extra_keys, false}
        ]
    }
).

-define(ReserveNowResponse,
    {
        #{
            status =>
                cmap:enum_([
                    'Accepted',
                    'Faulted',
                    'Occupied',
                    'Rejected',
                    'Unavailable'
                ])
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(ResetRequest,
    {#{type => cmap:enum_(['Hard', 'Soft'])}, [{required, [type]}, {extra_keys, false}]}
).

-define(ResetResponse,
    {#{status => cmap:enum_(['Accepted', 'Rejected'])}, [{required, [status]}, {extra_keys, false}]}
).

-define(SendLocalListRequest,
    {
        #{
            updateType => cmap:enum_(['Differential', 'Full']),
            localAuthorizationList =>
                cmap:list_(#{
                    items =>
                        fun(Input) ->
                            cmap:new(
                                #{
                                    idTagInfo =>
                                        fun(Input) ->
                                            cmap:new(
                                                #{
                                                    status =>
                                                        cmap:enum_([
                                                            'Accepted',
                                                            'Blocked',
                                                            'Expired',
                                                            'Invalid',
                                                            'ConcurrentTx'
                                                        ]),
                                                    parentIdTag =>
                                                        cmap:string_(#{
                                                            max_length =>
                                                                20
                                                        }),
                                                    expiryDate =>
                                                        fun cmap:datetime/1
                                                },
                                                Input,
                                                [
                                                    {extra_keys, false},
                                                    {required, [status]}
                                                ]
                                            )
                                        end,
                                    idTag =>
                                        cmap:string_(#{
                                            max_length =>
                                                20
                                        })
                                },
                                Input,
                                [
                                    {extra_keys, false},
                                    {required, [idTag]}
                                ]
                            )
                        end
                }),
            listVersion => cmap:integer_(#{})
        },
        [{required, [listVersion, updateType]}, {extra_keys, false}]
    }
).

-define(SendLocalListResponse,
    {
        #{
            status =>
                cmap:enum_(['Accepted', 'Failed', 'NotSupported', 'VersionMismatch'])
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(SetChargingProfileRequest,
    {
        #{
            csChargingProfiles =>
                fun(Input) ->
                    cmap:new(
                        #{
                            validTo => fun cmap:datetime/1,
                            validFrom => fun cmap:datetime/1,
                            transactionId => cmap:integer_(#{}),
                            stackLevel => cmap:integer_(#{}),
                            recurrencyKind => cmap:enum_(['Daily', 'Weekly']),
                            chargingSchedule =>
                                fun(Input) ->
                                    cmap:new(
                                        #{
                                            startSchedule =>
                                                fun cmap:datetime/1,
                                            minChargingRate =>
                                                fun cmap:number/1,
                                            duration => cmap:integer_(#{}),
                                            chargingSchedulePeriod =>
                                                cmap:list_(#{
                                                    items =>
                                                        fun(Input) ->
                                                            cmap:new(
                                                                #{
                                                                    startPeriod =>
                                                                        cmap:integer_(#{}),
                                                                    numberPhases =>
                                                                        cmap:integer_(#{}),
                                                                    limit =>
                                                                        fun cmap:number/1
                                                                },
                                                                Input,
                                                                [
                                                                    {extra_keys, false},
                                                                    {required, [
                                                                        startPeriod,
                                                                        limit
                                                                    ]}
                                                                ]
                                                            )
                                                        end
                                                }),
                                            chargingRateUnit =>
                                                cmap:enum_(['A', 'W'])
                                        },
                                        Input,
                                        [
                                            {extra_keys, false},
                                            {required, [
                                                chargingRateUnit,
                                                chargingSchedulePeriod
                                            ]}
                                        ]
                                    )
                                end,
                            chargingProfilePurpose =>
                                cmap:enum_([
                                    'ChargePointMaxProfile',
                                    'TxDefaultProfile',
                                    'TxProfile'
                                ]),
                            chargingProfileKind =>
                                cmap:enum_(['Absolute', 'Recurring', 'Relative']),
                            chargingProfileId => cmap:integer_(#{})
                        },
                        Input,
                        [
                            {extra_keys, false},
                            {required, [
                                chargingProfileId,
                                stackLevel,
                                chargingProfilePurpose,
                                chargingProfileKind,
                                chargingSchedule
                            ]}
                        ]
                    )
                end,
            connectorId => cmap:integer_(#{})
        },
        [{required, [connectorId, csChargingProfiles]}, {extra_keys, false}]
    }
).

-define(SetChargingProfileResponse,
    {#{status => cmap:enum_(['Accepted', 'Rejected', 'NotSupported'])}, [
        {required, [status]}, {extra_keys, false}
    ]}
).

-define(StartTransactionRequest,
    {
        #{
            timestamp => fun cmap:datetime/1,
            reservationId => cmap:integer_(#{}),
            meterStart => cmap:integer_(#{}),
            idTag => cmap:string_(#{max_length => 20}),
            connectorId => cmap:integer_(#{})
        },
        [
            {required, [connectorId, idTag, meterStart, timestamp]},
            {extra_keys, false}
        ]
    }
).

-define(StartTransactionResponse,
    {
        #{
            transactionId => cmap:integer_(#{}),
            idTagInfo =>
                fun(Input) ->
                    cmap:new(
                        #{
                            status =>
                                cmap:enum_([
                                    'Accepted',
                                    'Blocked',
                                    'Expired',
                                    'Invalid',
                                    'ConcurrentTx'
                                ]),
                            parentIdTag => cmap:string_(#{max_length => 20}),
                            expiryDate => fun cmap:datetime/1
                        },
                        Input,
                        [{extra_keys, false}, {required, [status]}]
                    )
                end
        },
        [{required, [idTagInfo, transactionId]}, {extra_keys, false}]
    }
).

-define(StatusNotificationRequest,
    {
        #{
            vendorId => cmap:string_(#{max_length => 255}),
            vendorErrorCode => cmap:string_(#{max_length => 50}),
            timestamp => fun cmap:datetime/1,
            status =>
                cmap:enum_([
                    'Available',
                    'Preparing',
                    'Charging',
                    'SuspendedEVSE',
                    'SuspendedEV',
                    'Finishing',
                    'Reserved',
                    'Unavailable',
                    'Faulted'
                ]),
            info => cmap:string_(#{max_length => 50}),
            errorCode =>
                cmap:enum_([
                    'ConnectorLockFailure',
                    'EVCommunicationError',
                    'GroundFailure',
                    'HighTemperature',
                    'InternalError',
                    'LocalListConflict',
                    'NoError',
                    'OtherError',
                    'OverCurrentFailure',
                    'PowerMeterFailure',
                    'PowerSwitchFailure',
                    'ReaderFailure',
                    'ResetFailure',
                    'UnderVoltage',
                    'OverVoltage',
                    'WeakSignal'
                ]),
            connectorId => cmap:integer_(#{})
        },
        [{required, [connectorId, errorCode, status]}, {extra_keys, false}]
    }
).

-define(StatusNotificationResponse, {#{}, [{required, []}, {extra_keys, false}]}).

-define(StopTransactionRequest,
    {
        #{
            transactionId => cmap:integer_(#{}),
            transactionData =>
                cmap:list_(#{
                    items =>
                        fun(Input) ->
                            cmap:new(
                                #{
                                    timestamp => fun cmap:datetime/1,
                                    sampledValue =>
                                        cmap:list_(#{
                                            items =>
                                                fun(Input) ->
                                                    cmap:new(
                                                        #{
                                                            value =>
                                                                cmap:string_(#{}),
                                                            unit =>
                                                                cmap:enum_([
                                                                    'Wh',
                                                                    kWh,
                                                                    varh,
                                                                    kvarh,
                                                                    'W',
                                                                    kW,
                                                                    'VA',
                                                                    kVA,
                                                                    var,
                                                                    kvar,
                                                                    'A',
                                                                    'V',
                                                                    'K',
                                                                    'Celcius',
                                                                    'Fahrenheit',
                                                                    'Percent'
                                                                ]),
                                                            phase =>
                                                                cmap:enum_([
                                                                    'L1',
                                                                    'L2',
                                                                    'L3',
                                                                    'N',
                                                                    'L1-N',
                                                                    'L2-N',
                                                                    'L3-N',
                                                                    'L1-L2',
                                                                    'L2-L3',
                                                                    'L3-L1'
                                                                ]),
                                                            measurand =>
                                                                cmap:enum_([
                                                                    'Energy.Active.Export.Register',
                                                                    'Energy.Active.Import.Register',
                                                                    'Energy.Reactive.Export.Register',
                                                                    'Energy.Reactive.Import.Register',
                                                                    'Energy.Active.Export.Interval',
                                                                    'Energy.Active.Import.Interval',
                                                                    'Energy.Reactive.Export.Interval',
                                                                    'Energy.Reactive.Import.Interval',
                                                                    'Power.Active.Export',
                                                                    'Power.Active.Import',
                                                                    'Power.Offered',
                                                                    'Power.Reactive.Export',
                                                                    'Power.Reactive.Import',
                                                                    'Power.Factor',
                                                                    'Current.Import',
                                                                    'Current.Export',
                                                                    'Current.Offered',
                                                                    'Voltage',
                                                                    'Frequency',
                                                                    'Temperature',
                                                                    'SoC',
                                                                    'RPM'
                                                                ]),
                                                            location =>
                                                                cmap:enum_([
                                                                    'Cable',
                                                                    'EV',
                                                                    'Inlet',
                                                                    'Outlet',
                                                                    'Body'
                                                                ]),
                                                            format =>
                                                                cmap:enum_([
                                                                    'Raw',
                                                                    'SignedData'
                                                                ]),
                                                            context =>
                                                                cmap:enum_([
                                                                    'Interruption.Begin',
                                                                    'Interruption.End',
                                                                    'Sample.Clock',
                                                                    'Sample.Periodic',
                                                                    'Transaction.Begin',
                                                                    'Transaction.End',
                                                                    'Trigger',
                                                                    'Other'
                                                                ])
                                                        },
                                                        Input,
                                                        [
                                                            {extra_keys, false},
                                                            {required, [value]}
                                                        ]
                                                    )
                                                end
                                        })
                                },
                                Input,
                                [
                                    {extra_keys, false},
                                    {required, [timestamp, sampledValue]}
                                ]
                            )
                        end
                }),
            timestamp => fun cmap:datetime/1,
            reason =>
                cmap:enum_([
                    'EmergencyStop',
                    'EVDisconnected',
                    'HardReset',
                    'Local',
                    'Other',
                    'PowerLoss',
                    'Reboot',
                    'Remote',
                    'SoftReset',
                    'UnlockCommand',
                    'DeAuthorized'
                ]),
            meterStop => cmap:integer_(#{}),
            idTag => cmap:string_(#{max_length => 20})
        },
        [{required, [transactionId, timestamp, meterStop]}, {extra_keys, false}]
    }
).

-define(StopTransactionResponse,
    {
        #{
            idTagInfo =>
                fun(Input) ->
                    cmap:new(
                        #{
                            status =>
                                cmap:enum_([
                                    'Accepted',
                                    'Blocked',
                                    'Expired',
                                    'Invalid',
                                    'ConcurrentTx'
                                ]),
                            parentIdTag => cmap:string_(#{max_length => 20}),
                            expiryDate => fun cmap:datetime/1
                        },
                        Input,
                        [{extra_keys, false}, {required, [status]}]
                    )
                end
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(TriggerMessageRequest,
    {
        #{
            requestedMessage =>
                cmap:enum_([
                    'BootNotification',
                    'DiagnosticsStatusNotification',
                    'FirmwareStatusNotification',
                    'Heartbeat',
                    'MeterValues',
                    'StatusNotification'
                ]),
            connectorId => cmap:integer_(#{})
        },
        [{required, [requestedMessage]}, {extra_keys, false}]
    }
).

-define(TriggerMessageResponse,
    {#{status => cmap:enum_(['Accepted', 'Rejected', 'NotImplemented'])}, [
        {required, [status]}, {extra_keys, false}
    ]}
).

-define(UnlockConnectorRequest,
    {#{connectorId => cmap:integer_(#{})}, [{required, [connectorId]}, {extra_keys, false}]}
).

-define(UnlockConnectorResponse,
    {#{status => cmap:enum_(['Unlocked', 'UnlockFailed', 'NotSupported'])}, [
        {required, [status]}, {extra_keys, false}
    ]}
).

-define(UpdateFirmwareRequest,
    {
        #{
            retryInterval => cmap:integer_(#{}),
            retrieveDate => fun cmap:datetime/1,
            retries => cmap:integer_(#{}),
            location => cmap:string_(#{})
        },
        [{required, [location, retrieveDate]}, {extra_keys, false}]
    }
).

-define(UpdateFirmwareResponse, {#{}, [{required, []}, {extra_keys, false}]}).

-define(DECODERS, #{
    <<"AuthorizeRequest">> => authorize_request,
    <<"AuthorizeResponse">> => authorize_response,
    <<"BootNotificationRequest">> =>
        boot_notification_request,
    <<"BootNotificationResponse">> =>
        boot_notification_response,
    <<"CancelReservationRequest">> =>
        cancel_reservation_request,
    <<"CancelReservationResponse">> =>
        cancel_reservation_response,
    <<"ChangeAvailabilityRequest">> =>
        change_availability_request,
    <<"ChangeAvailabilityResponse">> =>
        change_availability_response,
    <<"ChangeConfigurationRequest">> =>
        change_configuration_request,
    <<"ChangeConfigurationResponse">> =>
        change_configuration_response,
    <<"ClearCacheRequest">> => clear_cache_request,
    <<"ClearCacheResponse">> => clear_cache_response,
    <<"ClearChargingProfileRequest">> =>
        clear_charging_profile_request,
    <<"ClearChargingProfileResponse">> =>
        clear_charging_profile_response,
    <<"DataTransferRequest">> => data_transfer_request,
    <<"DataTransferResponse">> => data_transfer_response,
    <<"DiagnosticsStatusNotificationRequest">> =>
        diagnostics_status_notification_request,
    <<"DiagnosticsStatusNotificationResponse">> =>
        diagnostics_status_notification_response,
    <<"FirmwareStatusNotificationRequest">> =>
        firmware_status_notification_request,
    <<"FirmwareStatusNotificationResponse">> =>
        firmware_status_notification_response,
    <<"GetCompositeScheduleRequest">> =>
        get_composite_schedule_request,
    <<"GetCompositeScheduleResponse">> =>
        get_composite_schedule_response,
    <<"GetConfigurationRequest">> =>
        get_configuration_request,
    <<"GetConfigurationResponse">> =>
        get_configuration_response,
    <<"GetDiagnosticsRequest">> => get_diagnostics_request,
    <<"GetDiagnosticsResponse">> =>
        get_diagnostics_response,
    <<"GetLocalListVersionRequest">> =>
        get_local_list_version_request,
    <<"GetLocalListVersionResponse">> =>
        get_local_list_version_response,
    <<"HeartbeatRequest">> => heartbeat_request,
    <<"HeartbeatResponse">> => heartbeat_response,
    <<"MeterValuesRequest">> => meter_values_request,
    <<"MeterValuesResponse">> => meter_values_response,
    <<"RemoteStartTransactionRequest">> =>
        remote_start_transaction_request,
    <<"RemoteStartTransactionResponse">> =>
        remote_start_transaction_response,
    <<"RemoteStopTransactionRequest">> =>
        remote_stop_transaction_request,
    <<"RemoteStopTransactionResponse">> =>
        remote_stop_transaction_response,
    <<"ReserveNowRequest">> => reserve_now_request,
    <<"ReserveNowResponse">> => reserve_now_response,
    <<"ResetRequest">> => reset_request,
    <<"ResetResponse">> => reset_response,
    <<"SendLocalListRequest">> => send_local_list_request,
    <<"SendLocalListResponse">> => send_local_list_response,
    <<"SetChargingProfileRequest">> =>
        set_charging_profile_request,
    <<"SetChargingProfileResponse">> =>
        set_charging_profile_response,
    <<"StartTransactionRequest">> =>
        start_transaction_request,
    <<"StartTransactionResponse">> =>
        start_transaction_response,
    <<"StatusNotificationRequest">> =>
        status_notification_request,
    <<"StatusNotificationResponse">> =>
        status_notification_response,
    <<"StopTransactionRequest">> =>
        stop_transaction_request,
    <<"StopTransactionResponse">> =>
        stop_transaction_response,
    <<"TriggerMessageRequest">> => trigger_message_request,
    <<"TriggerMessageResponse">> =>
        trigger_message_response,
    <<"UnlockConnectorRequest">> =>
        unlock_connector_request,
    <<"UnlockConnectorResponse">> =>
        unlock_connector_response,
    <<"UpdateFirmwareRequest">> => update_firmware_request,
    <<"UpdateFirmwareResponse">> =>
        update_firmware_response
}).

-spec authorize_request('AuthorizeRequest'()) -> message('AuthorizeRequest'()).
authorize_request(AuthorizeRequest) ->
    {Spec, Opts} = (?AuthorizeRequest),
    {?MODULE, 'AuthorizeRequest', cmap:new(Spec, AuthorizeRequest, Opts)}.

-spec authorize_response('AuthorizeResponse'()) -> message('AuthorizeResponse'()).
authorize_response(AuthorizeResponse) ->
    {Spec, Opts} = (?AuthorizeResponse),
    {?MODULE, 'AuthorizeResponse', cmap:new(Spec, AuthorizeResponse, Opts)}.

-spec boot_notification_request('BootNotificationRequest'()) ->
    message('BootNotificationRequest'()).
boot_notification_request(BootNotificationRequest) ->
    {Spec, Opts} = (?BootNotificationRequest),
    {?MODULE, 'BootNotificationRequest', cmap:new(Spec, BootNotificationRequest, Opts)}.

-spec boot_notification_response('BootNotificationResponse'()) ->
    message('BootNotificationResponse'()).
boot_notification_response(BootNotificationResponse) ->
    {Spec, Opts} = (?BootNotificationResponse),
    {?MODULE, 'BootNotificationResponse', cmap:new(Spec, BootNotificationResponse, Opts)}.

-spec cancel_reservation_request('CancelReservationRequest'()) ->
    message('CancelReservationRequest'()).
cancel_reservation_request(CancelReservationRequest) ->
    {Spec, Opts} = (?CancelReservationRequest),
    {?MODULE, 'CancelReservationRequest', cmap:new(Spec, CancelReservationRequest, Opts)}.

-spec cancel_reservation_response('CancelReservationResponse'()) ->
    message('CancelReservationResponse'()).
cancel_reservation_response(CancelReservationResponse) ->
    {Spec, Opts} = (?CancelReservationResponse),
    {?MODULE, 'CancelReservationResponse', cmap:new(Spec, CancelReservationResponse, Opts)}.

-spec change_availability_request('ChangeAvailabilityRequest'()) ->
    message('ChangeAvailabilityRequest'()).
change_availability_request(ChangeAvailabilityRequest) ->
    {Spec, Opts} = (?ChangeAvailabilityRequest),
    {?MODULE, 'ChangeAvailabilityRequest', cmap:new(Spec, ChangeAvailabilityRequest, Opts)}.

-spec change_availability_response('ChangeAvailabilityResponse'()) ->
    message('ChangeAvailabilityResponse'()).
change_availability_response(ChangeAvailabilityResponse) ->
    {Spec, Opts} = (?ChangeAvailabilityResponse),
    {?MODULE, 'ChangeAvailabilityResponse', cmap:new(Spec, ChangeAvailabilityResponse, Opts)}.

-spec change_configuration_request('ChangeConfigurationRequest'()) ->
    message('ChangeConfigurationRequest'()).
change_configuration_request(ChangeConfigurationRequest) ->
    {Spec, Opts} = (?ChangeConfigurationRequest),
    {?MODULE, 'ChangeConfigurationRequest', cmap:new(Spec, ChangeConfigurationRequest, Opts)}.

-spec change_configuration_response('ChangeConfigurationResponse'()) ->
    message('ChangeConfigurationResponse'()).
change_configuration_response(ChangeConfigurationResponse) ->
    {Spec, Opts} = (?ChangeConfigurationResponse),
    {?MODULE, 'ChangeConfigurationResponse', cmap:new(Spec, ChangeConfigurationResponse, Opts)}.

-spec clear_cache_request('ClearCacheRequest'()) -> message('ClearCacheRequest'()).
clear_cache_request(ClearCacheRequest) ->
    {Spec, Opts} = (?ClearCacheRequest),
    {?MODULE, 'ClearCacheRequest', cmap:new(Spec, ClearCacheRequest, Opts)}.

-spec clear_cache_response('ClearCacheResponse'()) -> message('ClearCacheResponse'()).
clear_cache_response(ClearCacheResponse) ->
    {Spec, Opts} = (?ClearCacheResponse),
    {?MODULE, 'ClearCacheResponse', cmap:new(Spec, ClearCacheResponse, Opts)}.

-spec clear_charging_profile_request('ClearChargingProfileRequest'()) ->
    message('ClearChargingProfileRequest'()).
clear_charging_profile_request(ClearChargingProfileRequest) ->
    {Spec, Opts} = (?ClearChargingProfileRequest),
    {?MODULE, 'ClearChargingProfileRequest', cmap:new(Spec, ClearChargingProfileRequest, Opts)}.

-spec clear_charging_profile_response('ClearChargingProfileResponse'()) ->
    message('ClearChargingProfileResponse'()).
clear_charging_profile_response(ClearChargingProfileResponse) ->
    {Spec, Opts} = (?ClearChargingProfileResponse),
    {?MODULE, 'ClearChargingProfileResponse', cmap:new(Spec, ClearChargingProfileResponse, Opts)}.

-spec data_transfer_request('DataTransferRequest'()) -> message('DataTransferRequest'()).
data_transfer_request(DataTransferRequest) ->
    {Spec, Opts} = (?DataTransferRequest),
    {?MODULE, 'DataTransferRequest', cmap:new(Spec, DataTransferRequest, Opts)}.

-spec data_transfer_response('DataTransferResponse'()) -> message('DataTransferResponse'()).
data_transfer_response(DataTransferResponse) ->
    {Spec, Opts} = (?DataTransferResponse),
    {?MODULE, 'DataTransferResponse', cmap:new(Spec, DataTransferResponse, Opts)}.

-spec diagnostics_status_notification_request('DiagnosticsStatusNotificationRequest'()) ->
    message('DiagnosticsStatusNotificationRequest'()).
diagnostics_status_notification_request(DiagnosticsStatusNotificationRequest) ->
    {Spec, Opts} = (?DiagnosticsStatusNotificationRequest),
    {?MODULE, 'DiagnosticsStatusNotificationRequest',
        cmap:new(Spec, DiagnosticsStatusNotificationRequest, Opts)}.

-spec diagnostics_status_notification_response('DiagnosticsStatusNotificationResponse'()) ->
    message('DiagnosticsStatusNotificationResponse'()).
diagnostics_status_notification_response(DiagnosticsStatusNotificationResponse) ->
    {Spec, Opts} = (?DiagnosticsStatusNotificationResponse),
    {?MODULE, 'DiagnosticsStatusNotificationResponse',
        cmap:new(Spec, DiagnosticsStatusNotificationResponse, Opts)}.

-spec firmware_status_notification_request('FirmwareStatusNotificationRequest'()) ->
    message('FirmwareStatusNotificationRequest'()).
firmware_status_notification_request(FirmwareStatusNotificationRequest) ->
    {Spec, Opts} = (?FirmwareStatusNotificationRequest),
    {?MODULE, 'FirmwareStatusNotificationRequest',
        cmap:new(Spec, FirmwareStatusNotificationRequest, Opts)}.

-spec firmware_status_notification_response('FirmwareStatusNotificationResponse'()) ->
    message('FirmwareStatusNotificationResponse'()).
firmware_status_notification_response(FirmwareStatusNotificationResponse) ->
    {Spec, Opts} = (?FirmwareStatusNotificationResponse),
    {?MODULE, 'FirmwareStatusNotificationResponse',
        cmap:new(Spec, FirmwareStatusNotificationResponse, Opts)}.

-spec get_composite_schedule_request('GetCompositeScheduleRequest'()) ->
    message('GetCompositeScheduleRequest'()).
get_composite_schedule_request(GetCompositeScheduleRequest) ->
    {Spec, Opts} = (?GetCompositeScheduleRequest),
    {?MODULE, 'GetCompositeScheduleRequest', cmap:new(Spec, GetCompositeScheduleRequest, Opts)}.

-spec get_composite_schedule_response('GetCompositeScheduleResponse'()) ->
    message('GetCompositeScheduleResponse'()).
get_composite_schedule_response(GetCompositeScheduleResponse) ->
    {Spec, Opts} = (?GetCompositeScheduleResponse),
    {?MODULE, 'GetCompositeScheduleResponse', cmap:new(Spec, GetCompositeScheduleResponse, Opts)}.

-spec get_configuration_request('GetConfigurationRequest'()) ->
    message('GetConfigurationRequest'()).
get_configuration_request(GetConfigurationRequest) ->
    {Spec, Opts} = (?GetConfigurationRequest),
    {?MODULE, 'GetConfigurationRequest', cmap:new(Spec, GetConfigurationRequest, Opts)}.

-spec get_configuration_response('GetConfigurationResponse'()) ->
    message('GetConfigurationResponse'()).
get_configuration_response(GetConfigurationResponse) ->
    {Spec, Opts} = (?GetConfigurationResponse),
    {?MODULE, 'GetConfigurationResponse', cmap:new(Spec, GetConfigurationResponse, Opts)}.

-spec get_diagnostics_request('GetDiagnosticsRequest'()) -> message('GetDiagnosticsRequest'()).
get_diagnostics_request(GetDiagnosticsRequest) ->
    {Spec, Opts} = (?GetDiagnosticsRequest),
    {?MODULE, 'GetDiagnosticsRequest', cmap:new(Spec, GetDiagnosticsRequest, Opts)}.

-spec get_diagnostics_response('GetDiagnosticsResponse'()) -> message('GetDiagnosticsResponse'()).
get_diagnostics_response(GetDiagnosticsResponse) ->
    {Spec, Opts} = (?GetDiagnosticsResponse),
    {?MODULE, 'GetDiagnosticsResponse', cmap:new(Spec, GetDiagnosticsResponse, Opts)}.

-spec get_local_list_version_request('GetLocalListVersionRequest'()) ->
    message('GetLocalListVersionRequest'()).
get_local_list_version_request(GetLocalListVersionRequest) ->
    {Spec, Opts} = (?GetLocalListVersionRequest),
    {?MODULE, 'GetLocalListVersionRequest', cmap:new(Spec, GetLocalListVersionRequest, Opts)}.

-spec get_local_list_version_response('GetLocalListVersionResponse'()) ->
    message('GetLocalListVersionResponse'()).
get_local_list_version_response(GetLocalListVersionResponse) ->
    {Spec, Opts} = (?GetLocalListVersionResponse),
    {?MODULE, 'GetLocalListVersionResponse', cmap:new(Spec, GetLocalListVersionResponse, Opts)}.

-spec heartbeat_request('HeartbeatRequest'()) -> message('HeartbeatRequest'()).
heartbeat_request(HeartbeatRequest) ->
    {Spec, Opts} = (?HeartbeatRequest),
    {?MODULE, 'HeartbeatRequest', cmap:new(Spec, HeartbeatRequest, Opts)}.

-spec heartbeat_response('HeartbeatResponse'()) -> message('HeartbeatResponse'()).
heartbeat_response(HeartbeatResponse) ->
    {Spec, Opts} = (?HeartbeatResponse),
    {?MODULE, 'HeartbeatResponse', cmap:new(Spec, HeartbeatResponse, Opts)}.

-spec meter_values_request('MeterValuesRequest'()) -> message('MeterValuesRequest'()).
meter_values_request(MeterValuesRequest) ->
    {Spec, Opts} = (?MeterValuesRequest),
    {?MODULE, 'MeterValuesRequest', cmap:new(Spec, MeterValuesRequest, Opts)}.

-spec meter_values_response('MeterValuesResponse'()) -> message('MeterValuesResponse'()).
meter_values_response(MeterValuesResponse) ->
    {Spec, Opts} = (?MeterValuesResponse),
    {?MODULE, 'MeterValuesResponse', cmap:new(Spec, MeterValuesResponse, Opts)}.

-spec remote_start_transaction_request('RemoteStartTransactionRequest'()) ->
    message('RemoteStartTransactionRequest'()).
remote_start_transaction_request(RemoteStartTransactionRequest) ->
    {Spec, Opts} = (?RemoteStartTransactionRequest),
    {?MODULE, 'RemoteStartTransactionRequest', cmap:new(Spec, RemoteStartTransactionRequest, Opts)}.

-spec remote_start_transaction_response('RemoteStartTransactionResponse'()) ->
    message('RemoteStartTransactionResponse'()).
remote_start_transaction_response(RemoteStartTransactionResponse) ->
    {Spec, Opts} = (?RemoteStartTransactionResponse),
    {?MODULE, 'RemoteStartTransactionResponse',
        cmap:new(Spec, RemoteStartTransactionResponse, Opts)}.

-spec remote_stop_transaction_request('RemoteStopTransactionRequest'()) ->
    message('RemoteStopTransactionRequest'()).
remote_stop_transaction_request(RemoteStopTransactionRequest) ->
    {Spec, Opts} = (?RemoteStopTransactionRequest),
    {?MODULE, 'RemoteStopTransactionRequest', cmap:new(Spec, RemoteStopTransactionRequest, Opts)}.

-spec remote_stop_transaction_response('RemoteStopTransactionResponse'()) ->
    message('RemoteStopTransactionResponse'()).
remote_stop_transaction_response(RemoteStopTransactionResponse) ->
    {Spec, Opts} = (?RemoteStopTransactionResponse),
    {?MODULE, 'RemoteStopTransactionResponse', cmap:new(Spec, RemoteStopTransactionResponse, Opts)}.

-spec reserve_now_request('ReserveNowRequest'()) -> message('ReserveNowRequest'()).
reserve_now_request(ReserveNowRequest) ->
    {Spec, Opts} = (?ReserveNowRequest),
    {?MODULE, 'ReserveNowRequest', cmap:new(Spec, ReserveNowRequest, Opts)}.

-spec reserve_now_response('ReserveNowResponse'()) -> message('ReserveNowResponse'()).
reserve_now_response(ReserveNowResponse) ->
    {Spec, Opts} = (?ReserveNowResponse),
    {?MODULE, 'ReserveNowResponse', cmap:new(Spec, ReserveNowResponse, Opts)}.

-spec reset_request('ResetRequest'()) -> message('ResetRequest'()).
reset_request(ResetRequest) ->
    {Spec, Opts} = (?ResetRequest),
    {?MODULE, 'ResetRequest', cmap:new(Spec, ResetRequest, Opts)}.

-spec reset_response('ResetResponse'()) -> message('ResetResponse'()).
reset_response(ResetResponse) ->
    {Spec, Opts} = (?ResetResponse),
    {?MODULE, 'ResetResponse', cmap:new(Spec, ResetResponse, Opts)}.

-spec send_local_list_request('SendLocalListRequest'()) -> message('SendLocalListRequest'()).
send_local_list_request(SendLocalListRequest) ->
    {Spec, Opts} = (?SendLocalListRequest),
    {?MODULE, 'SendLocalListRequest', cmap:new(Spec, SendLocalListRequest, Opts)}.

-spec send_local_list_response('SendLocalListResponse'()) -> message('SendLocalListResponse'()).
send_local_list_response(SendLocalListResponse) ->
    {Spec, Opts} = (?SendLocalListResponse),
    {?MODULE, 'SendLocalListResponse', cmap:new(Spec, SendLocalListResponse, Opts)}.

-spec set_charging_profile_request('SetChargingProfileRequest'()) ->
    message('SetChargingProfileRequest'()).
set_charging_profile_request(SetChargingProfileRequest) ->
    {Spec, Opts} = (?SetChargingProfileRequest),
    {?MODULE, 'SetChargingProfileRequest', cmap:new(Spec, SetChargingProfileRequest, Opts)}.

-spec set_charging_profile_response('SetChargingProfileResponse'()) ->
    message('SetChargingProfileResponse'()).
set_charging_profile_response(SetChargingProfileResponse) ->
    {Spec, Opts} = (?SetChargingProfileResponse),
    {?MODULE, 'SetChargingProfileResponse', cmap:new(Spec, SetChargingProfileResponse, Opts)}.

-spec start_transaction_request('StartTransactionRequest'()) ->
    message('StartTransactionRequest'()).
start_transaction_request(StartTransactionRequest) ->
    {Spec, Opts} = (?StartTransactionRequest),
    {?MODULE, 'StartTransactionRequest', cmap:new(Spec, StartTransactionRequest, Opts)}.

-spec start_transaction_response('StartTransactionResponse'()) ->
    message('StartTransactionResponse'()).
start_transaction_response(StartTransactionResponse) ->
    {Spec, Opts} = (?StartTransactionResponse),
    {?MODULE, 'StartTransactionResponse', cmap:new(Spec, StartTransactionResponse, Opts)}.

-spec status_notification_request('StatusNotificationRequest'()) ->
    message('StatusNotificationRequest'()).
status_notification_request(StatusNotificationRequest) ->
    {Spec, Opts} = (?StatusNotificationRequest),
    {?MODULE, 'StatusNotificationRequest', cmap:new(Spec, StatusNotificationRequest, Opts)}.

-spec status_notification_response('StatusNotificationResponse'()) ->
    message('StatusNotificationResponse'()).
status_notification_response(StatusNotificationResponse) ->
    {Spec, Opts} = (?StatusNotificationResponse),
    {?MODULE, 'StatusNotificationResponse', cmap:new(Spec, StatusNotificationResponse, Opts)}.

-spec stop_transaction_request('StopTransactionRequest'()) -> message('StopTransactionRequest'()).
stop_transaction_request(StopTransactionRequest) ->
    {Spec, Opts} = (?StopTransactionRequest),
    {?MODULE, 'StopTransactionRequest', cmap:new(Spec, StopTransactionRequest, Opts)}.

-spec stop_transaction_response('StopTransactionResponse'()) ->
    message('StopTransactionResponse'()).
stop_transaction_response(StopTransactionResponse) ->
    {Spec, Opts} = (?StopTransactionResponse),
    {?MODULE, 'StopTransactionResponse', cmap:new(Spec, StopTransactionResponse, Opts)}.

-spec trigger_message_request('TriggerMessageRequest'()) -> message('TriggerMessageRequest'()).
trigger_message_request(TriggerMessageRequest) ->
    {Spec, Opts} = (?TriggerMessageRequest),
    {?MODULE, 'TriggerMessageRequest', cmap:new(Spec, TriggerMessageRequest, Opts)}.

-spec trigger_message_response('TriggerMessageResponse'()) -> message('TriggerMessageResponse'()).
trigger_message_response(TriggerMessageResponse) ->
    {Spec, Opts} = (?TriggerMessageResponse),
    {?MODULE, 'TriggerMessageResponse', cmap:new(Spec, TriggerMessageResponse, Opts)}.

-spec unlock_connector_request('UnlockConnectorRequest'()) -> message('UnlockConnectorRequest'()).
unlock_connector_request(UnlockConnectorRequest) ->
    {Spec, Opts} = (?UnlockConnectorRequest),
    {?MODULE, 'UnlockConnectorRequest', cmap:new(Spec, UnlockConnectorRequest, Opts)}.

-spec unlock_connector_response('UnlockConnectorResponse'()) ->
    message('UnlockConnectorResponse'()).
unlock_connector_response(UnlockConnectorResponse) ->
    {Spec, Opts} = (?UnlockConnectorResponse),
    {?MODULE, 'UnlockConnectorResponse', cmap:new(Spec, UnlockConnectorResponse, Opts)}.

-spec update_firmware_request('UpdateFirmwareRequest'()) -> message('UpdateFirmwareRequest'()).
update_firmware_request(UpdateFirmwareRequest) ->
    {Spec, Opts} = (?UpdateFirmwareRequest),
    {?MODULE, 'UpdateFirmwareRequest', cmap:new(Spec, UpdateFirmwareRequest, Opts)}.

-spec update_firmware_response('UpdateFirmwareResponse'()) -> message('UpdateFirmwareResponse'()).
update_firmware_response(UpdateFirmwareResponse) ->
    {Spec, Opts} = (?UpdateFirmwareResponse),
    {?MODULE, 'UpdateFirmwareResponse', cmap:new(Spec, UpdateFirmwareResponse, Opts)}.

-spec decode(
    MessageType :: binary(),
    Direction :: request | response,
    Payload :: json:decode_value()
) ->
    {ok, message()}
    | {error, Reason :: any()}.
decode(MessageType, request, Payload) ->
    decode(<<MessageType/binary, "Request">>, Payload);
decode(MessageType, response, Payload) ->
    decode(<<MessageType/binary, "Response">>, Payload).
-spec decode(PayloadType :: binary(), Payload :: json:decode_value()) ->
    {ok, message()}
    | {error,
        Reason ::
            any()}.
decode(PayloadType, Payload) ->
    try maps:get(PayloadType, ?DECODERS) of
        Decoder -> decode_with(Decoder, PayloadType, Payload)
    catch
        error:badkey -> {error, unknown_message_type}
    end.
decode_with(Ctor, PayloadType, Payload) ->
    try (?MODULE):Ctor(Payload) of
        Message -> {ok, Message}
    catch
        _:Reason -> {error, Reason}
    end.
