%% DO NOT EIDT THIS FILE
%% It was generated by gen_messages.erl from priv/json_schemas/2.0.1
%% 2025-06-29T14:51:16-06:00

-module(ocpp_message_2_0_1).

-export([
    update_firmware_response/1,
    update_firmware_request/1,
    unpublish_firmware_response/1,
    unpublish_firmware_request/1,
    unlock_connector_response/1,
    unlock_connector_request/1,
    trigger_message_response/1,
    trigger_message_request/1,
    transaction_event_response/1,
    transaction_event_request/1,
    status_notification_response/1,
    status_notification_request/1,
    sign_certificate_response/1,
    sign_certificate_request/1,
    set_variables_response/1,
    set_variables_request/1,
    set_variable_monitoring_response/1,
    set_variable_monitoring_request/1,
    set_network_profile_response/1,
    set_network_profile_request/1,
    set_monitoring_level_response/1,
    set_monitoring_level_request/1,
    set_monitoring_base_response/1,
    set_monitoring_base_request/1,
    set_display_message_response/1,
    set_display_message_request/1,
    set_charging_profile_response/1,
    set_charging_profile_request/1,
    send_local_list_response/1,
    send_local_list_request/1,
    security_event_notification_response/1,
    security_event_notification_request/1,
    reset_response/1,
    reset_request/1,
    reserve_now_response/1,
    reserve_now_request/1,
    reservation_status_update_response/1,
    reservation_status_update_request/1,
    request_stop_transaction_response/1,
    request_stop_transaction_request/1,
    request_start_transaction_response/1,
    request_start_transaction_request/1,
    report_charging_profiles_response/1,
    report_charging_profiles_request/1,
    publish_firmware_status_notification_response/1,
    publish_firmware_status_notification_request/1,
    publish_firmware_response/1,
    publish_firmware_request/1,
    notify_report_response/1,
    notify_report_request/1,
    notify_monitoring_report_response/1,
    notify_monitoring_report_request/1,
    notify_event_response/1,
    notify_event_request/1,
    notifyev_charging_schedule_response/1,
    notifyev_charging_schedule_request/1,
    notifyev_charging_needs_response/1,
    notifyev_charging_needs_request/1,
    notify_display_messages_response/1,
    notify_display_messages_request/1,
    notify_customer_information_response/1,
    notify_customer_information_request/1,
    notify_charging_limit_response/1,
    notify_charging_limit_request/1,
    meter_values_response/1,
    meter_values_request/1,
    log_status_notification_response/1,
    log_status_notification_request/1,
    install_certificate_response/1,
    install_certificate_request/1,
    heartbeat_response/1,
    heartbeat_request/1,
    get_variables_response/1,
    get_variables_request/1,
    get_transaction_status_response/1,
    get_transaction_status_request/1,
    get_report_response/1,
    get_report_request/1,
    get_monitoring_report_response/1,
    get_monitoring_report_request/1,
    get_log_response/1,
    get_log_request/1,
    get_local_list_version_response/1,
    get_local_list_version_request/1,
    get_installed_certificate_ids_response/1,
    get_installed_certificate_ids_request/1,
    get_display_messages_response/1,
    get_display_messages_request/1,
    get_composite_schedule_response/1,
    get_composite_schedule_request/1,
    get_charging_profiles_response/1,
    get_charging_profiles_request/1,
    get_certificate_status_response/1,
    get_certificate_status_request/1,
    get_base_report_response/1,
    get_base_report_request/1,
    get15118ev_certificate_response/1,
    get15118ev_certificate_request/1,
    firmware_status_notification_response/1,
    firmware_status_notification_request/1,
    delete_certificate_response/1,
    delete_certificate_request/1,
    data_transfer_response/1,
    data_transfer_request/1,
    customer_information_response/1,
    customer_information_request/1,
    cost_updated_response/1,
    cost_updated_request/1,
    cleared_charging_limit_response/1,
    cleared_charging_limit_request/1,
    clear_variable_monitoring_response/1,
    clear_variable_monitoring_request/1,
    clear_display_message_response/1,
    clear_display_message_request/1,
    clear_charging_profile_response/1,
    clear_charging_profile_request/1,
    clear_cache_response/1,
    clear_cache_request/1,
    change_availability_response/1,
    change_availability_request/1,
    certificate_signed_response/1,
    certificate_signed_request/1,
    cancel_reservation_response/1,
    cancel_reservation_request/1,
    boot_notification_response/1,
    boot_notification_request/1,
    authorize_response/1,
    authorize_request/1
]).

-export([decode/3, decode/2]).

-export_type([
    'ACChargingParametersType'/0,
    'APNAuthenticationEnumType'/0,
    'APNType'/0,
    'AdditionalInfoType'/0,
    'AttributeEnumType'/0,
    'AuthorizationData'/0,
    'AuthorizationStatusEnumType'/0,
    'AuthorizeCertificateStatusEnumType'/0,
    'AuthorizeRequest'/0,
    'AuthorizeResponse'/0,
    'BootNotificationRequest'/0,
    'BootNotificationResponse'/0,
    'BootReasonEnumType'/0,
    'CancelReservationRequest'/0,
    'CancelReservationResponse'/0,
    'CancelReservationStatusEnumType'/0,
    'CertificateActionEnumType'/0,
    'CertificateHashDataChainType'/0,
    'CertificateHashDataType'/0,
    'CertificateSignedRequest'/0,
    'CertificateSignedResponse'/0,
    'CertificateSignedStatusEnumType'/0,
    'CertificateSigningUseEnumType'/0,
    'ChangeAvailabilityRequest'/0,
    'ChangeAvailabilityResponse'/0,
    'ChangeAvailabilityStatusEnumType'/0,
    'ChargingLimitSourceEnumType'/0,
    'ChargingLimitType'/0,
    'ChargingNeedsType'/0,
    'ChargingProfileCriterionType'/0,
    'ChargingProfileKindEnumType'/0,
    'ChargingProfilePurposeEnumType'/0,
    'ChargingProfileStatusEnumType'/0,
    'ChargingProfileType'/0,
    'ChargingRateUnitEnumType'/0,
    'ChargingSchedulePeriodType'/0,
    'ChargingScheduleType'/0,
    'ChargingStateEnumType'/0,
    'ChargingStationType'/0,
    'ClearCacheRequest'/0,
    'ClearCacheResponse'/0,
    'ClearCacheStatusEnumType'/0,
    'ClearChargingProfileRequest'/0,
    'ClearChargingProfileResponse'/0,
    'ClearChargingProfileStatusEnumType'/0,
    'ClearChargingProfileType'/0,
    'ClearDisplayMessageRequest'/0,
    'ClearDisplayMessageResponse'/0,
    'ClearMessageStatusEnumType'/0,
    'ClearMonitoringResultType'/0,
    'ClearMonitoringStatusEnumType'/0,
    'ClearVariableMonitoringRequest'/0,
    'ClearVariableMonitoringResponse'/0,
    'ClearedChargingLimitRequest'/0,
    'ClearedChargingLimitResponse'/0,
    'ComponentCriterionEnumType'/0,
    'ComponentType'/0,
    'ComponentVariableType'/0,
    'CompositeScheduleType'/0,
    'ConnectorEnumType'/0,
    'ConnectorStatusEnumType'/0,
    'ConsumptionCostType'/0,
    'CostKindEnumType'/0,
    'CostType'/0,
    'CostUpdatedRequest'/0,
    'CostUpdatedResponse'/0,
    'CustomDataType'/0,
    'CustomerInformationRequest'/0,
    'CustomerInformationResponse'/0,
    'CustomerInformationStatusEnumType'/0,
    'DCChargingParametersType'/0,
    'DataEnumType'/0,
    'DataTransferRequest'/0,
    'DataTransferResponse'/0,
    'DataTransferStatusEnumType'/0,
    'DeleteCertificateRequest'/0,
    'DeleteCertificateResponse'/0,
    'DeleteCertificateStatusEnumType'/0,
    'DisplayMessageStatusEnumType'/0,
    'EVSEType'/0,
    'EnergyTransferModeEnumType'/0,
    'EventDataType'/0,
    'EventNotificationEnumType'/0,
    'EventTriggerEnumType'/0,
    'FirmwareStatusEnumType'/0,
    'FirmwareStatusNotificationRequest'/0,
    'FirmwareStatusNotificationResponse'/0,
    'FirmwareType'/0,
    'GenericDeviceModelStatusEnumType'/0,
    'GenericStatusEnumType'/0,
    'Get15118EVCertificateRequest'/0,
    'Get15118EVCertificateResponse'/0,
    'GetBaseReportRequest'/0,
    'GetBaseReportResponse'/0,
    'GetCertificateIdUseEnumType'/0,
    'GetCertificateStatusEnumType'/0,
    'GetCertificateStatusRequest'/0,
    'GetCertificateStatusResponse'/0,
    'GetChargingProfileStatusEnumType'/0,
    'GetChargingProfilesRequest'/0,
    'GetChargingProfilesResponse'/0,
    'GetCompositeScheduleRequest'/0,
    'GetCompositeScheduleResponse'/0,
    'GetDisplayMessagesRequest'/0,
    'GetDisplayMessagesResponse'/0,
    'GetDisplayMessagesStatusEnumType'/0,
    'GetInstalledCertificateIdsRequest'/0,
    'GetInstalledCertificateIdsResponse'/0,
    'GetInstalledCertificateStatusEnumType'/0,
    'GetLocalListVersionRequest'/0,
    'GetLocalListVersionResponse'/0,
    'GetLogRequest'/0,
    'GetLogResponse'/0,
    'GetMonitoringReportRequest'/0,
    'GetMonitoringReportResponse'/0,
    'GetReportRequest'/0,
    'GetReportResponse'/0,
    'GetTransactionStatusRequest'/0,
    'GetTransactionStatusResponse'/0,
    'GetVariableDataType'/0,
    'GetVariableResultType'/0,
    'GetVariableStatusEnumType'/0,
    'GetVariablesRequest'/0,
    'GetVariablesResponse'/0,
    'HashAlgorithmEnumType'/0,
    'HeartbeatRequest'/0,
    'HeartbeatResponse'/0,
    'IdTokenEnumType'/0,
    'IdTokenInfoType'/0,
    'IdTokenType'/0,
    'InstallCertificateRequest'/0,
    'InstallCertificateResponse'/0,
    'InstallCertificateStatusEnumType'/0,
    'InstallCertificateUseEnumType'/0,
    'Iso15118EVCertificateStatusEnumType'/0,
    'LocationEnumType'/0,
    'LogEnumType'/0,
    'LogParametersType'/0,
    'LogStatusEnumType'/0,
    'LogStatusNotificationRequest'/0,
    'LogStatusNotificationResponse'/0,
    'MeasurandEnumType'/0,
    'MessageContentType'/0,
    'MessageFormatEnumType'/0,
    'MessageInfoType'/0,
    'MessagePriorityEnumType'/0,
    'MessageStateEnumType'/0,
    'MessageTriggerEnumType'/0,
    'MeterValueType'/0,
    'MeterValuesRequest'/0,
    'MeterValuesResponse'/0,
    'ModemType'/0,
    'MonitorEnumType'/0,
    'MonitoringBaseEnumType'/0,
    'MonitoringCriterionEnumType'/0,
    'MonitoringDataType'/0,
    'MutabilityEnumType'/0,
    'NetworkConnectionProfileType'/0,
    'NotifyChargingLimitRequest'/0,
    'NotifyChargingLimitResponse'/0,
    'NotifyCustomerInformationRequest'/0,
    'NotifyCustomerInformationResponse'/0,
    'NotifyDisplayMessagesRequest'/0,
    'NotifyDisplayMessagesResponse'/0,
    'NotifyEVChargingNeedsRequest'/0,
    'NotifyEVChargingNeedsResponse'/0,
    'NotifyEVChargingNeedsStatusEnumType'/0,
    'NotifyEVChargingScheduleRequest'/0,
    'NotifyEVChargingScheduleResponse'/0,
    'NotifyEventRequest'/0,
    'NotifyEventResponse'/0,
    'NotifyMonitoringReportRequest'/0,
    'NotifyMonitoringReportResponse'/0,
    'NotifyReportRequest'/0,
    'NotifyReportResponse'/0,
    'OCPPInterfaceEnumType'/0,
    'OCPPTransportEnumType'/0,
    'OCPPVersionEnumType'/0,
    'OCSPRequestDataType'/0,
    'OperationalStatusEnumType'/0,
    'PhaseEnumType'/0,
    'PublishFirmwareRequest'/0,
    'PublishFirmwareResponse'/0,
    'PublishFirmwareStatusEnumType'/0,
    'PublishFirmwareStatusNotificationRequest'/0,
    'PublishFirmwareStatusNotificationResponse'/0,
    'ReadingContextEnumType'/0,
    'ReasonEnumType'/0,
    'RecurrencyKindEnumType'/0,
    'RegistrationStatusEnumType'/0,
    'RelativeTimeIntervalType'/0,
    'ReportBaseEnumType'/0,
    'ReportChargingProfilesRequest'/0,
    'ReportChargingProfilesResponse'/0,
    'ReportDataType'/0,
    'RequestStartStopStatusEnumType'/0,
    'RequestStartTransactionRequest'/0,
    'RequestStartTransactionResponse'/0,
    'RequestStopTransactionRequest'/0,
    'RequestStopTransactionResponse'/0,
    'ReservationStatusUpdateRequest'/0,
    'ReservationStatusUpdateResponse'/0,
    'ReservationUpdateStatusEnumType'/0,
    'ReserveNowRequest'/0,
    'ReserveNowResponse'/0,
    'ReserveNowStatusEnumType'/0,
    'ResetEnumType'/0,
    'ResetRequest'/0,
    'ResetResponse'/0,
    'ResetStatusEnumType'/0,
    'SalesTariffEntryType'/0,
    'SalesTariffType'/0,
    'SampledValueType'/0,
    'SecurityEventNotificationRequest'/0,
    'SecurityEventNotificationResponse'/0,
    'SendLocalListRequest'/0,
    'SendLocalListResponse'/0,
    'SendLocalListStatusEnumType'/0,
    'SetChargingProfileRequest'/0,
    'SetChargingProfileResponse'/0,
    'SetDisplayMessageRequest'/0,
    'SetDisplayMessageResponse'/0,
    'SetMonitoringBaseRequest'/0,
    'SetMonitoringBaseResponse'/0,
    'SetMonitoringDataType'/0,
    'SetMonitoringLevelRequest'/0,
    'SetMonitoringLevelResponse'/0,
    'SetMonitoringResultType'/0,
    'SetMonitoringStatusEnumType'/0,
    'SetNetworkProfileRequest'/0,
    'SetNetworkProfileResponse'/0,
    'SetNetworkProfileStatusEnumType'/0,
    'SetVariableDataType'/0,
    'SetVariableMonitoringRequest'/0,
    'SetVariableMonitoringResponse'/0,
    'SetVariableResultType'/0,
    'SetVariableStatusEnumType'/0,
    'SetVariablesRequest'/0,
    'SetVariablesResponse'/0,
    'SignCertificateRequest'/0,
    'SignCertificateResponse'/0,
    'SignedMeterValueType'/0,
    'StatusInfoType'/0,
    'StatusNotificationRequest'/0,
    'StatusNotificationResponse'/0,
    'TransactionEventEnumType'/0,
    'TransactionEventRequest'/0,
    'TransactionEventResponse'/0,
    'TransactionType'/0,
    'TriggerMessageRequest'/0,
    'TriggerMessageResponse'/0,
    'TriggerMessageStatusEnumType'/0,
    'TriggerReasonEnumType'/0,
    'UnitOfMeasureType'/0,
    'UnlockConnectorRequest'/0,
    'UnlockConnectorResponse'/0,
    'UnlockStatusEnumType'/0,
    'UnpublishFirmwareRequest'/0,
    'UnpublishFirmwareResponse'/0,
    'UnpublishFirmwareStatusEnumType'/0,
    'UpdateEnumType'/0,
    'UpdateFirmwareRequest'/0,
    'UpdateFirmwareResponse'/0,
    'UpdateFirmwareStatusEnumType'/0,
    'UploadLogStatusEnumType'/0,
    'VPNEnumType'/0,
    'VPNType'/0,
    'VariableAttributeType'/0,
    'VariableCharacteristicsType'/0,
    'VariableMonitoringType'/0,
    'VariableType'/0
]).

-export_type([message/1, payload_type/0, payload/0]).

-type message(Payload) :: {?MODULE, payload_type(), Payload}.

-type message() :: message(payload()).

-type payload_type() ::
    'AuthorizeRequest'
    | 'AuthorizeResponse'
    | 'BootNotificationRequest'
    | 'BootNotificationResponse'
    | 'CancelReservationRequest'
    | 'CancelReservationResponse'
    | 'CertificateSignedRequest'
    | 'CertificateSignedResponse'
    | 'ChangeAvailabilityRequest'
    | 'ChangeAvailabilityResponse'
    | 'ClearCacheRequest'
    | 'ClearCacheResponse'
    | 'ClearChargingProfileRequest'
    | 'ClearChargingProfileResponse'
    | 'ClearDisplayMessageRequest'
    | 'ClearDisplayMessageResponse'
    | 'ClearVariableMonitoringRequest'
    | 'ClearVariableMonitoringResponse'
    | 'ClearedChargingLimitRequest'
    | 'ClearedChargingLimitResponse'
    | 'CostUpdatedRequest'
    | 'CostUpdatedResponse'
    | 'CustomerInformationRequest'
    | 'CustomerInformationResponse'
    | 'DataTransferRequest'
    | 'DataTransferResponse'
    | 'DeleteCertificateRequest'
    | 'DeleteCertificateResponse'
    | 'FirmwareStatusNotificationRequest'
    | 'FirmwareStatusNotificationResponse'
    | 'Get15118EVCertificateRequest'
    | 'Get15118EVCertificateResponse'
    | 'GetBaseReportRequest'
    | 'GetBaseReportResponse'
    | 'GetCertificateStatusRequest'
    | 'GetCertificateStatusResponse'
    | 'GetChargingProfilesRequest'
    | 'GetChargingProfilesResponse'
    | 'GetCompositeScheduleRequest'
    | 'GetCompositeScheduleResponse'
    | 'GetDisplayMessagesRequest'
    | 'GetDisplayMessagesResponse'
    | 'GetInstalledCertificateIdsRequest'
    | 'GetInstalledCertificateIdsResponse'
    | 'GetLocalListVersionRequest'
    | 'GetLocalListVersionResponse'
    | 'GetLogRequest'
    | 'GetLogResponse'
    | 'GetMonitoringReportRequest'
    | 'GetMonitoringReportResponse'
    | 'GetReportRequest'
    | 'GetReportResponse'
    | 'GetTransactionStatusRequest'
    | 'GetTransactionStatusResponse'
    | 'GetVariablesRequest'
    | 'GetVariablesResponse'
    | 'HeartbeatRequest'
    | 'HeartbeatResponse'
    | 'InstallCertificateRequest'
    | 'InstallCertificateResponse'
    | 'LogStatusNotificationRequest'
    | 'LogStatusNotificationResponse'
    | 'MeterValuesRequest'
    | 'MeterValuesResponse'
    | 'NotifyChargingLimitRequest'
    | 'NotifyChargingLimitResponse'
    | 'NotifyCustomerInformationRequest'
    | 'NotifyCustomerInformationResponse'
    | 'NotifyDisplayMessagesRequest'
    | 'NotifyDisplayMessagesResponse'
    | 'NotifyEVChargingNeedsRequest'
    | 'NotifyEVChargingNeedsResponse'
    | 'NotifyEVChargingScheduleRequest'
    | 'NotifyEVChargingScheduleResponse'
    | 'NotifyEventRequest'
    | 'NotifyEventResponse'
    | 'NotifyMonitoringReportRequest'
    | 'NotifyMonitoringReportResponse'
    | 'NotifyReportRequest'
    | 'NotifyReportResponse'
    | 'PublishFirmwareRequest'
    | 'PublishFirmwareResponse'
    | 'PublishFirmwareStatusNotificationRequest'
    | 'PublishFirmwareStatusNotificationResponse'
    | 'ReportChargingProfilesRequest'
    | 'ReportChargingProfilesResponse'
    | 'RequestStartTransactionRequest'
    | 'RequestStartTransactionResponse'
    | 'RequestStopTransactionRequest'
    | 'RequestStopTransactionResponse'
    | 'ReservationStatusUpdateRequest'
    | 'ReservationStatusUpdateResponse'
    | 'ReserveNowRequest'
    | 'ReserveNowResponse'
    | 'ResetRequest'
    | 'ResetResponse'
    | 'SecurityEventNotificationRequest'
    | 'SecurityEventNotificationResponse'
    | 'SendLocalListRequest'
    | 'SendLocalListResponse'
    | 'SetChargingProfileRequest'
    | 'SetChargingProfileResponse'
    | 'SetDisplayMessageRequest'
    | 'SetDisplayMessageResponse'
    | 'SetMonitoringBaseRequest'
    | 'SetMonitoringBaseResponse'
    | 'SetMonitoringLevelRequest'
    | 'SetMonitoringLevelResponse'
    | 'SetNetworkProfileRequest'
    | 'SetNetworkProfileResponse'
    | 'SetVariableMonitoringRequest'
    | 'SetVariableMonitoringResponse'
    | 'SetVariablesRequest'
    | 'SetVariablesResponse'
    | 'SignCertificateRequest'
    | 'SignCertificateResponse'
    | 'StatusNotificationRequest'
    | 'StatusNotificationResponse'
    | 'TransactionEventRequest'
    | 'TransactionEventResponse'
    | 'TriggerMessageRequest'
    | 'TriggerMessageResponse'
    | 'UnlockConnectorRequest'
    | 'UnlockConnectorResponse'
    | 'UnpublishFirmwareRequest'
    | 'UnpublishFirmwareResponse'
    | 'UpdateFirmwareRequest'
    | 'UpdateFirmwareResponse'.

-type payload() ::
    'AuthorizeRequest'()
    | 'AuthorizeResponse'()
    | 'BootNotificationRequest'()
    | 'BootNotificationResponse'()
    | 'CancelReservationRequest'()
    | 'CancelReservationResponse'()
    | 'CertificateSignedRequest'()
    | 'CertificateSignedResponse'()
    | 'ChangeAvailabilityRequest'()
    | 'ChangeAvailabilityResponse'()
    | 'ClearCacheRequest'()
    | 'ClearCacheResponse'()
    | 'ClearChargingProfileRequest'()
    | 'ClearChargingProfileResponse'()
    | 'ClearDisplayMessageRequest'()
    | 'ClearDisplayMessageResponse'()
    | 'ClearVariableMonitoringRequest'()
    | 'ClearVariableMonitoringResponse'()
    | 'ClearedChargingLimitRequest'()
    | 'ClearedChargingLimitResponse'()
    | 'CostUpdatedRequest'()
    | 'CostUpdatedResponse'()
    | 'CustomerInformationRequest'()
    | 'CustomerInformationResponse'()
    | 'DataTransferRequest'()
    | 'DataTransferResponse'()
    | 'DeleteCertificateRequest'()
    | 'DeleteCertificateResponse'()
    | 'FirmwareStatusNotificationRequest'()
    | 'FirmwareStatusNotificationResponse'()
    | 'Get15118EVCertificateRequest'()
    | 'Get15118EVCertificateResponse'()
    | 'GetBaseReportRequest'()
    | 'GetBaseReportResponse'()
    | 'GetCertificateStatusRequest'()
    | 'GetCertificateStatusResponse'()
    | 'GetChargingProfilesRequest'()
    | 'GetChargingProfilesResponse'()
    | 'GetCompositeScheduleRequest'()
    | 'GetCompositeScheduleResponse'()
    | 'GetDisplayMessagesRequest'()
    | 'GetDisplayMessagesResponse'()
    | 'GetInstalledCertificateIdsRequest'()
    | 'GetInstalledCertificateIdsResponse'()
    | 'GetLocalListVersionRequest'()
    | 'GetLocalListVersionResponse'()
    | 'GetLogRequest'()
    | 'GetLogResponse'()
    | 'GetMonitoringReportRequest'()
    | 'GetMonitoringReportResponse'()
    | 'GetReportRequest'()
    | 'GetReportResponse'()
    | 'GetTransactionStatusRequest'()
    | 'GetTransactionStatusResponse'()
    | 'GetVariablesRequest'()
    | 'GetVariablesResponse'()
    | 'HeartbeatRequest'()
    | 'HeartbeatResponse'()
    | 'InstallCertificateRequest'()
    | 'InstallCertificateResponse'()
    | 'LogStatusNotificationRequest'()
    | 'LogStatusNotificationResponse'()
    | 'MeterValuesRequest'()
    | 'MeterValuesResponse'()
    | 'NotifyChargingLimitRequest'()
    | 'NotifyChargingLimitResponse'()
    | 'NotifyCustomerInformationRequest'()
    | 'NotifyCustomerInformationResponse'()
    | 'NotifyDisplayMessagesRequest'()
    | 'NotifyDisplayMessagesResponse'()
    | 'NotifyEVChargingNeedsRequest'()
    | 'NotifyEVChargingNeedsResponse'()
    | 'NotifyEVChargingScheduleRequest'()
    | 'NotifyEVChargingScheduleResponse'()
    | 'NotifyEventRequest'()
    | 'NotifyEventResponse'()
    | 'NotifyMonitoringReportRequest'()
    | 'NotifyMonitoringReportResponse'()
    | 'NotifyReportRequest'()
    | 'NotifyReportResponse'()
    | 'PublishFirmwareRequest'()
    | 'PublishFirmwareResponse'()
    | 'PublishFirmwareStatusNotificationRequest'()
    | 'PublishFirmwareStatusNotificationResponse'()
    | 'ReportChargingProfilesRequest'()
    | 'ReportChargingProfilesResponse'()
    | 'RequestStartTransactionRequest'()
    | 'RequestStartTransactionResponse'()
    | 'RequestStopTransactionRequest'()
    | 'RequestStopTransactionResponse'()
    | 'ReservationStatusUpdateRequest'()
    | 'ReservationStatusUpdateResponse'()
    | 'ReserveNowRequest'()
    | 'ReserveNowResponse'()
    | 'ResetRequest'()
    | 'ResetResponse'()
    | 'SecurityEventNotificationRequest'()
    | 'SecurityEventNotificationResponse'()
    | 'SendLocalListRequest'()
    | 'SendLocalListResponse'()
    | 'SetChargingProfileRequest'()
    | 'SetChargingProfileResponse'()
    | 'SetDisplayMessageRequest'()
    | 'SetDisplayMessageResponse'()
    | 'SetMonitoringBaseRequest'()
    | 'SetMonitoringBaseResponse'()
    | 'SetMonitoringLevelRequest'()
    | 'SetMonitoringLevelResponse'()
    | 'SetNetworkProfileRequest'()
    | 'SetNetworkProfileResponse'()
    | 'SetVariableMonitoringRequest'()
    | 'SetVariableMonitoringResponse'()
    | 'SetVariablesRequest'()
    | 'SetVariablesResponse'()
    | 'SignCertificateRequest'()
    | 'SignCertificateResponse'()
    | 'StatusNotificationRequest'()
    | 'StatusNotificationResponse'()
    | 'TransactionEventRequest'()
    | 'TransactionEventResponse'()
    | 'TriggerMessageRequest'()
    | 'TriggerMessageResponse'()
    | 'UnlockConnectorRequest'()
    | 'UnlockConnectorResponse'()
    | 'UnpublishFirmwareRequest'()
    | 'UnpublishFirmwareResponse'()
    | 'UpdateFirmwareRequest'()
    | 'UpdateFirmwareResponse'().

%% @doc
%% AC_ Charging_ Parameters
%% urn:x-oca:ocpp:uid:2:233250
%% EV AC charging parameters.
%% @end
-type 'ACChargingParametersType'() :: #{
    evMinCurrent := integer(),
    evMaxVoltage := integer(),
    evMaxCurrent := integer(),
    energyAmount := integer(),
    customData => 'CustomDataType'()
}.

%% @doc
%% APN. APN_ Authentication. APN_ Authentication_ Code
%% urn:x-oca:ocpp:uid:1:568828
%% Authentication method.
%% @end
-type 'APNAuthenticationEnumType'() :: 'CHAP' | 'NONE' | 'PAP' | 'AUTO'.

%% @doc
%% APN
%% urn:x-oca:ocpp:uid:2:233134
%% Collection of configuration data needed to make a data-connection
%% over a cellular network.
%%
%% NOTE: When asking a GSM modem to dial in, it is possible to
%% specify which mobile operator should be used. This can be done
%% with the mobile country code (MCC) in combination with a mobile
%% network code (MNC). Example: If your preferred network is
%% Vodafone Netherlands, the MCC=204 and the MNC=04 which means the
%% key PreferredNetwork = 20404 Some modems allows to specify a
%% preferred network, which means, if this network is not available,
%% a different network is used. If you specify
%% UseOnlyPreferredNetwork and this network is not available, the
%% modem will not dial in.
%% @end
-type 'APNType'() :: #{
    useOnlyPreferredNetwork => boolean(),
    simPin => integer(),
    preferredNetwork => string(),
    customData => 'CustomDataType'(),
    apnUserName => string(),
    apnPassword => string(),
    apnAuthentication := 'APNAuthenticationEnumType'(),
    apn := string()
}.

%% @doc
%% Contains a case insensitive identifier to use for the
%% authorization and the type of authorization to support multiple
%% forms of identifiers.
%% @end
-type 'AdditionalInfoType'() :: #{
    type := string(),
    customData => 'CustomDataType'(),
    additionalIdToken := string()
}.

%% @doc
%% Type of attribute: Actual, Target, MinSet, MaxSet. Default is
%% Actual when omitted.
%% @end
-type 'AttributeEnumType'() :: 'Actual' | 'Target' | 'MinSet' | 'MaxSet'.

%% @doc
%% Contains the identifier to use for authorization.
%% @end
-type 'AuthorizationData'() :: #{
    idTokenInfo => 'IdTokenInfoType'(),
    idToken := 'IdTokenType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% ID_ Token. Status. Authorization_ Status
%% urn:x-oca:ocpp:uid:1:569372
%% Current status of the ID Token.
%% @end
-type 'AuthorizationStatusEnumType'() ::
    'Accepted'
    | 'Blocked'
    | 'ConcurrentTx'
    | 'Expired'
    | 'Invalid'
    | 'NoCredit'
    | 'NotAllowedTypeEVSE'
    | 'NotAtThisLocation'
    | 'NotAtThisTime'
    | 'Unknown'.

%% @doc
%% Certificate status information.
%% - if all certificates are valid: return 'Accepted'.
%% - if one of the certificates was revoked, return
%% 'CertificateRevoked'.
%% @end
-type 'AuthorizeCertificateStatusEnumType'() ::
    'Accepted'
    | 'SignatureError'
    | 'CertificateExpired'
    | 'CertificateRevoked'
    | 'NoCertificateAvailable'
    | 'CertChainError'
    | 'ContractCancelled'.

-type 'AuthorizeRequest'() :: #{
    iso15118CertificateHashData =>
        ['OCSPRequestDataType'()],
    idToken := 'IdTokenType'(),
    customData => 'CustomDataType'(),
    certificate => string()
}.

-type 'AuthorizeResponse'() :: #{
    idTokenInfo := 'IdTokenInfoType'(),
    customData => 'CustomDataType'(),
    certificateStatus =>
        'AuthorizeCertificateStatusEnumType'()
}.

-type 'BootNotificationRequest'() :: #{
    reason := 'BootReasonEnumType'(),
    customData => 'CustomDataType'(),
    chargingStation := 'ChargingStationType'()
}.

-type 'BootNotificationResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'RegistrationStatusEnumType'(),
    interval := integer(),
    customData => 'CustomDataType'(),
    currentTime := calendar:datetime()
}.

%% @doc
%% This contains the reason for sending this message to the CSMS.
%% @end
-type 'BootReasonEnumType'() ::
    'ApplicationReset'
    | 'FirmwareUpdate'
    | 'LocalReset'
    | 'PowerUp'
    | 'RemoteReset'
    | 'ScheduledReset'
    | 'Triggered'
    | 'Unknown'
    | 'Watchdog'.

-type 'CancelReservationRequest'() :: #{
    reservationId := integer(),
    customData => 'CustomDataType'()
}.

-type 'CancelReservationResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'CancelReservationStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This indicates the success or failure of the canceling of a
%% reservation by CSMS.
%% @end
-type 'CancelReservationStatusEnumType'() :: 'Accepted' | 'Rejected'.

%% @doc
%% Defines whether certificate needs to be installed or updated.
%% @end
-type 'CertificateActionEnumType'() :: 'Install' | 'Update'.

-type 'CertificateHashDataChainType'() :: #{
    customData => 'CustomDataType'(),
    childCertificateHashData =>
        ['CertificateHashDataType'()],
    certificateType :=
        'GetCertificateIdUseEnumType'(),
    certificateHashData :=
        'CertificateHashDataType'()
}.

-type 'CertificateHashDataType'() :: #{
    serialNumber := string(),
    issuerNameHash := string(),
    issuerKeyHash := string(),
    hashAlgorithm := 'HashAlgorithmEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'CertificateSignedRequest'() :: #{
    customData => 'CustomDataType'(),
    certificateType =>
        'CertificateSigningUseEnumType'(),
    certificateChain := string()
}.

-type 'CertificateSignedResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'CertificateSignedStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Returns whether certificate signing has been accepted, otherwise
%% rejected.
%% @end
-type 'CertificateSignedStatusEnumType'() :: 'Accepted' | 'Rejected'.

%% @doc
%% Indicates the type of certificate that is to be signed. When
%% omitted the certificate is to be used for both the 15118
%% connection (if implemented) and the Charging Station to CSMS
%% connection.
%% @end
-type 'CertificateSigningUseEnumType'() ::
    'ChargingStationCertificate'
    | 'V2GCertificate'.

-type 'ChangeAvailabilityRequest'() :: #{
    operationalStatus :=
        'OperationalStatusEnumType'(),
    evse => 'EVSEType'(),
    customData => 'CustomDataType'()
}.

-type 'ChangeAvailabilityResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'ChangeAvailabilityStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This indicates whether the Charging Station is able to perform
%% the availability change.
%% @end
-type 'ChangeAvailabilityStatusEnumType'() :: 'Accepted' | 'Rejected' | 'Scheduled'.

%% @doc
%% Source that has installed this charging profile.
%% @end
-type 'ChargingLimitSourceEnumType'() :: 'EMS' | 'Other' | 'SO' | 'CSO'.

%% @doc
%% Charging_ Limit
%% urn:x-enexis:ecdm:uid:2:234489
%% @end
-type 'ChargingLimitType'() :: #{
    isGridCritical => boolean(),
    customData => 'CustomDataType'(),
    chargingLimitSource :=
        'ChargingLimitSourceEnumType'()
}.

%% @doc
%% Charging_ Needs
%% urn:x-oca:ocpp:uid:2:233249
%% @end
-type 'ChargingNeedsType'() :: #{
    requestedEnergyTransfer :=
        'EnergyTransferModeEnumType'(),
    departureTime => calendar:datetime(),
    dcChargingParameters => 'DCChargingParametersType'(),
    customData => 'CustomDataType'(),
    acChargingParameters => 'ACChargingParametersType'()
}.

%% @doc
%% Charging_ Profile
%% urn:x-oca:ocpp:uid:2:233255
%% A ChargingProfile consists of ChargingSchedule, describing the
%% amount of power or current that can be delivered per time
%% interval.
%% @end
-type 'ChargingProfileCriterionType'() :: #{
    stackLevel => integer(),
    customData => 'CustomDataType'(),
    chargingProfilePurpose =>
        'ChargingProfilePurposeEnumType'(),
    chargingProfileId => [integer()],
    chargingLimitSource =>
        ['ChargingLimitSourceEnumType'()]
}.

%% @doc
%% Charging_ Profile. Charging_ Profile_ Kind. Charging_ Profile_
%% Kind_ Code
%% urn:x-oca:ocpp:uid:1:569232
%% Indicates the kind of schedule.
%% @end
-type 'ChargingProfileKindEnumType'() :: 'Absolute' | 'Recurring' | 'Relative'.

%% @doc
%% Charging_ Profile. Charging_ Profile_ Purpose. Charging_ Profile_
%% Purpose_ Code
%% urn:x-oca:ocpp:uid:1:569231
%% Defines the purpose of the schedule transferred by this profile
%% @end
-type 'ChargingProfilePurposeEnumType'() ::
    'ChargingStationExternalConstraints'
    | 'ChargingStationMaxProfile'
    | 'TxDefaultProfile'
    | 'TxProfile'.

%% @doc
%% Returns whether the Charging Station has been able to process the
%% message successfully. This does not guarantee the schedule will
%% be followed to the letter. There might be other constraints the
%% Charging Station may need to take into account.
%% @end
-type 'ChargingProfileStatusEnumType'() :: 'Accepted' | 'Rejected'.

%% @doc
%% Charging_ Profile
%% urn:x-oca:ocpp:uid:2:233255
%% A ChargingProfile consists of ChargingSchedule, describing the
%% amount of power or current that can be delivered per time
%% interval.
%% @end
-type 'ChargingProfileType'() :: #{
    validTo => calendar:datetime(),
    validFrom => calendar:datetime(),
    transactionId => string(),
    stackLevel := integer(),
    recurrencyKind => 'RecurrencyKindEnumType'(),
    id := integer(),
    customData => 'CustomDataType'(),
    chargingSchedule := ['ChargingScheduleType'()],
    chargingProfilePurpose :=
        'ChargingProfilePurposeEnumType'(),
    chargingProfileKind :=
        'ChargingProfileKindEnumType'()
}.

%% @doc
%% Charging_ Schedule. Charging_ Rate_ Unit. Charging_ Rate_ Unit_
%% Code
%% urn:x-oca:ocpp:uid:1:569238
%% The unit of measure Limit is expressed in.
%% @end
-type 'ChargingRateUnitEnumType'() :: 'W' | 'A'.

%% @doc
%% Charging_ Schedule_ Period
%% urn:x-oca:ocpp:uid:2:233257
%% Charging schedule period structure defines a time period in a
%% charging schedule.
%% @end
-type 'ChargingSchedulePeriodType'() :: #{
    startPeriod := integer(),
    phaseToUse => integer(),
    numberPhases => integer(),
    limit := number(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Charging_ Schedule
%% urn:x-oca:ocpp:uid:2:233256
%% Charging schedule structure defines a list of charging periods,
%% as used in: GetCompositeSchedule.conf and ChargingProfile.
%% @end
-type 'ChargingScheduleType'() :: #{
    startSchedule => calendar:datetime(),
    salesTariff => 'SalesTariffType'(),
    minChargingRate => number(),
    id := integer(),
    duration => integer(),
    customData => 'CustomDataType'(),
    chargingSchedulePeriod :=
        ['ChargingSchedulePeriodType'()],
    chargingRateUnit := 'ChargingRateUnitEnumType'()
}.

%% @doc
%% Transaction. State. Transaction_ State_ Code
%% urn:x-oca:ocpp:uid:1:569419
%% Current charging state, is required when state
%% has changed.
%% @end
-type 'ChargingStateEnumType'() ::
    'Charging'
    | 'EVConnected'
    | 'SuspendedEV'
    | 'SuspendedEVSE'
    | 'Idle'.

%% @doc
%% Charge_ Point
%% urn:x-oca:ocpp:uid:2:233122
%% The physical system where an Electrical Vehicle (EV) can be
%% charged.
%% @end
-type 'ChargingStationType'() :: #{
    vendorName := string(),
    serialNumber => string(),
    modem => 'ModemType'(),
    model := string(),
    firmwareVersion => string(),
    customData => 'CustomDataType'()
}.

-type 'ClearCacheRequest'() :: #{customData => 'CustomDataType'()}.

-type 'ClearCacheResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'ClearCacheStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Accepted if the Charging Station has executed the request,
%% otherwise rejected.
%% @end
-type 'ClearCacheStatusEnumType'() :: 'Accepted' | 'Rejected'.

-type 'ClearChargingProfileRequest'() :: #{
    customData => 'CustomDataType'(),
    chargingProfileId => integer(),
    chargingProfileCriteria =>
        'ClearChargingProfileType'()
}.

-type 'ClearChargingProfileResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'ClearChargingProfileStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Indicates if the Charging Station was able to execute the
%% request.
%% @end
-type 'ClearChargingProfileStatusEnumType'() :: 'Accepted' | 'Unknown'.

%% @doc
%% Charging_ Profile
%% urn:x-oca:ocpp:uid:2:233255
%% A ChargingProfile consists of a ChargingSchedule, describing the
%% amount of power or current that can be delivered per time
%% interval.
%% @end
-type 'ClearChargingProfileType'() :: #{
    stackLevel => integer(),
    evseId => integer(),
    customData => 'CustomDataType'(),
    chargingProfilePurpose =>
        'ChargingProfilePurposeEnumType'()
}.

-type 'ClearDisplayMessageRequest'() :: #{
    id := integer(),
    customData => 'CustomDataType'()
}.

-type 'ClearDisplayMessageResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'ClearMessageStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Returns whether the Charging Station has been able to remove the
%% message.
%% @end
-type 'ClearMessageStatusEnumType'() :: 'Accepted' | 'Unknown'.

-type 'ClearMonitoringResultType'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'ClearMonitoringStatusEnumType'(),
    id := integer(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Result of the clear request for this monitor, identified by its
%% Id.
%% @end
-type 'ClearMonitoringStatusEnumType'() :: 'Accepted' | 'Rejected' | 'NotFound'.

-type 'ClearVariableMonitoringRequest'() :: #{
    id := [integer()],
    customData => 'CustomDataType'()
}.

-type 'ClearVariableMonitoringResponse'() :: #{
    customData => 'CustomDataType'(),
    clearMonitoringResult :=
        ['ClearMonitoringResultType'()]
}.

-type 'ClearedChargingLimitRequest'() :: #{
    evseId => integer(),
    customData => 'CustomDataType'(),
    chargingLimitSource :=
        'ChargingLimitSourceEnumType'()
}.

-type 'ClearedChargingLimitResponse'() :: #{customData => 'CustomDataType'()}.

-type 'ComponentCriterionEnumType'() :: 'Active' | 'Available' | 'Enabled' | 'Problem'.

%% @doc
%% A physical or logical component
%% @end
-type 'ComponentType'() :: #{
    name := string(),
    instance => string(),
    evse => 'EVSEType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Class to report components, variables and variable attributes and
%% characteristics.
%% @end
-type 'ComponentVariableType'() :: #{
    variable => 'VariableType'(),
    customData => 'CustomDataType'(),
    component := 'ComponentType'()
}.

%% @doc
%% Composite_ Schedule
%% urn:x-oca:ocpp:uid:2:233362
%% @end
-type 'CompositeScheduleType'() :: #{
    scheduleStart := calendar:datetime(),
    evseId := integer(),
    duration := integer(),
    customData => 'CustomDataType'(),
    chargingSchedulePeriod :=
        ['ChargingSchedulePeriodType'()],
    chargingRateUnit := 'ChargingRateUnitEnumType'()
}.

%% @doc
%% This field specifies the connector type.
%% @end
-type 'ConnectorEnumType'() ::
    cCCS1
    | cCCS2
    | cG105
    | cTesla
    | cType1
    | cType2
    | 's309-1P-16A'
    | 's309-1P-32A'
    | 's309-3P-16A'
    | 's309-3P-32A'
    | sBS1361
    | 'sCEE-7-7'
    | sType2
    | sType3
    | 'Other1PhMax16A'
    | 'Other1PhOver16A'
    | 'Other3Ph'
    | 'Pan'
    | wInductive
    | wResonant
    | 'Undetermined'
    | 'Unknown'.

%% @doc
%% This contains the current status of the Connector.
%% @end
-type 'ConnectorStatusEnumType'() ::
    'Available'
    | 'Occupied'
    | 'Reserved'
    | 'Unavailable'
    | 'Faulted'.

%% @doc
%% Consumption_ Cost
%% urn:x-oca:ocpp:uid:2:233259
%% @end
-type 'ConsumptionCostType'() :: #{
    startValue := number(),
    customData => 'CustomDataType'(),
    cost := ['CostType'()]
}.

%% @doc
%% Cost. Cost_ Kind. Cost_ Kind_ Code
%% urn:x-oca:ocpp:uid:1:569243
%% The kind of cost referred to in the message element amount
%% @end
-type 'CostKindEnumType'() ::
    'CarbonDioxideEmission'
    | 'RelativePricePercentage'
    | 'RenewableGenerationPercentage'.

%% @doc
%% Cost
%% urn:x-oca:ocpp:uid:2:233258
%% @end
-type 'CostType'() :: #{
    customData => 'CustomDataType'(),
    costKind := 'CostKindEnumType'(),
    amountMultiplier => integer(),
    amount := integer()
}.

-type 'CostUpdatedRequest'() :: #{
    transactionId := string(),
    totalCost := number(),
    customData => 'CustomDataType'()
}.

-type 'CostUpdatedResponse'() :: #{customData => 'CustomDataType'()}.

%% @doc
%% This class does not get 'AdditionalProperties = false' in the
%% schema generation, so it can be extended with arbitrary JSON
%% properties to allow adding custom data.
%% @end
-type 'CustomDataType'() :: #{vendorId := string(), binary() => term()}.

-type 'CustomerInformationRequest'() :: #{
    requestId := integer(),
    report := boolean(),
    idToken => 'IdTokenType'(),
    customerIdentifier => string(),
    customerCertificate =>
        'CertificateHashDataType'(),
    customData => 'CustomDataType'(),
    clear := boolean()
}.

-type 'CustomerInformationResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'CustomerInformationStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Indicates whether the request was accepted.
%% @end
-type 'CustomerInformationStatusEnumType'() :: 'Accepted' | 'Rejected' | 'Invalid'.

%% @doc
%% DC_ Charging_ Parameters
%% urn:x-oca:ocpp:uid:2:233251
%% EV DC charging parameters
%% @end
-type 'DCChargingParametersType'() :: #{
    stateOfCharge => integer(),
    fullSoC => integer(),
    evMaxVoltage := integer(),
    evMaxPower => integer(),
    evMaxCurrent := integer(),
    evEnergyCapacity => integer(),
    energyAmount => integer(),
    customData => 'CustomDataType'(),
    bulkSoC => integer()
}.

%% @doc
%% Data type of this variable.
%% @end
-type 'DataEnumType'() ::
    string
    | decimal
    | integer
    | dateTime
    | boolean
    | 'OptionList'
    | 'SequenceList'
    | 'MemberList'.

-type 'DataTransferRequest'() :: #{
    vendorId := string(),
    messageId => string(),
    data => term(),
    customData => 'CustomDataType'()
}.

-type 'DataTransferResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'DataTransferStatusEnumType'(),
    data => term(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This indicates the success or failure of the data transfer.
%% @end
-type 'DataTransferStatusEnumType'() ::
    'Accepted'
    | 'Rejected'
    | 'UnknownMessageId'
    | 'UnknownVendorId'.

-type 'DeleteCertificateRequest'() :: #{
    customData => 'CustomDataType'(),
    certificateHashData :=
        'CertificateHashDataType'()
}.

-type 'DeleteCertificateResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'DeleteCertificateStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Charging Station indicates if it can process the request.
%% @end
-type 'DeleteCertificateStatusEnumType'() :: 'Accepted' | 'Failed' | 'NotFound'.

%% @doc
%% This indicates whether the Charging Station is able to display
%% the message.
%% @end
-type 'DisplayMessageStatusEnumType'() ::
    'Accepted'
    | 'NotSupportedMessageFormat'
    | 'Rejected'
    | 'NotSupportedPriority'
    | 'NotSupportedState'
    | 'UnknownTransaction'.

%% @doc
%% EVSE
%% urn:x-oca:ocpp:uid:2:233123
%% Electric Vehicle Supply Equipment
%% @end
-type 'EVSEType'() :: #{
    id := integer(),
    customData => 'CustomDataType'(),
    connectorId => integer()
}.

%% @doc
%% Charging_ Needs. Requested. Energy_ Transfer_ Mode_ Code
%% urn:x-oca:ocpp:uid:1:569209
%% Mode of energy transfer requested by the EV.
%% @end
-type 'EnergyTransferModeEnumType'() ::
    'DC'
    | 'AC_single_phase'
    | 'AC_two_phase'
    | 'AC_three_phase'.

%% @doc
%% Class to report an event notification for a component-variable.
%% @end
-type 'EventDataType'() :: #{
    variableMonitoringId => integer(),
    variable := 'VariableType'(),
    trigger := 'EventTriggerEnumType'(),
    transactionId => string(),
    timestamp := calendar:datetime(),
    techInfo => string(),
    techCode => string(),
    eventNotificationType := 'EventNotificationEnumType'(),
    eventId := integer(),
    customData => 'CustomDataType'(),
    component := 'ComponentType'(),
    cleared => boolean(),
    cause => integer(),
    actualValue := string()
}.

%% @doc
%% Specifies the event notification type of the message.
%% @end
-type 'EventNotificationEnumType'() ::
    'HardWiredNotification'
    | 'HardWiredMonitor'
    | 'PreconfiguredMonitor'
    | 'CustomMonitor'.

%% @doc
%% Type of monitor that triggered this event, e.g. exceeding a
%% threshold value.
%% @end
-type 'EventTriggerEnumType'() :: 'Alerting' | 'Delta' | 'Periodic'.

%% @doc
%% This contains the progress status of the firmware installation.
%% @end
-type 'FirmwareStatusEnumType'() ::
    'Downloaded'
    | 'DownloadFailed'
    | 'Downloading'
    | 'DownloadScheduled'
    | 'DownloadPaused'
    | 'Idle'
    | 'InstallationFailed'
    | 'Installing'
    | 'Installed'
    | 'InstallRebooting'
    | 'InstallScheduled'
    | 'InstallVerificationFailed'
    | 'InvalidSignature'
    | 'SignatureVerified'.

-type 'FirmwareStatusNotificationRequest'() :: #{
    status := 'FirmwareStatusEnumType'(),
    requestId => integer(),
    customData => 'CustomDataType'()
}.

-type 'FirmwareStatusNotificationResponse'() :: #{customData => 'CustomDataType'()}.

%% @doc
%% Firmware
%% urn:x-enexis:ecdm:uid:2:233291
%% Represents a copy of the firmware that can be loaded/updated on
%% the Charging Station.
%% @end
-type 'FirmwareType'() :: #{
    signingCertificate => string(),
    signature => string(),
    retrieveDateTime := calendar:datetime(),
    location := string(),
    installDateTime => calendar:datetime(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Indicates whether the Charging Station was able to accept the
%% request.
%% @end
-type 'GenericDeviceModelStatusEnumType'() ::
    'Accepted'
    | 'Rejected'
    | 'NotSupported'
    | 'EmptyResultSet'.

%% @doc
%% Specifies whether the CSMS can process the request.
%% @end
-type 'GenericStatusEnumType'() :: 'Accepted' | 'Rejected'.

-type 'Get15118EVCertificateRequest'() :: #{
    iso15118SchemaVersion := string(),
    exiRequest := string(),
    customData => 'CustomDataType'(),
    action := 'CertificateActionEnumType'()
}.

-type 'Get15118EVCertificateResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'Iso15118EVCertificateStatusEnumType'(),
    exiResponse := string(),
    customData => 'CustomDataType'()
}.

-type 'GetBaseReportRequest'() :: #{
    requestId := integer(),
    reportBase := 'ReportBaseEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'GetBaseReportResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'GenericDeviceModelStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Indicates the type of the requested certificate(s).
%% @end
-type 'GetCertificateIdUseEnumType'() ::
    'V2GRootCertificate'
    | 'MORootCertificate'
    | 'CSMSRootCertificate'
    | 'V2GCertificateChain'
    | 'ManufacturerRootCertificate'.

%% @doc
%% This indicates whether the charging station was able to retrieve
%% the OCSP certificate status.
%% @end
-type 'GetCertificateStatusEnumType'() :: 'Accepted' | 'Failed'.

-type 'GetCertificateStatusRequest'() :: #{
    ocspRequestData := 'OCSPRequestDataType'(),
    customData => 'CustomDataType'()
}.

-type 'GetCertificateStatusResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'GetCertificateStatusEnumType'(),
    ocspResult => string(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This indicates whether the Charging Station is able to process
%% this request and will send &lt;&lt;reportchargingprofilesrequest,
%% ReportChargingProfilesRequest&gt;&gt; messages.
%% @end
-type 'GetChargingProfileStatusEnumType'() :: 'Accepted' | 'NoProfiles'.

-type 'GetChargingProfilesRequest'() :: #{
    requestId := integer(),
    evseId => integer(),
    customData => 'CustomDataType'(),
    chargingProfile :=
        'ChargingProfileCriterionType'()
}.

-type 'GetChargingProfilesResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'GetChargingProfileStatusEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'GetCompositeScheduleRequest'() :: #{
    evseId := integer(),
    duration := integer(),
    customData => 'CustomDataType'(),
    chargingRateUnit =>
        'ChargingRateUnitEnumType'()
}.

-type 'GetCompositeScheduleResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'GenericStatusEnumType'(),
    schedule => 'CompositeScheduleType'(),
    customData => 'CustomDataType'()
}.

-type 'GetDisplayMessagesRequest'() :: #{
    state => 'MessageStateEnumType'(),
    requestId := integer(),
    priority => 'MessagePriorityEnumType'(),
    id => [integer()],
    customData => 'CustomDataType'()
}.

-type 'GetDisplayMessagesResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'GetDisplayMessagesStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Indicates if the Charging Station has Display Messages that match
%% the request criteria in the
%% &lt;&lt;getdisplaymessagesrequest,GetDisplayMessagesRequest&gt;&gt;
%% @end
-type 'GetDisplayMessagesStatusEnumType'() :: 'Accepted' | 'Unknown'.

-type 'GetInstalledCertificateIdsRequest'() :: #{
    customData => 'CustomDataType'(),
    certificateType =>
        ['GetCertificateIdUseEnumType'()]
}.

-type 'GetInstalledCertificateIdsResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'GetInstalledCertificateStatusEnumType'(),
    customData => 'CustomDataType'(),
    certificateHashDataChain =>
        ['CertificateHashDataChainType'()]
}.

%% @doc
%% Charging Station indicates if it can process the request.
%% @end
-type 'GetInstalledCertificateStatusEnumType'() :: 'Accepted' | 'NotFound'.

-type 'GetLocalListVersionRequest'() :: #{customData => 'CustomDataType'()}.

-type 'GetLocalListVersionResponse'() :: #{
    versionNumber := integer(),
    customData => 'CustomDataType'()
}.

-type 'GetLogRequest'() :: #{
    retryInterval => integer(),
    retries => integer(),
    requestId := integer(),
    logType := 'LogEnumType'(),
    log := 'LogParametersType'(),
    customData => 'CustomDataType'()
}.

-type 'GetLogResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'LogStatusEnumType'(),
    filename => string(),
    customData => 'CustomDataType'()
}.

-type 'GetMonitoringReportRequest'() :: #{
    requestId := integer(),
    monitoringCriteria =>
        ['MonitoringCriterionEnumType'()],
    customData => 'CustomDataType'(),
    componentVariable =>
        ['ComponentVariableType'()]
}.

-type 'GetMonitoringReportResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'GenericDeviceModelStatusEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'GetReportRequest'() :: #{
    requestId := integer(),
    customData => 'CustomDataType'(),
    componentVariable => ['ComponentVariableType'()],
    componentCriteria => ['ComponentCriterionEnumType'()]
}.

-type 'GetReportResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'GenericDeviceModelStatusEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'GetTransactionStatusRequest'() :: #{
    transactionId => string(),
    customData => 'CustomDataType'()
}.

-type 'GetTransactionStatusResponse'() :: #{
    ongoingIndicator => boolean(),
    messagesInQueue := boolean(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Class to hold parameters for GetVariables request.
%% @end
-type 'GetVariableDataType'() :: #{
    variable := 'VariableType'(),
    customData => 'CustomDataType'(),
    component := 'ComponentType'(),
    attributeType => 'AttributeEnumType'()
}.

%% @doc
%% Class to hold results of GetVariables request.
%% @end
-type 'GetVariableResultType'() :: #{
    variable := 'VariableType'(),
    customData => 'CustomDataType'(),
    component := 'ComponentType'(),
    attributeValue => string(),
    attributeType => 'AttributeEnumType'(),
    attributeStatusInfo => 'StatusInfoType'(),
    attributeStatus := 'GetVariableStatusEnumType'()
}.

%% @doc
%% Result status of getting the variable.
%% @end
-type 'GetVariableStatusEnumType'() ::
    'Accepted'
    | 'Rejected'
    | 'UnknownComponent'
    | 'UnknownVariable'
    | 'NotSupportedAttributeType'.

-type 'GetVariablesRequest'() :: #{
    getVariableData := ['GetVariableDataType'()],
    customData => 'CustomDataType'()
}.

-type 'GetVariablesResponse'() :: #{
    getVariableResult := ['GetVariableResultType'()],
    customData => 'CustomDataType'()
}.

%% @doc
%% Used algorithms for the hashes provided.
%% @end
-type 'HashAlgorithmEnumType'() :: 'SHA256' | 'SHA384' | 'SHA512'.

-type 'HeartbeatRequest'() :: #{customData => 'CustomDataType'()}.

-type 'HeartbeatResponse'() :: #{
    customData => 'CustomDataType'(),
    currentTime := calendar:datetime()
}.

%% @doc
%% Enumeration of possible idToken types.
%% @end
-type 'IdTokenEnumType'() ::
    'Central'
    | eMAID
    | 'ISO14443'
    | 'ISO15693'
    | 'KeyCode'
    | 'Local'
    | 'MacAddress'
    | 'NoAuthorization'.

%% @doc
%% ID_ Token
%% urn:x-oca:ocpp:uid:2:233247
%% Contains status information about an identifier.
%% It is advised to not stop charging for a token that expires
%% during charging, as ExpiryDate is only used for caching purposes.
%% If ExpiryDate is not given, the status has no end date.
%% @end
-type 'IdTokenInfoType'() :: #{
    status := 'AuthorizationStatusEnumType'(),
    personalMessage => 'MessageContentType'(),
    language2 => string(),
    language1 => string(),
    groupIdToken => 'IdTokenType'(),
    evseId => [integer()],
    customData => 'CustomDataType'(),
    chargingPriority => integer(),
    cacheExpiryDateTime => calendar:datetime()
}.

%% @doc
%% Contains a case insensitive identifier to use for the
%% authorization and the type of authorization to support multiple
%% forms of identifiers.
%% @end
-type 'IdTokenType'() :: #{
    type := 'IdTokenEnumType'(),
    idToken := string(),
    customData => 'CustomDataType'(),
    additionalInfo => ['AdditionalInfoType'()]
}.

-type 'InstallCertificateRequest'() :: #{
    customData => 'CustomDataType'(),
    certificateType :=
        'InstallCertificateUseEnumType'(),
    certificate := string()
}.

-type 'InstallCertificateResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'InstallCertificateStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Charging Station indicates if installation was successful.
%% @end
-type 'InstallCertificateStatusEnumType'() :: 'Accepted' | 'Rejected' | 'Failed'.

%% @doc
%% Indicates the certificate type that is sent.
%% @end
-type 'InstallCertificateUseEnumType'() ::
    'V2GRootCertificate'
    | 'MORootCertificate'
    | 'CSMSRootCertificate'
    | 'ManufacturerRootCertificate'.

%% @doc
%% Indicates whether the message was processed properly.
%% @end
-type 'Iso15118EVCertificateStatusEnumType'() :: 'Accepted' | 'Failed'.

%% @doc
%% Sampled_ Value. Location. Location_ Code
%% urn:x-oca:ocpp:uid:1:569265
%% Indicates where the measured value has been sampled. Default =
%% "Outlet"
%% @end
-type 'LocationEnumType'() :: 'Body' | 'Cable' | 'EV' | 'Inlet' | 'Outlet'.

%% @doc
%% This contains the type of log file that the Charging Station
%% should send.
%% @end
-type 'LogEnumType'() :: 'DiagnosticsLog' | 'SecurityLog'.

%% @doc
%% Log
%% urn:x-enexis:ecdm:uid:2:233373
%% Generic class for the configuration of logging entries.
%% @end
-type 'LogParametersType'() :: #{
    remoteLocation := string(),
    oldestTimestamp => calendar:datetime(),
    latestTimestamp => calendar:datetime(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This field indicates whether the Charging Station was able to
%% accept the request.
%% @end
-type 'LogStatusEnumType'() :: 'Accepted' | 'Rejected' | 'AcceptedCanceled'.

-type 'LogStatusNotificationRequest'() :: #{
    status := 'UploadLogStatusEnumType'(),
    requestId => integer(),
    customData => 'CustomDataType'()
}.

-type 'LogStatusNotificationResponse'() :: #{customData => 'CustomDataType'()}.

%% @doc
%% Sampled_ Value. Measurand. Measurand_ Code
%% urn:x-oca:ocpp:uid:1:569263
%% Type of measurement. Default = "Energy.Active.Import.Register"
%% @end
-type 'MeasurandEnumType'() ::
    'Current.Export'
    | 'Current.Import'
    | 'Current.Offered'
    | 'Energy.Active.Export.Register'
    | 'Energy.Active.Import.Register'
    | 'Energy.Reactive.Export.Register'
    | 'Energy.Reactive.Import.Register'
    | 'Energy.Active.Export.Interval'
    | 'Energy.Active.Import.Interval'
    | 'Energy.Active.Net'
    | 'Energy.Reactive.Export.Interval'
    | 'Energy.Reactive.Import.Interval'
    | 'Energy.Reactive.Net'
    | 'Energy.Apparent.Net'
    | 'Energy.Apparent.Import'
    | 'Energy.Apparent.Export'
    | 'Frequency'
    | 'Power.Active.Export'
    | 'Power.Active.Import'
    | 'Power.Factor'
    | 'Power.Offered'
    | 'Power.Reactive.Export'
    | 'Power.Reactive.Import'
    | 'SoC'
    | 'Voltage'.

%% @doc
%% Message_ Content
%% urn:x-enexis:ecdm:uid:2:234490
%% Contains message details, for a message to be displayed on a
%% Charging Station.
%% @end
-type 'MessageContentType'() :: #{
    language => string(),
    format := 'MessageFormatEnumType'(),
    customData => 'CustomDataType'(),
    content := string()
}.

%% @doc
%% Message_ Content. Format. Message_ Format_ Code
%% urn:x-enexis:ecdm:uid:1:570848
%% Format of the message.
%% @end
-type 'MessageFormatEnumType'() :: 'ASCII' | 'HTML' | 'URI' | 'UTF8'.

%% @doc
%% Message_ Info
%% urn:x-enexis:ecdm:uid:2:233264
%% Contains message details, for a message to be displayed on a
%% Charging Station.
%% @end
-type 'MessageInfoType'() :: #{
    transactionId => string(),
    state => 'MessageStateEnumType'(),
    startDateTime => calendar:datetime(),
    priority := 'MessagePriorityEnumType'(),
    message := 'MessageContentType'(),
    id := integer(),
    endDateTime => calendar:datetime(),
    display => 'ComponentType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Message_ Info. Priority. Message_ Priority_ Code
%% urn:x-enexis:ecdm:uid:1:569253
%% With what priority should this message be shown
%% @end
-type 'MessagePriorityEnumType'() :: 'AlwaysFront' | 'InFront' | 'NormalCycle'.

%% @doc
%% Message_ Info. State. Message_ State_ Code
%% urn:x-enexis:ecdm:uid:1:569254
%% During what state should this message be shown. When omitted this
%% message should be shown in any state of the Charging Station.
%% @end
-type 'MessageStateEnumType'() :: 'Charging' | 'Faulted' | 'Idle' | 'Unavailable'.

%% @doc
%% Type of message to be triggered.
%% @end
-type 'MessageTriggerEnumType'() ::
    'BootNotification'
    | 'LogStatusNotification'
    | 'FirmwareStatusNotification'
    | 'Heartbeat'
    | 'MeterValues'
    | 'SignChargingStationCertificate'
    | 'SignV2GCertificate'
    | 'StatusNotification'
    | 'TransactionEvent'
    | 'SignCombinedCertificate'
    | 'PublishFirmwareStatusNotification'.

%% @doc
%% Meter_ Value
%% urn:x-oca:ocpp:uid:2:233265
%% Collection of one or more sampled values in MeterValuesRequest
%% and TransactionEvent. All sampled values in a MeterValue are
%% sampled at the same point in time.
%% @end
-type 'MeterValueType'() :: #{
    timestamp := calendar:datetime(),
    sampledValue := ['SampledValueType'()],
    customData => 'CustomDataType'()
}.

%% @doc
%% Request_ Body
%% urn:x-enexis:ecdm:uid:2:234744
%% @end
-type 'MeterValuesRequest'() :: #{
    meterValue := ['MeterValueType'()],
    evseId := integer(),
    customData => 'CustomDataType'()
}.

-type 'MeterValuesResponse'() :: #{customData => 'CustomDataType'()}.

%% @doc
%% Wireless_ Communication_ Module
%% urn:x-oca:ocpp:uid:2:233306
%% Defines parameters required for initiating and maintaining
%% wireless communication with other devices.
%% @end
-type 'ModemType'() :: #{
    imsi => string(),
    iccid => string(),
    customData => 'CustomDataType'()
}.

%% @doc
%% The type of this monitor, e.g. a threshold, delta or periodic
%% monitor.
%% @end
-type 'MonitorEnumType'() ::
    'UpperThreshold'
    | 'LowerThreshold'
    | 'Delta'
    | 'Periodic'
    | 'PeriodicClockAligned'.

%% @doc
%% Specify which monitoring base will be set
%% @end
-type 'MonitoringBaseEnumType'() :: 'All' | 'FactoryDefault' | 'HardWiredOnly'.

-type 'MonitoringCriterionEnumType'() ::
    'ThresholdMonitoring'
    | 'DeltaMonitoring'
    | 'PeriodicMonitoring'.

%% @doc
%% Class to hold parameters of SetVariableMonitoring request.
%% @end
-type 'MonitoringDataType'() :: #{
    variableMonitoring := ['VariableMonitoringType'()],
    variable := 'VariableType'(),
    customData => 'CustomDataType'(),
    component := 'ComponentType'()
}.

%% @doc
%% Defines the mutability of this attribute. Default is ReadWrite
%% when omitted.
%% @end
-type 'MutabilityEnumType'() :: 'ReadOnly' | 'WriteOnly' | 'ReadWrite'.

%% @doc
%% Communication_ Function
%% urn:x-oca:ocpp:uid:2:233304
%% The NetworkConnectionProfile defines the functional and technical
%% parameters of a communication link.
%% @end
-type 'NetworkConnectionProfileType'() :: #{
    vpn => 'VPNType'(),
    securityProfile := integer(),
    ocppVersion := 'OCPPVersionEnumType'(),
    ocppTransport := 'OCPPTransportEnumType'(),
    ocppInterface := 'OCPPInterfaceEnumType'(),
    ocppCsmsUrl := string(),
    messageTimeout := integer(),
    customData => 'CustomDataType'(),
    apn => 'APNType'()
}.

-type 'NotifyChargingLimitRequest'() :: #{
    evseId => integer(),
    customData => 'CustomDataType'(),
    chargingSchedule =>
        ['ChargingScheduleType'()],
    chargingLimit := 'ChargingLimitType'()
}.

-type 'NotifyChargingLimitResponse'() :: #{customData => 'CustomDataType'()}.

-type 'NotifyCustomerInformationRequest'() :: #{
    tbc => boolean(),
    seqNo := integer(),
    requestId := integer(),
    generatedAt := calendar:datetime(),
    data := string(),
    customData => 'CustomDataType'()
}.

-type 'NotifyCustomerInformationResponse'() :: #{customData => 'CustomDataType'()}.

-type 'NotifyDisplayMessagesRequest'() :: #{
    tbc => boolean(),
    requestId := integer(),
    messageInfo => ['MessageInfoType'()],
    customData => 'CustomDataType'()
}.

-type 'NotifyDisplayMessagesResponse'() :: #{customData => 'CustomDataType'()}.

-type 'NotifyEVChargingNeedsRequest'() :: #{
    maxScheduleTuples => integer(),
    evseId := integer(),
    customData => 'CustomDataType'(),
    chargingNeeds := 'ChargingNeedsType'()
}.

-type 'NotifyEVChargingNeedsResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'NotifyEVChargingNeedsStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Returns whether the CSMS has been able to process the message
%% successfully. It does not imply that the evChargingNeeds can be
%% met with the current charging profile.
%% @end
-type 'NotifyEVChargingNeedsStatusEnumType'() :: 'Accepted' | 'Rejected' | 'Processing'.

-type 'NotifyEVChargingScheduleRequest'() :: #{
    timeBase := calendar:datetime(),
    evseId := integer(),
    customData => 'CustomDataType'(),
    chargingSchedule :=
        'ChargingScheduleType'()
}.

-type 'NotifyEVChargingScheduleResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'GenericStatusEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'NotifyEventRequest'() :: #{
    tbc => boolean(),
    seqNo := integer(),
    generatedAt := calendar:datetime(),
    eventData := ['EventDataType'()],
    customData => 'CustomDataType'()
}.

-type 'NotifyEventResponse'() :: #{customData => 'CustomDataType'()}.

-type 'NotifyMonitoringReportRequest'() :: #{
    tbc => boolean(),
    seqNo := integer(),
    requestId := integer(),
    monitor => ['MonitoringDataType'()],
    generatedAt := calendar:datetime(),
    customData => 'CustomDataType'()
}.

-type 'NotifyMonitoringReportResponse'() :: #{customData => 'CustomDataType'()}.

-type 'NotifyReportRequest'() :: #{
    tbc => boolean(),
    seqNo := integer(),
    requestId := integer(),
    reportData => ['ReportDataType'()],
    generatedAt := calendar:datetime(),
    customData => 'CustomDataType'()
}.

-type 'NotifyReportResponse'() :: #{customData => 'CustomDataType'()}.

%% @doc
%% Applicable Network Interface.
%% @end
-type 'OCPPInterfaceEnumType'() ::
    'Wired0'
    | 'Wired1'
    | 'Wired2'
    | 'Wired3'
    | 'Wireless0'
    | 'Wireless1'
    | 'Wireless2'
    | 'Wireless3'.

%% @doc
%% Communication_ Function. OCPP_ Transport. OCPP_ Transport_ Code
%% urn:x-oca:ocpp:uid:1:569356
%% Defines the transport protocol (e.g. SOAP or JSON). Note: SOAP is
%% not supported in OCPP 2.0, but is supported by other versions of
%% OCPP.
%% @end
-type 'OCPPTransportEnumType'() :: 'JSON' | 'SOAP'.

%% @doc
%% Communication_ Function. OCPP_ Version. OCPP_ Version_ Code
%% urn:x-oca:ocpp:uid:1:569355
%% Defines the OCPP version used for this communication function.
%% @end
-type 'OCPPVersionEnumType'() :: 'OCPP12' | 'OCPP15' | 'OCPP16' | 'OCPP20'.

-type 'OCSPRequestDataType'() :: #{
    serialNumber := string(),
    responderURL := string(),
    issuerNameHash := string(),
    issuerKeyHash := string(),
    hashAlgorithm := 'HashAlgorithmEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This contains the type of availability change that the Charging
%% Station should perform.
%% @end
-type 'OperationalStatusEnumType'() :: 'Inoperative' | 'Operative'.

%% @doc
%% Sampled_ Value. Phase. Phase_ Code
%% urn:x-oca:ocpp:uid:1:569264
%% Indicates how the measured value is to be interpreted. For
%% instance between L1 and neutral (L1-N) Please note that not all
%% values of phase are applicable to all Measurands. When phase is
%% absent, the measured value is interpreted as an overall value.
%% @end
-type 'PhaseEnumType'() ::
    'L1'
    | 'L2'
    | 'L3'
    | 'N'
    | 'L1-N'
    | 'L2-N'
    | 'L3-N'
    | 'L1-L2'
    | 'L2-L3'
    | 'L3-L1'.

-type 'PublishFirmwareRequest'() :: #{
    retryInterval => integer(),
    retries => integer(),
    requestId := integer(),
    location := string(),
    customData => 'CustomDataType'(),
    checksum := string()
}.

-type 'PublishFirmwareResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'GenericStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This contains the progress status of the publishfirmware
%% installation.
%% @end
-type 'PublishFirmwareStatusEnumType'() ::
    'Idle'
    | 'DownloadScheduled'
    | 'Downloading'
    | 'Downloaded'
    | 'Published'
    | 'DownloadFailed'
    | 'DownloadPaused'
    | 'InvalidChecksum'
    | 'ChecksumVerified'
    | 'PublishFailed'.

-type 'PublishFirmwareStatusNotificationRequest'() :: #{
    status :=
        'PublishFirmwareStatusEnumType'(),
    requestId => integer(),
    location => [string()],
    customData =>
        'CustomDataType'()
}.

-type 'PublishFirmwareStatusNotificationResponse'() :: #{
    customData =>
        'CustomDataType'()
}.

%% @doc
%% Sampled_ Value. Context. Reading_ Context_ Code
%% urn:x-oca:ocpp:uid:1:569261
%% Type of detail value: start, end or sample. Default =
%% "Sample.Periodic"
%% @end
-type 'ReadingContextEnumType'() ::
    'Interruption.Begin'
    | 'Interruption.End'
    | 'Other'
    | 'Sample.Clock'
    | 'Sample.Periodic'
    | 'Transaction.Begin'
    | 'Transaction.End'
    | 'Trigger'.

%% @doc
%% Transaction. Stopped_ Reason. EOT_ Reason_ Code
%% urn:x-oca:ocpp:uid:1:569413
%% This contains the reason why the transaction was stopped. MAY
%% only be omitted when Reason is "Local".
%% @end
-type 'ReasonEnumType'() ::
    'DeAuthorized'
    | 'EmergencyStop'
    | 'EnergyLimitReached'
    | 'EVDisconnected'
    | 'GroundFault'
    | 'ImmediateReset'
    | 'Local'
    | 'LocalOutOfCredit'
    | 'MasterPass'
    | 'Other'
    | 'OvercurrentFault'
    | 'PowerLoss'
    | 'PowerQuality'
    | 'Reboot'
    | 'Remote'
    | 'SOCLimitReached'
    | 'StoppedByEV'
    | 'TimeLimitReached'
    | 'Timeout'.

%% @doc
%% Charging_ Profile. Recurrency_ Kind. Recurrency_ Kind_ Code
%% urn:x-oca:ocpp:uid:1:569233
%% Indicates the start point of a recurrence.
%% @end
-type 'RecurrencyKindEnumType'() :: 'Daily' | 'Weekly'.

%% @doc
%% This contains whether the Charging Station has been registered
%% within the CSMS.
%% @end
-type 'RegistrationStatusEnumType'() :: 'Accepted' | 'Pending' | 'Rejected'.

%% @doc
%% Relative_ Timer_ Interval
%% urn:x-oca:ocpp:uid:2:233270
%% @end
-type 'RelativeTimeIntervalType'() :: #{
    start := integer(),
    duration => integer(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This field specifies the report base.
%% @end
-type 'ReportBaseEnumType'() ::
    'ConfigurationInventory'
    | 'FullInventory'
    | 'SummaryInventory'.

-type 'ReportChargingProfilesRequest'() :: #{
    tbc => boolean(),
    requestId := integer(),
    evseId := integer(),
    customData => 'CustomDataType'(),
    chargingProfile :=
        ['ChargingProfileType'()],
    chargingLimitSource :=
        'ChargingLimitSourceEnumType'()
}.

-type 'ReportChargingProfilesResponse'() :: #{customData => 'CustomDataType'()}.

%% @doc
%% Class to report components, variables and variable attributes and
%% characteristics.
%% @end
-type 'ReportDataType'() :: #{
    variableCharacteristics =>
        'VariableCharacteristicsType'(),
    variableAttribute := ['VariableAttributeType'()],
    variable := 'VariableType'(),
    customData => 'CustomDataType'(),
    component := 'ComponentType'()
}.

%% @doc
%% Status indicating whether Charging Station accepts the request to
%% stop a transaction.
%% @end
-type 'RequestStartStopStatusEnumType'() :: 'Accepted' | 'Rejected'.

-type 'RequestStartTransactionRequest'() :: #{
    remoteStartId := integer(),
    idToken := 'IdTokenType'(),
    groupIdToken => 'IdTokenType'(),
    evseId => integer(),
    customData => 'CustomDataType'(),
    chargingProfile =>
        'ChargingProfileType'()
}.

-type 'RequestStartTransactionResponse'() :: #{
    transactionId => string(),
    statusInfo => 'StatusInfoType'(),
    status :=
        'RequestStartStopStatusEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'RequestStopTransactionRequest'() :: #{
    transactionId := string(),
    customData => 'CustomDataType'()
}.

-type 'RequestStopTransactionResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status :=
        'RequestStartStopStatusEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'ReservationStatusUpdateRequest'() :: #{
    reservationUpdateStatus :=
        'ReservationUpdateStatusEnumType'(),
    reservationId := integer(),
    customData => 'CustomDataType'()
}.

-type 'ReservationStatusUpdateResponse'() :: #{customData => 'CustomDataType'()}.

%% @doc
%% The updated reservation status.
%% @end
-type 'ReservationUpdateStatusEnumType'() :: 'Expired' | 'Removed'.

-type 'ReserveNowRequest'() :: #{
    idToken := 'IdTokenType'(),
    id := integer(),
    groupIdToken => 'IdTokenType'(),
    expiryDateTime := calendar:datetime(),
    evseId => integer(),
    customData => 'CustomDataType'(),
    connectorType => 'ConnectorEnumType'()
}.

-type 'ReserveNowResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'ReserveNowStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This indicates the success or failure of the reservation.
%% @end
-type 'ReserveNowStatusEnumType'() ::
    'Accepted'
    | 'Faulted'
    | 'Occupied'
    | 'Rejected'
    | 'Unavailable'.

%% @doc
%% This contains the type of reset that the Charging Station or EVSE
%% should perform.
%% @end
-type 'ResetEnumType'() :: 'Immediate' | 'OnIdle'.

-type 'ResetRequest'() :: #{
    type := 'ResetEnumType'(),
    evseId => integer(),
    customData => 'CustomDataType'()
}.

-type 'ResetResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'ResetStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This indicates whether the Charging Station is able to perform
%% the reset.
%% @end
-type 'ResetStatusEnumType'() :: 'Accepted' | 'Rejected' | 'Scheduled'.

%% @doc
%% Sales_ Tariff_ Entry
%% urn:x-oca:ocpp:uid:2:233271
%% @end
-type 'SalesTariffEntryType'() :: #{
    relativeTimeInterval :=
        'RelativeTimeIntervalType'(),
    ePriceLevel => integer(),
    customData => 'CustomDataType'(),
    consumptionCost => ['ConsumptionCostType'()]
}.

%% @doc
%% Sales_ Tariff
%% urn:x-oca:ocpp:uid:2:233272
%% NOTE: This dataType is based on dataTypes from
%% &lt;&lt;ref-ISOIEC15118-2,ISO 15118-2&gt;&gt;.
%% @end
-type 'SalesTariffType'() :: #{
    salesTariffEntry := ['SalesTariffEntryType'()],
    salesTariffDescription => string(),
    numEPriceLevels => integer(),
    id := integer(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Sampled_ Value
%% urn:x-oca:ocpp:uid:2:233266
%% Single sampled value in MeterValues. Each value can be
%% accompanied by optional fields.
%%
%% To save on mobile data usage, default values of all of the
%% optional fields are such that. The value without any additional
%% fields will be interpreted, as a register reading of active
%% import energy in Wh (Watt-hour) units.
%% @end
-type 'SampledValueType'() :: #{
    value := number(),
    unitOfMeasure => 'UnitOfMeasureType'(),
    signedMeterValue => 'SignedMeterValueType'(),
    phase => 'PhaseEnumType'(),
    measurand => 'MeasurandEnumType'(),
    location => 'LocationEnumType'(),
    customData => 'CustomDataType'(),
    context => 'ReadingContextEnumType'()
}.

-type 'SecurityEventNotificationRequest'() :: #{
    type := string(),
    timestamp := calendar:datetime(),
    techInfo => string(),
    customData => 'CustomDataType'()
}.

-type 'SecurityEventNotificationResponse'() :: #{customData => 'CustomDataType'()}.

-type 'SendLocalListRequest'() :: #{
    versionNumber := integer(),
    updateType := 'UpdateEnumType'(),
    localAuthorizationList => ['AuthorizationData'()],
    customData => 'CustomDataType'()
}.

-type 'SendLocalListResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'SendLocalListStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This indicates whether the Charging Station has successfully
%% received and applied the update of the Local Authorization List.
%% @end
-type 'SendLocalListStatusEnumType'() :: 'Accepted' | 'Failed' | 'VersionMismatch'.

-type 'SetChargingProfileRequest'() :: #{
    evseId := integer(),
    customData => 'CustomDataType'(),
    chargingProfile := 'ChargingProfileType'()
}.

-type 'SetChargingProfileResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'ChargingProfileStatusEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'SetDisplayMessageRequest'() :: #{
    message := 'MessageInfoType'(),
    customData => 'CustomDataType'()
}.

-type 'SetDisplayMessageResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'DisplayMessageStatusEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'SetMonitoringBaseRequest'() :: #{
    monitoringBase := 'MonitoringBaseEnumType'(),
    customData => 'CustomDataType'()
}.

-type 'SetMonitoringBaseResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'GenericDeviceModelStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Class to hold parameters of SetVariableMonitoring request.
%% @end
-type 'SetMonitoringDataType'() :: #{
    variable := 'VariableType'(),
    value := number(),
    type := 'MonitorEnumType'(),
    transaction => boolean(),
    severity := integer(),
    id => integer(),
    customData => 'CustomDataType'(),
    component := 'ComponentType'()
}.

-type 'SetMonitoringLevelRequest'() :: #{
    severity := integer(),
    customData => 'CustomDataType'()
}.

-type 'SetMonitoringLevelResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'GenericStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Class to hold result of SetVariableMonitoring request.
%% @end
-type 'SetMonitoringResultType'() :: #{
    variable := 'VariableType'(),
    type := 'MonitorEnumType'(),
    statusInfo => 'StatusInfoType'(),
    status := 'SetMonitoringStatusEnumType'(),
    severity := integer(),
    id => integer(),
    customData => 'CustomDataType'(),
    component := 'ComponentType'()
}.

%% @doc
%% Status is OK if a value could be returned. Otherwise this will
%% indicate the reason why a value could not be returned.
%% @end
-type 'SetMonitoringStatusEnumType'() ::
    'Accepted'
    | 'UnknownComponent'
    | 'UnknownVariable'
    | 'UnsupportedMonitorType'
    | 'Rejected'
    | 'Duplicate'.

-type 'SetNetworkProfileRequest'() :: #{
    customData => 'CustomDataType'(),
    connectionData :=
        'NetworkConnectionProfileType'(),
    configurationSlot := integer()
}.

-type 'SetNetworkProfileResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'SetNetworkProfileStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Result of operation.
%% @end
-type 'SetNetworkProfileStatusEnumType'() :: 'Accepted' | 'Rejected' | 'Failed'.

-type 'SetVariableDataType'() :: #{
    variable := 'VariableType'(),
    customData => 'CustomDataType'(),
    component := 'ComponentType'(),
    attributeValue := string(),
    attributeType => 'AttributeEnumType'()
}.

-type 'SetVariableMonitoringRequest'() :: #{
    setMonitoringData :=
        ['SetMonitoringDataType'()],
    customData => 'CustomDataType'()
}.

-type 'SetVariableMonitoringResponse'() :: #{
    setMonitoringResult :=
        ['SetMonitoringResultType'()],
    customData => 'CustomDataType'()
}.

-type 'SetVariableResultType'() :: #{
    variable := 'VariableType'(),
    customData => 'CustomDataType'(),
    component := 'ComponentType'(),
    attributeType => 'AttributeEnumType'(),
    attributeStatusInfo => 'StatusInfoType'(),
    attributeStatus := 'SetVariableStatusEnumType'()
}.

%% @doc
%% Result status of setting the variable.
%% @end
-type 'SetVariableStatusEnumType'() ::
    'Accepted'
    | 'Rejected'
    | 'UnknownComponent'
    | 'UnknownVariable'
    | 'NotSupportedAttributeType'
    | 'RebootRequired'.

-type 'SetVariablesRequest'() :: #{
    setVariableData := ['SetVariableDataType'()],
    customData => 'CustomDataType'()
}.

-type 'SetVariablesResponse'() :: #{
    setVariableResult := ['SetVariableResultType'()],
    customData => 'CustomDataType'()
}.

-type 'SignCertificateRequest'() :: #{
    customData => 'CustomDataType'(),
    csr := string(),
    certificateType =>
        'CertificateSigningUseEnumType'()
}.

-type 'SignCertificateResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'GenericStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Represent a signed version of the meter value.
%% @end
-type 'SignedMeterValueType'() :: #{
    signingMethod := string(),
    signedMeterData := string(),
    publicKey := string(),
    encodingMethod := string(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Element providing more information about the status.
%% @end
-type 'StatusInfoType'() :: #{
    reasonCode := string(),
    customData => 'CustomDataType'(),
    additionalInfo => string()
}.

-type 'StatusNotificationRequest'() :: #{
    timestamp := calendar:datetime(),
    evseId := integer(),
    customData => 'CustomDataType'(),
    connectorStatus := 'ConnectorStatusEnumType'(),
    connectorId := integer()
}.

-type 'StatusNotificationResponse'() :: #{customData => 'CustomDataType'()}.

%% @doc
%% This contains the type of this event.
%% The first TransactionEvent of a transaction SHALL contain:
%% "Started" The last TransactionEvent of a transaction SHALL
%% contain: "Ended" All others SHALL contain: "Updated"
%% @end
-type 'TransactionEventEnumType'() :: 'Ended' | 'Started' | 'Updated'.

-type 'TransactionEventRequest'() :: #{
    triggerReason := 'TriggerReasonEnumType'(),
    transactionInfo := 'TransactionType'(),
    timestamp := calendar:datetime(),
    seqNo := integer(),
    reservationId => integer(),
    offline => boolean(),
    numberOfPhasesUsed => integer(),
    meterValue => ['MeterValueType'()],
    idToken => 'IdTokenType'(),
    evse => 'EVSEType'(),
    eventType := 'TransactionEventEnumType'(),
    customData => 'CustomDataType'(),
    cableMaxCurrent => integer()
}.

-type 'TransactionEventResponse'() :: #{
    updatedPersonalMessage =>
        'MessageContentType'(),
    totalCost => number(),
    idTokenInfo => 'IdTokenInfoType'(),
    customData => 'CustomDataType'(),
    chargingPriority => integer()
}.

%% @doc
%% Transaction
%% urn:x-oca:ocpp:uid:2:233318
%% @end
-type 'TransactionType'() :: #{
    transactionId := string(),
    timeSpentCharging => integer(),
    stoppedReason => 'ReasonEnumType'(),
    remoteStartId => integer(),
    customData => 'CustomDataType'(),
    chargingState => 'ChargingStateEnumType'()
}.

-type 'TriggerMessageRequest'() :: #{
    requestedMessage := 'MessageTriggerEnumType'(),
    evse => 'EVSEType'(),
    customData => 'CustomDataType'()
}.

-type 'TriggerMessageResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'TriggerMessageStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Indicates whether the Charging Station will send the requested
%% notification or not.
%% @end
-type 'TriggerMessageStatusEnumType'() :: 'Accepted' | 'Rejected' | 'NotImplemented'.

%% @doc
%% Reason the Charging Station sends this message to the CSMS
%% @end
-type 'TriggerReasonEnumType'() ::
    'Authorized'
    | 'CablePluggedIn'
    | 'ChargingRateChanged'
    | 'ChargingStateChanged'
    | 'Deauthorized'
    | 'EnergyLimitReached'
    | 'EVCommunicationLost'
    | 'EVConnectTimeout'
    | 'MeterValueClock'
    | 'MeterValuePeriodic'
    | 'TimeLimitReached'
    | 'Trigger'
    | 'UnlockCommand'
    | 'StopAuthorized'
    | 'EVDeparted'
    | 'EVDetected'
    | 'RemoteStop'
    | 'RemoteStart'
    | 'AbnormalCondition'
    | 'SignedDataReceived'
    | 'ResetCommand'.

%% @doc
%% Represents a UnitOfMeasure with a multiplier
%% @end
-type 'UnitOfMeasureType'() :: #{
    unit => string(),
    multiplier => integer(),
    customData => 'CustomDataType'()
}.

-type 'UnlockConnectorRequest'() :: #{
    evseId := integer(),
    customData => 'CustomDataType'(),
    connectorId := integer()
}.

-type 'UnlockConnectorResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'UnlockStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This indicates whether the Charging Station has unlocked the
%% connector.
%% @end
-type 'UnlockStatusEnumType'() ::
    'Unlocked'
    | 'UnlockFailed'
    | 'OngoingAuthorizedTransaction'
    | 'UnknownConnector'.

-type 'UnpublishFirmwareRequest'() :: #{
    customData => 'CustomDataType'(),
    checksum := string()
}.

-type 'UnpublishFirmwareResponse'() :: #{
    status := 'UnpublishFirmwareStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Indicates whether the Local Controller succeeded in unpublishing
%% the firmware.
%% @end
-type 'UnpublishFirmwareStatusEnumType'() ::
    'DownloadOngoing'
    | 'NoFirmware'
    | 'Unpublished'.

%% @doc
%% This contains the type of update (full or differential) of this
%% request.
%% @end
-type 'UpdateEnumType'() :: 'Differential' | 'Full'.

-type 'UpdateFirmwareRequest'() :: #{
    retryInterval => integer(),
    retries => integer(),
    requestId := integer(),
    firmware := 'FirmwareType'(),
    customData => 'CustomDataType'()
}.

-type 'UpdateFirmwareResponse'() :: #{
    statusInfo => 'StatusInfoType'(),
    status := 'UpdateFirmwareStatusEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% This field indicates whether the Charging Station was able to
%% accept the request.
%% @end
-type 'UpdateFirmwareStatusEnumType'() ::
    'Accepted'
    | 'Rejected'
    | 'AcceptedCanceled'
    | 'InvalidCertificate'
    | 'RevokedCertificate'.

%% @doc
%% This contains the status of the log upload.
%% @end
-type 'UploadLogStatusEnumType'() ::
    'BadMessage'
    | 'Idle'
    | 'NotSupportedOperation'
    | 'PermissionDenied'
    | 'Uploaded'
    | 'UploadFailure'
    | 'Uploading'
    | 'AcceptedCanceled'.

%% @doc
%% VPN. Type. VPN_ Code
%% urn:x-oca:ocpp:uid:1:569277
%% Type of VPN
%% @end
-type 'VPNEnumType'() :: 'IKEv2' | 'IPSec' | 'L2TP' | 'PPTP'.

%% @doc
%% VPN
%% urn:x-oca:ocpp:uid:2:233268
%% VPN Configuration settings
%% @end
-type 'VPNType'() :: #{
    user := string(),
    type := 'VPNEnumType'(),
    server := string(),
    password := string(),
    key := string(),
    group => string(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Attribute data of a variable.
%% @end
-type 'VariableAttributeType'() :: #{
    value => string(),
    type => 'AttributeEnumType'(),
    persistent => boolean(),
    mutability => 'MutabilityEnumType'(),
    customData => 'CustomDataType'(),
    constant => boolean()
}.

%% @doc
%% Fixed read-only parameters of a variable.
%% @end
-type 'VariableCharacteristicsType'() :: #{
    valuesList => string(),
    unit => string(),
    supportsMonitoring := boolean(),
    minLimit => number(),
    maxLimit => number(),
    dataType := 'DataEnumType'(),
    customData => 'CustomDataType'()
}.

%% @doc
%% A monitoring setting for a variable.
%% @end
-type 'VariableMonitoringType'() :: #{
    value := number(),
    type := 'MonitorEnumType'(),
    transaction := boolean(),
    severity := integer(),
    id := integer(),
    customData => 'CustomDataType'()
}.

%% @doc
%% Reference key to a component-variable.
%% @end
-type 'VariableType'() :: #{
    name := string(),
    instance => string(),
    customData => 'CustomDataType'()
}.

-define(ACChargingParametersType,
    {
        #{
            evMinCurrent => cmap:integer_(#{}),
            evMaxVoltage => cmap:integer_(#{}),
            evMaxCurrent => cmap:integer_(#{}),
            energyAmount => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [
            {required, [energyAmount, evMinCurrent, evMaxCurrent, evMaxVoltage]},
            {extra_keys, false}
        ]
    }
).

-define(APNAuthenticationEnumType, cmap:enum_(['CHAP', 'NONE', 'PAP', 'AUTO'])).

-define(APNType,
    {
        #{
            useOnlyPreferredNetwork => fun cmap:boolean/1,
            simPin => cmap:integer_(#{}),
            preferredNetwork => cmap:string_(#{max_length => 6}),
            customData => fun 'CustomDataType'/1,
            apnUserName => cmap:string_(#{max_length => 20}),
            apnPassword => cmap:string_(#{max_length => 20}),
            apnAuthentication => fun 'APNAuthenticationEnumType'/1,
            apn => cmap:string_(#{max_length => 512})
        },
        [{required, [apn, apnAuthentication]}, {extra_keys, false}]
    }
).

-define(AdditionalInfoType,
    {
        #{
            type => cmap:string_(#{max_length => 50}),
            customData => fun 'CustomDataType'/1,
            additionalIdToken => cmap:string_(#{max_length => 36})
        },
        [{required, [additionalIdToken, type]}, {extra_keys, false}]
    }
).

-define(AttributeEnumType, cmap:enum_(['Actual', 'Target', 'MinSet', 'MaxSet'])).

-define(AuthorizationData,
    {
        #{
            idTokenInfo => fun 'IdTokenInfoType'/1,
            idToken => fun 'IdTokenType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [idToken]}, {extra_keys, false}]
    }
).

-define(AuthorizationStatusEnumType,
    cmap:enum_([
        'Accepted',
        'Blocked',
        'ConcurrentTx',
        'Expired',
        'Invalid',
        'NoCredit',
        'NotAllowedTypeEVSE',
        'NotAtThisLocation',
        'NotAtThisTime',
        'Unknown'
    ])
).

-define(AuthorizeCertificateStatusEnumType,
    cmap:enum_([
        'Accepted',
        'SignatureError',
        'CertificateExpired',
        'CertificateRevoked',
        'NoCertificateAvailable',
        'CertChainError',
        'ContractCancelled'
    ])
).

-define(BootReasonEnumType,
    cmap:enum_([
        'ApplicationReset',
        'FirmwareUpdate',
        'LocalReset',
        'PowerUp',
        'RemoteReset',
        'ScheduledReset',
        'Triggered',
        'Unknown',
        'Watchdog'
    ])
).

-define(CancelReservationStatusEnumType, cmap:enum_(['Accepted', 'Rejected'])).

-define(CertificateActionEnumType, cmap:enum_(['Install', 'Update'])).

-define(CertificateHashDataChainType,
    {
        #{
            customData => fun 'CustomDataType'/1,
            childCertificateHashData =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 4,
                    items => fun 'CertificateHashDataType'/1
                }),
            certificateType => fun 'GetCertificateIdUseEnumType'/1,
            certificateHashData => fun 'CertificateHashDataType'/1
        },
        [{required, [certificateType, certificateHashData]}, {extra_keys, false}]
    }
).

-define(CertificateHashDataType,
    {
        #{
            serialNumber => cmap:string_(#{max_length => 40}),
            issuerNameHash => cmap:string_(#{max_length => 128}),
            issuerKeyHash => cmap:string_(#{max_length => 128}),
            hashAlgorithm => fun 'HashAlgorithmEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [
            {required, [hashAlgorithm, issuerNameHash, issuerKeyHash, serialNumber]},
            {extra_keys, false}
        ]
    }
).

-define(CertificateSignedStatusEnumType, cmap:enum_(['Accepted', 'Rejected'])).

-define(CertificateSigningUseEnumType,
    cmap:enum_(['ChargingStationCertificate', 'V2GCertificate'])
).

-define(ChangeAvailabilityStatusEnumType,
    cmap:enum_(['Accepted', 'Rejected', 'Scheduled'])
).

-define(ChargingLimitSourceEnumType, cmap:enum_(['EMS', 'Other', 'SO', 'CSO'])).

-define(ChargingLimitType,
    {
        #{
            isGridCritical => fun cmap:boolean/1,
            customData => fun 'CustomDataType'/1,
            chargingLimitSource => fun 'ChargingLimitSourceEnumType'/1
        },
        [{required, [chargingLimitSource]}, {extra_keys, false}]
    }
).

-define(ChargingNeedsType,
    {
        #{
            requestedEnergyTransfer => fun 'EnergyTransferModeEnumType'/1,
            departureTime => fun cmap:datetime/1,
            dcChargingParameters => fun 'DCChargingParametersType'/1,
            customData => fun 'CustomDataType'/1,
            acChargingParameters => fun 'ACChargingParametersType'/1
        },
        [{required, [requestedEnergyTransfer]}, {extra_keys, false}]
    }
).

-define(ChargingProfileCriterionType,
    {
        #{
            stackLevel => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingProfilePurpose => fun 'ChargingProfilePurposeEnumType'/1,
            chargingProfileId =>
                cmap:list_(#{min_length => 1, items => cmap:integer_(#{})}),
            chargingLimitSource =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 4,
                    items => fun 'ChargingLimitSourceEnumType'/1
                })
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(ChargingProfileKindEnumType, cmap:enum_(['Absolute', 'Recurring', 'Relative'])).

-define(ChargingProfilePurposeEnumType,
    cmap:enum_([
        'ChargingStationExternalConstraints',
        'ChargingStationMaxProfile',
        'TxDefaultProfile',
        'TxProfile'
    ])
).

-define(ChargingProfileStatusEnumType, cmap:enum_(['Accepted', 'Rejected'])).

-define(ChargingProfileType,
    {
        #{
            validTo => fun cmap:datetime/1,
            validFrom => fun cmap:datetime/1,
            transactionId => cmap:string_(#{max_length => 36}),
            stackLevel => cmap:integer_(#{}),
            recurrencyKind => fun 'RecurrencyKindEnumType'/1,
            id => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingSchedule =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 3,
                    items => fun 'ChargingScheduleType'/1
                }),
            chargingProfilePurpose => fun 'ChargingProfilePurposeEnumType'/1,
            chargingProfileKind => fun 'ChargingProfileKindEnumType'/1
        },
        [
            {required, [
                id,
                stackLevel,
                chargingProfilePurpose,
                chargingProfileKind,
                chargingSchedule
            ]},
            {extra_keys, false}
        ]
    }
).

-define(ChargingRateUnitEnumType, cmap:enum_(['W', 'A'])).

-define(ChargingSchedulePeriodType,
    {
        #{
            startPeriod => cmap:integer_(#{}),
            phaseToUse => cmap:integer_(#{}),
            numberPhases => cmap:integer_(#{}),
            limit => fun cmap:number/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [startPeriod, limit]}, {extra_keys, false}]
    }
).

-define(ChargingScheduleType,
    {
        #{
            startSchedule => fun cmap:datetime/1,
            salesTariff => fun 'SalesTariffType'/1,
            minChargingRate => fun cmap:number/1,
            id => cmap:integer_(#{}),
            duration => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingSchedulePeriod =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 1024,
                    items => fun 'ChargingSchedulePeriodType'/1
                }),
            chargingRateUnit => fun 'ChargingRateUnitEnumType'/1
        },
        [
            {required, [id, chargingRateUnit, chargingSchedulePeriod]},
            {extra_keys, false}
        ]
    }
).

-define(ChargingStateEnumType,
    cmap:enum_([
        'Charging',
        'EVConnected',
        'SuspendedEV',
        'SuspendedEVSE',
        'Idle'
    ])
).

-define(ChargingStationType,
    {
        #{
            vendorName => cmap:string_(#{max_length => 50}),
            serialNumber => cmap:string_(#{max_length => 25}),
            modem => fun 'ModemType'/1,
            model => cmap:string_(#{max_length => 20}),
            firmwareVersion => cmap:string_(#{max_length => 50}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [model, vendorName]}, {extra_keys, false}]
    }
).

-define(ClearCacheStatusEnumType, cmap:enum_(['Accepted', 'Rejected'])).

-define(ClearChargingProfileStatusEnumType, cmap:enum_(['Accepted', 'Unknown'])).

-define(ClearChargingProfileType,
    {
        #{
            stackLevel => cmap:integer_(#{}),
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingProfilePurpose => fun 'ChargingProfilePurposeEnumType'/1
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(ClearMessageStatusEnumType, cmap:enum_(['Accepted', 'Unknown'])).

-define(ClearMonitoringResultType,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'ClearMonitoringStatusEnumType'/1,
            id => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [status, id]}, {extra_keys, false}]
    }
).

-define(ClearMonitoringStatusEnumType,
    cmap:enum_(['Accepted', 'Rejected', 'NotFound'])
).

-define(ComponentCriterionEnumType,
    cmap:enum_(['Active', 'Available', 'Enabled', 'Problem'])
).

-define(ComponentType,
    {
        #{
            name => cmap:string_(#{max_length => 50}),
            instance => cmap:string_(#{max_length => 50}),
            evse => fun 'EVSEType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [name]}, {extra_keys, false}]
    }
).

-define(ComponentVariableType,
    {
        #{
            variable => fun 'VariableType'/1,
            customData => fun 'CustomDataType'/1,
            component => fun 'ComponentType'/1
        },
        [{required, [component]}, {extra_keys, false}]
    }
).

-define(CompositeScheduleType,
    {
        #{
            scheduleStart => fun cmap:datetime/1,
            evseId => cmap:integer_(#{}),
            duration => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingSchedulePeriod =>
                cmap:list_(#{
                    min_length => 1,
                    items => fun 'ChargingSchedulePeriodType'/1
                }),
            chargingRateUnit => fun 'ChargingRateUnitEnumType'/1
        },
        [
            {required, [evseId, duration, scheduleStart, chargingRateUnit, chargingSchedulePeriod]},
            {extra_keys, false}
        ]
    }
).

-define(ConnectorEnumType,
    cmap:enum_([
        cCCS1,
        cCCS2,
        cG105,
        cTesla,
        cType1,
        cType2,
        's309-1P-16A',
        's309-1P-32A',
        's309-3P-16A',
        's309-3P-32A',
        sBS1361,
        'sCEE-7-7',
        sType2,
        sType3,
        'Other1PhMax16A',
        'Other1PhOver16A',
        'Other3Ph',
        'Pan',
        wInductive,
        wResonant,
        'Undetermined',
        'Unknown'
    ])
).

-define(ConnectorStatusEnumType,
    cmap:enum_(['Available', 'Occupied', 'Reserved', 'Unavailable', 'Faulted'])
).

-define(ConsumptionCostType,
    {
        #{
            startValue => fun cmap:number/1,
            customData => fun 'CustomDataType'/1,
            cost =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 3,
                    items => fun 'CostType'/1
                })
        },
        [{required, [startValue, cost]}, {extra_keys, false}]
    }
).

-define(CostKindEnumType,
    cmap:enum_([
        'CarbonDioxideEmission',
        'RelativePricePercentage',
        'RenewableGenerationPercentage'
    ])
).

-define(CostType,
    {
        #{
            customData => fun 'CustomDataType'/1,
            costKind => fun 'CostKindEnumType'/1,
            amountMultiplier => cmap:integer_(#{}),
            amount => cmap:integer_(#{})
        },
        [{required, [costKind, amount]}, {extra_keys, false}]
    }
).

-define(CustomDataType,
    {#{vendorId => cmap:string_(#{max_length => 255})}, [{required, [vendorId]}, {extra_keys, true}]}
).

-define(CustomerInformationStatusEnumType,
    cmap:enum_(['Accepted', 'Rejected', 'Invalid'])
).

-define(DCChargingParametersType,
    {
        #{
            stateOfCharge => cmap:integer_(#{max => 100, min => 0}),
            fullSoC => cmap:integer_(#{max => 100, min => 0}),
            evMaxVoltage => cmap:integer_(#{}),
            evMaxPower => cmap:integer_(#{}),
            evMaxCurrent => cmap:integer_(#{}),
            evEnergyCapacity => cmap:integer_(#{}),
            energyAmount => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            bulkSoC => cmap:integer_(#{max => 100, min => 0})
        },
        [{required, [evMaxCurrent, evMaxVoltage]}, {extra_keys, false}]
    }
).

-define(DataEnumType,
    cmap:enum_([
        string,
        decimal,
        integer,
        dateTime,
        boolean,
        'OptionList',
        'SequenceList',
        'MemberList'
    ])
).

-define(DataTransferStatusEnumType,
    cmap:enum_(['Accepted', 'Rejected', 'UnknownMessageId', 'UnknownVendorId'])
).

-define(DeleteCertificateStatusEnumType,
    cmap:enum_(['Accepted', 'Failed', 'NotFound'])
).

-define(DisplayMessageStatusEnumType,
    cmap:enum_([
        'Accepted',
        'NotSupportedMessageFormat',
        'Rejected',
        'NotSupportedPriority',
        'NotSupportedState',
        'UnknownTransaction'
    ])
).

-define(EVSEType,
    {
        #{
            id => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            connectorId => cmap:integer_(#{})
        },
        [{required, [id]}, {extra_keys, false}]
    }
).

-define(EnergyTransferModeEnumType,
    cmap:enum_(['DC', 'AC_single_phase', 'AC_two_phase', 'AC_three_phase'])
).

-define(EventDataType,
    {
        #{
            variableMonitoringId => cmap:integer_(#{}),
            variable => fun 'VariableType'/1,
            trigger => fun 'EventTriggerEnumType'/1,
            transactionId => cmap:string_(#{max_length => 36}),
            timestamp => fun cmap:datetime/1,
            techInfo => cmap:string_(#{max_length => 500}),
            techCode => cmap:string_(#{max_length => 50}),
            eventNotificationType => fun 'EventNotificationEnumType'/1,
            eventId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            component => fun 'ComponentType'/1,
            cleared => fun cmap:boolean/1,
            cause => cmap:integer_(#{}),
            actualValue => cmap:string_(#{max_length => 2500})
        },
        [
            {required, [
                eventId,
                timestamp,
                trigger,
                actualValue,
                eventNotificationType,
                component,
                variable
            ]},
            {extra_keys, false}
        ]
    }
).

-define(EventNotificationEnumType,
    cmap:enum_([
        'HardWiredNotification',
        'HardWiredMonitor',
        'PreconfiguredMonitor',
        'CustomMonitor'
    ])
).

-define(EventTriggerEnumType, cmap:enum_(['Alerting', 'Delta', 'Periodic'])).

-define(FirmwareStatusEnumType,
    cmap:enum_([
        'Downloaded',
        'DownloadFailed',
        'Downloading',
        'DownloadScheduled',
        'DownloadPaused',
        'Idle',
        'InstallationFailed',
        'Installing',
        'Installed',
        'InstallRebooting',
        'InstallScheduled',
        'InstallVerificationFailed',
        'InvalidSignature',
        'SignatureVerified'
    ])
).

-define(FirmwareType,
    {
        #{
            signingCertificate => cmap:string_(#{max_length => 5500}),
            signature => cmap:string_(#{max_length => 800}),
            retrieveDateTime => fun cmap:datetime/1,
            location => cmap:string_(#{max_length => 512}),
            installDateTime => fun cmap:datetime/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [location, retrieveDateTime]}, {extra_keys, false}]
    }
).

-define(GenericDeviceModelStatusEnumType,
    cmap:enum_(['Accepted', 'Rejected', 'NotSupported', 'EmptyResultSet'])
).

-define(GenericStatusEnumType, cmap:enum_(['Accepted', 'Rejected'])).

-define(GetCertificateIdUseEnumType,
    cmap:enum_([
        'V2GRootCertificate',
        'MORootCertificate',
        'CSMSRootCertificate',
        'V2GCertificateChain',
        'ManufacturerRootCertificate'
    ])
).

-define(GetCertificateStatusEnumType, cmap:enum_(['Accepted', 'Failed'])).

-define(GetChargingProfileStatusEnumType, cmap:enum_(['Accepted', 'NoProfiles'])).

-define(GetDisplayMessagesStatusEnumType, cmap:enum_(['Accepted', 'Unknown'])).

-define(GetInstalledCertificateStatusEnumType, cmap:enum_(['Accepted', 'NotFound'])).

-define(GetVariableDataType,
    {
        #{
            variable => fun 'VariableType'/1,
            customData => fun 'CustomDataType'/1,
            component => fun 'ComponentType'/1,
            attributeType => fun 'AttributeEnumType'/1
        },
        [{required, [component, variable]}, {extra_keys, false}]
    }
).

-define(GetVariableResultType,
    {
        #{
            variable => fun 'VariableType'/1,
            customData => fun 'CustomDataType'/1,
            component => fun 'ComponentType'/1,
            attributeValue => cmap:string_(#{max_length => 2500}),
            attributeType => fun 'AttributeEnumType'/1,
            attributeStatusInfo => fun 'StatusInfoType'/1,
            attributeStatus => fun 'GetVariableStatusEnumType'/1
        },
        [{required, [attributeStatus, component, variable]}, {extra_keys, false}]
    }
).

-define(GetVariableStatusEnumType,
    cmap:enum_([
        'Accepted',
        'Rejected',
        'UnknownComponent',
        'UnknownVariable',
        'NotSupportedAttributeType'
    ])
).

-define(HashAlgorithmEnumType, cmap:enum_(['SHA256', 'SHA384', 'SHA512'])).

-define(IdTokenEnumType,
    cmap:enum_([
        'Central',
        eMAID,
        'ISO14443',
        'ISO15693',
        'KeyCode',
        'Local',
        'MacAddress',
        'NoAuthorization'
    ])
).

-define(IdTokenInfoType,
    {
        #{
            status => fun 'AuthorizationStatusEnumType'/1,
            personalMessage => fun 'MessageContentType'/1,
            language2 => cmap:string_(#{max_length => 8}),
            language1 => cmap:string_(#{max_length => 8}),
            groupIdToken => fun 'IdTokenType'/1,
            evseId => cmap:list_(#{min_length => 1, items => cmap:integer_(#{})}),
            customData => fun 'CustomDataType'/1,
            chargingPriority => cmap:integer_(#{}),
            cacheExpiryDateTime => fun cmap:datetime/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(IdTokenType,
    {
        #{
            type => fun 'IdTokenEnumType'/1,
            idToken => cmap:string_(#{max_length => 36}),
            customData => fun 'CustomDataType'/1,
            additionalInfo =>
                cmap:list_(#{min_length => 1, items => fun 'AdditionalInfoType'/1})
        },
        [{required, [idToken, type]}, {extra_keys, false}]
    }
).

-define(InstallCertificateStatusEnumType,
    cmap:enum_(['Accepted', 'Rejected', 'Failed'])
).

-define(InstallCertificateUseEnumType,
    cmap:enum_([
        'V2GRootCertificate',
        'MORootCertificate',
        'CSMSRootCertificate',
        'ManufacturerRootCertificate'
    ])
).

-define(Iso15118EVCertificateStatusEnumType, cmap:enum_(['Accepted', 'Failed'])).

-define(LocationEnumType, cmap:enum_(['Body', 'Cable', 'EV', 'Inlet', 'Outlet'])).

-define(LogEnumType, cmap:enum_(['DiagnosticsLog', 'SecurityLog'])).

-define(LogParametersType,
    {
        #{
            remoteLocation => cmap:string_(#{max_length => 512}),
            oldestTimestamp => fun cmap:datetime/1,
            latestTimestamp => fun cmap:datetime/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [remoteLocation]}, {extra_keys, false}]
    }
).

-define(LogStatusEnumType, cmap:enum_(['Accepted', 'Rejected', 'AcceptedCanceled'])).

-define(MeasurandEnumType,
    cmap:enum_([
        'Current.Export',
        'Current.Import',
        'Current.Offered',
        'Energy.Active.Export.Register',
        'Energy.Active.Import.Register',
        'Energy.Reactive.Export.Register',
        'Energy.Reactive.Import.Register',
        'Energy.Active.Export.Interval',
        'Energy.Active.Import.Interval',
        'Energy.Active.Net',
        'Energy.Reactive.Export.Interval',
        'Energy.Reactive.Import.Interval',
        'Energy.Reactive.Net',
        'Energy.Apparent.Net',
        'Energy.Apparent.Import',
        'Energy.Apparent.Export',
        'Frequency',
        'Power.Active.Export',
        'Power.Active.Import',
        'Power.Factor',
        'Power.Offered',
        'Power.Reactive.Export',
        'Power.Reactive.Import',
        'SoC',
        'Voltage'
    ])
).

-define(MessageContentType,
    {
        #{
            language => cmap:string_(#{max_length => 8}),
            format => fun 'MessageFormatEnumType'/1,
            customData => fun 'CustomDataType'/1,
            content => cmap:string_(#{max_length => 512})
        },
        [{required, [format, content]}, {extra_keys, false}]
    }
).

-define(MessageFormatEnumType, cmap:enum_(['ASCII', 'HTML', 'URI', 'UTF8'])).

-define(MessageInfoType,
    {
        #{
            transactionId => cmap:string_(#{max_length => 36}),
            state => fun 'MessageStateEnumType'/1,
            startDateTime => fun cmap:datetime/1,
            priority => fun 'MessagePriorityEnumType'/1,
            message => fun 'MessageContentType'/1,
            id => cmap:integer_(#{}),
            endDateTime => fun cmap:datetime/1,
            display => fun 'ComponentType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [id, priority, message]}, {extra_keys, false}]
    }
).

-define(MessagePriorityEnumType, cmap:enum_(['AlwaysFront', 'InFront', 'NormalCycle'])).

-define(MessageStateEnumType,
    cmap:enum_(['Charging', 'Faulted', 'Idle', 'Unavailable'])
).

-define(MessageTriggerEnumType,
    cmap:enum_([
        'BootNotification',
        'LogStatusNotification',
        'FirmwareStatusNotification',
        'Heartbeat',
        'MeterValues',
        'SignChargingStationCertificate',
        'SignV2GCertificate',
        'StatusNotification',
        'TransactionEvent',
        'SignCombinedCertificate',
        'PublishFirmwareStatusNotification'
    ])
).

-define(MeterValueType,
    {
        #{
            timestamp => fun cmap:datetime/1,
            sampledValue =>
                cmap:list_(#{min_length => 1, items => fun 'SampledValueType'/1}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [timestamp, sampledValue]}, {extra_keys, false}]
    }
).

-define(ModemType,
    {
        #{
            imsi => cmap:string_(#{max_length => 20}),
            iccid => cmap:string_(#{max_length => 20}),
            customData => fun 'CustomDataType'/1
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(MonitorEnumType,
    cmap:enum_([
        'UpperThreshold',
        'LowerThreshold',
        'Delta',
        'Periodic',
        'PeriodicClockAligned'
    ])
).

-define(MonitoringBaseEnumType, cmap:enum_(['All', 'FactoryDefault', 'HardWiredOnly'])).

-define(MonitoringCriterionEnumType,
    cmap:enum_(['ThresholdMonitoring', 'DeltaMonitoring', 'PeriodicMonitoring'])
).

-define(MonitoringDataType,
    {
        #{
            variableMonitoring =>
                cmap:list_(#{min_length => 1, items => fun 'VariableMonitoringType'/1}),
            variable => fun 'VariableType'/1,
            customData => fun 'CustomDataType'/1,
            component => fun 'ComponentType'/1
        },
        [{required, [component, variable, variableMonitoring]}, {extra_keys, false}]
    }
).

-define(MutabilityEnumType, cmap:enum_(['ReadOnly', 'WriteOnly', 'ReadWrite'])).

-define(NetworkConnectionProfileType,
    {
        #{
            vpn => fun 'VPNType'/1,
            securityProfile => cmap:integer_(#{}),
            ocppVersion => fun 'OCPPVersionEnumType'/1,
            ocppTransport => fun 'OCPPTransportEnumType'/1,
            ocppInterface => fun 'OCPPInterfaceEnumType'/1,
            ocppCsmsUrl => cmap:string_(#{max_length => 512}),
            messageTimeout => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            apn => fun 'APNType'/1
        },
        [
            {required, [
                ocppVersion,
                ocppTransport,
                ocppCsmsUrl,
                messageTimeout,
                securityProfile,
                ocppInterface
            ]},
            {extra_keys, false}
        ]
    }
).

-define(NotifyEVChargingNeedsStatusEnumType,
    cmap:enum_(['Accepted', 'Rejected', 'Processing'])
).

-define(OCPPInterfaceEnumType,
    cmap:enum_([
        'Wired0',
        'Wired1',
        'Wired2',
        'Wired3',
        'Wireless0',
        'Wireless1',
        'Wireless2',
        'Wireless3'
    ])
).

-define(OCPPTransportEnumType, cmap:enum_(['JSON', 'SOAP'])).

-define(OCPPVersionEnumType, cmap:enum_(['OCPP12', 'OCPP15', 'OCPP16', 'OCPP20'])).

-define(OCSPRequestDataType,
    {
        #{
            serialNumber => cmap:string_(#{max_length => 40}),
            responderURL => cmap:string_(#{max_length => 512}),
            issuerNameHash => cmap:string_(#{max_length => 128}),
            issuerKeyHash => cmap:string_(#{max_length => 128}),
            hashAlgorithm => fun 'HashAlgorithmEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [
            {required, [hashAlgorithm, issuerNameHash, issuerKeyHash, serialNumber, responderURL]},
            {extra_keys, false}
        ]
    }
).

-define(OperationalStatusEnumType, cmap:enum_(['Inoperative', 'Operative'])).

-define(PhaseEnumType,
    cmap:enum_([
        'L1',
        'L2',
        'L3',
        'N',
        'L1-N',
        'L2-N',
        'L3-N',
        'L1-L2',
        'L2-L3',
        'L3-L1'
    ])
).

-define(PublishFirmwareStatusEnumType,
    cmap:enum_([
        'Idle',
        'DownloadScheduled',
        'Downloading',
        'Downloaded',
        'Published',
        'DownloadFailed',
        'DownloadPaused',
        'InvalidChecksum',
        'ChecksumVerified',
        'PublishFailed'
    ])
).

-define(ReadingContextEnumType,
    cmap:enum_([
        'Interruption.Begin',
        'Interruption.End',
        'Other',
        'Sample.Clock',
        'Sample.Periodic',
        'Transaction.Begin',
        'Transaction.End',
        'Trigger'
    ])
).

-define(ReasonEnumType,
    cmap:enum_([
        'DeAuthorized',
        'EmergencyStop',
        'EnergyLimitReached',
        'EVDisconnected',
        'GroundFault',
        'ImmediateReset',
        'Local',
        'LocalOutOfCredit',
        'MasterPass',
        'Other',
        'OvercurrentFault',
        'PowerLoss',
        'PowerQuality',
        'Reboot',
        'Remote',
        'SOCLimitReached',
        'StoppedByEV',
        'TimeLimitReached',
        'Timeout'
    ])
).

-define(RecurrencyKindEnumType, cmap:enum_(['Daily', 'Weekly'])).

-define(RegistrationStatusEnumType, cmap:enum_(['Accepted', 'Pending', 'Rejected'])).

-define(RelativeTimeIntervalType,
    {
        #{
            start => cmap:integer_(#{}),
            duration => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [start]}, {extra_keys, false}]
    }
).

-define(ReportBaseEnumType,
    cmap:enum_(['ConfigurationInventory', 'FullInventory', 'SummaryInventory'])
).

-define(ReportDataType,
    {
        #{
            variableCharacteristics => fun 'VariableCharacteristicsType'/1,
            variableAttribute =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 4,
                    items => fun 'VariableAttributeType'/1
                }),
            variable => fun 'VariableType'/1,
            customData => fun 'CustomDataType'/1,
            component => fun 'ComponentType'/1
        },
        [{required, [component, variable, variableAttribute]}, {extra_keys, false}]
    }
).

-define(RequestStartStopStatusEnumType, cmap:enum_(['Accepted', 'Rejected'])).

-define(ReservationUpdateStatusEnumType, cmap:enum_(['Expired', 'Removed'])).

-define(ReserveNowStatusEnumType,
    cmap:enum_(['Accepted', 'Faulted', 'Occupied', 'Rejected', 'Unavailable'])
).

-define(ResetEnumType, cmap:enum_(['Immediate', 'OnIdle'])).

-define(ResetStatusEnumType, cmap:enum_(['Accepted', 'Rejected', 'Scheduled'])).

-define(SalesTariffEntryType,
    {
        #{
            relativeTimeInterval => fun 'RelativeTimeIntervalType'/1,
            ePriceLevel => cmap:integer_(#{min => 0}),
            customData => fun 'CustomDataType'/1,
            consumptionCost =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 3,
                    items => fun 'ConsumptionCostType'/1
                })
        },
        [{required, [relativeTimeInterval]}, {extra_keys, false}]
    }
).

-define(SalesTariffType,
    {
        #{
            salesTariffEntry =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 1024,
                    items => fun 'SalesTariffEntryType'/1
                }),
            salesTariffDescription => cmap:string_(#{max_length => 32}),
            numEPriceLevels => cmap:integer_(#{}),
            id => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [id, salesTariffEntry]}, {extra_keys, false}]
    }
).

-define(SampledValueType,
    {
        #{
            value => fun cmap:number/1,
            unitOfMeasure => fun 'UnitOfMeasureType'/1,
            signedMeterValue => fun 'SignedMeterValueType'/1,
            phase => fun 'PhaseEnumType'/1,
            measurand => fun 'MeasurandEnumType'/1,
            location => fun 'LocationEnumType'/1,
            customData => fun 'CustomDataType'/1,
            context => fun 'ReadingContextEnumType'/1
        },
        [{required, [value]}, {extra_keys, false}]
    }
).

-define(SendLocalListStatusEnumType,
    cmap:enum_(['Accepted', 'Failed', 'VersionMismatch'])
).

-define(SetMonitoringDataType,
    {
        #{
            variable => fun 'VariableType'/1,
            value => fun cmap:number/1,
            type => fun 'MonitorEnumType'/1,
            transaction => fun cmap:boolean/1,
            severity => cmap:integer_(#{}),
            id => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            component => fun 'ComponentType'/1
        },
        [
            {required, [value, type, severity, component, variable]},
            {extra_keys, false}
        ]
    }
).

-define(SetMonitoringResultType,
    {
        #{
            variable => fun 'VariableType'/1,
            type => fun 'MonitorEnumType'/1,
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'SetMonitoringStatusEnumType'/1,
            severity => cmap:integer_(#{}),
            id => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            component => fun 'ComponentType'/1
        },
        [
            {required, [status, type, severity, component, variable]},
            {extra_keys, false}
        ]
    }
).

-define(SetMonitoringStatusEnumType,
    cmap:enum_([
        'Accepted',
        'UnknownComponent',
        'UnknownVariable',
        'UnsupportedMonitorType',
        'Rejected',
        'Duplicate'
    ])
).

-define(SetNetworkProfileStatusEnumType,
    cmap:enum_(['Accepted', 'Rejected', 'Failed'])
).

-define(SetVariableDataType,
    {
        #{
            variable => fun 'VariableType'/1,
            customData => fun 'CustomDataType'/1,
            component => fun 'ComponentType'/1,
            attributeValue => cmap:string_(#{max_length => 1000}),
            attributeType => fun 'AttributeEnumType'/1
        },
        [{required, [attributeValue, component, variable]}, {extra_keys, false}]
    }
).

-define(SetVariableResultType,
    {
        #{
            variable => fun 'VariableType'/1,
            customData => fun 'CustomDataType'/1,
            component => fun 'ComponentType'/1,
            attributeType => fun 'AttributeEnumType'/1,
            attributeStatusInfo => fun 'StatusInfoType'/1,
            attributeStatus => fun 'SetVariableStatusEnumType'/1
        },
        [{required, [attributeStatus, component, variable]}, {extra_keys, false}]
    }
).

-define(SetVariableStatusEnumType,
    cmap:enum_([
        'Accepted',
        'Rejected',
        'UnknownComponent',
        'UnknownVariable',
        'NotSupportedAttributeType',
        'RebootRequired'
    ])
).

-define(SignedMeterValueType,
    {
        #{
            signingMethod => cmap:string_(#{max_length => 50}),
            signedMeterData => cmap:string_(#{max_length => 2500}),
            publicKey => cmap:string_(#{max_length => 2500}),
            encodingMethod => cmap:string_(#{max_length => 50}),
            customData => fun 'CustomDataType'/1
        },
        [
            {required, [signedMeterData, signingMethod, encodingMethod, publicKey]},
            {extra_keys, false}
        ]
    }
).

-define(StatusInfoType,
    {
        #{
            reasonCode => cmap:string_(#{max_length => 20}),
            customData => fun 'CustomDataType'/1,
            additionalInfo => cmap:string_(#{max_length => 512})
        },
        [{required, [reasonCode]}, {extra_keys, false}]
    }
).

-define(TransactionEventEnumType, cmap:enum_(['Ended', 'Started', 'Updated'])).

-define(TransactionType,
    {
        #{
            transactionId => cmap:string_(#{max_length => 36}),
            timeSpentCharging => cmap:integer_(#{}),
            stoppedReason => fun 'ReasonEnumType'/1,
            remoteStartId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingState => fun 'ChargingStateEnumType'/1
        },
        [{required, [transactionId]}, {extra_keys, false}]
    }
).

-define(TriggerMessageStatusEnumType,
    cmap:enum_(['Accepted', 'Rejected', 'NotImplemented'])
).

-define(TriggerReasonEnumType,
    cmap:enum_([
        'Authorized',
        'CablePluggedIn',
        'ChargingRateChanged',
        'ChargingStateChanged',
        'Deauthorized',
        'EnergyLimitReached',
        'EVCommunicationLost',
        'EVConnectTimeout',
        'MeterValueClock',
        'MeterValuePeriodic',
        'TimeLimitReached',
        'Trigger',
        'UnlockCommand',
        'StopAuthorized',
        'EVDeparted',
        'EVDetected',
        'RemoteStop',
        'RemoteStart',
        'AbnormalCondition',
        'SignedDataReceived',
        'ResetCommand'
    ])
).

-define(UnitOfMeasureType,
    {
        #{
            unit => cmap:string_(#{max_length => 20}),
            multiplier => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(UnlockStatusEnumType,
    cmap:enum_([
        'Unlocked',
        'UnlockFailed',
        'OngoingAuthorizedTransaction',
        'UnknownConnector'
    ])
).

-define(UnpublishFirmwareStatusEnumType,
    cmap:enum_(['DownloadOngoing', 'NoFirmware', 'Unpublished'])
).

-define(UpdateEnumType, cmap:enum_(['Differential', 'Full'])).

-define(UpdateFirmwareStatusEnumType,
    cmap:enum_([
        'Accepted',
        'Rejected',
        'AcceptedCanceled',
        'InvalidCertificate',
        'RevokedCertificate'
    ])
).

-define(UploadLogStatusEnumType,
    cmap:enum_([
        'BadMessage',
        'Idle',
        'NotSupportedOperation',
        'PermissionDenied',
        'Uploaded',
        'UploadFailure',
        'Uploading',
        'AcceptedCanceled'
    ])
).

-define(VPNEnumType, cmap:enum_(['IKEv2', 'IPSec', 'L2TP', 'PPTP'])).

-define(VPNType,
    {
        #{
            user => cmap:string_(#{max_length => 20}),
            type => fun 'VPNEnumType'/1,
            server => cmap:string_(#{max_length => 512}),
            password => cmap:string_(#{max_length => 20}),
            key => cmap:string_(#{max_length => 255}),
            group => cmap:string_(#{max_length => 20}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [server, user, password, key, type]}, {extra_keys, false}]
    }
).

-define(VariableAttributeType,
    {
        #{
            value => cmap:string_(#{max_length => 2500}),
            type => fun 'AttributeEnumType'/1,
            persistent => fun cmap:boolean/1,
            mutability => fun 'MutabilityEnumType'/1,
            customData => fun 'CustomDataType'/1,
            constant => fun cmap:boolean/1
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(VariableCharacteristicsType,
    {
        #{
            valuesList => cmap:string_(#{max_length => 1000}),
            unit => cmap:string_(#{max_length => 16}),
            supportsMonitoring => fun cmap:boolean/1,
            minLimit => fun cmap:number/1,
            maxLimit => fun cmap:number/1,
            dataType => fun 'DataEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [dataType, supportsMonitoring]}, {extra_keys, false}]
    }
).

-define(VariableMonitoringType,
    {
        #{
            value => fun cmap:number/1,
            type => fun 'MonitorEnumType'/1,
            transaction => fun cmap:boolean/1,
            severity => cmap:integer_(#{}),
            id => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [id, transaction, value, type, severity]}, {extra_keys, false}]
    }
).

-define(VariableType,
    {
        #{
            name => cmap:string_(#{max_length => 50}),
            instance => cmap:string_(#{max_length => 50}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [name]}, {extra_keys, false}]
    }
).

-define(AuthorizeRequest,
    {
        #{
            iso15118CertificateHashData =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 4,
                    items => fun 'OCSPRequestDataType'/1
                }),
            idToken => fun 'IdTokenType'/1,
            customData => fun 'CustomDataType'/1,
            certificate => cmap:string_(#{max_length => 5500})
        },
        [{required, [idToken]}, {extra_keys, false}]
    }
).

-define(AuthorizeResponse,
    {
        #{
            idTokenInfo => fun 'IdTokenInfoType'/1,
            customData => fun 'CustomDataType'/1,
            certificateStatus => fun 'AuthorizeCertificateStatusEnumType'/1
        },
        [{required, [idTokenInfo]}, {extra_keys, false}]
    }
).

-define(BootNotificationRequest,
    {
        #{
            reason => fun 'BootReasonEnumType'/1,
            customData => fun 'CustomDataType'/1,
            chargingStation => fun 'ChargingStationType'/1
        },
        [{required, [reason, chargingStation]}, {extra_keys, false}]
    }
).

-define(BootNotificationResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'RegistrationStatusEnumType'/1,
            interval => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            currentTime => fun cmap:datetime/1
        },
        [{required, [currentTime, interval, status]}, {extra_keys, false}]
    }
).

-define(CancelReservationRequest,
    {#{reservationId => cmap:integer_(#{}), customData => fun 'CustomDataType'/1}, [
        {required, [reservationId]}, {extra_keys, false}
    ]}
).

-define(CancelReservationResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'CancelReservationStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(CertificateSignedRequest,
    {
        #{
            customData => fun 'CustomDataType'/1,
            certificateType => fun 'CertificateSigningUseEnumType'/1,
            certificateChain => cmap:string_(#{max_length => 10000})
        },
        [{required, [certificateChain]}, {extra_keys, false}]
    }
).

-define(CertificateSignedResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'CertificateSignedStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(ChangeAvailabilityRequest,
    {
        #{
            operationalStatus => fun 'OperationalStatusEnumType'/1,
            evse => fun 'EVSEType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [operationalStatus]}, {extra_keys, false}]
    }
).

-define(ChangeAvailabilityResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'ChangeAvailabilityStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(ClearCacheRequest,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(ClearCacheResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'ClearCacheStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(ClearChargingProfileRequest,
    {
        #{
            customData => fun 'CustomDataType'/1,
            chargingProfileId => cmap:integer_(#{}),
            chargingProfileCriteria => fun 'ClearChargingProfileType'/1
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(ClearChargingProfileResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'ClearChargingProfileStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(ClearDisplayMessageRequest,
    {#{id => cmap:integer_(#{}), customData => fun 'CustomDataType'/1}, [
        {required, [id]}, {extra_keys, false}
    ]}
).

-define(ClearDisplayMessageResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'ClearMessageStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(ClearVariableMonitoringRequest,
    {
        #{
            id => cmap:list_(#{min_length => 1, items => cmap:integer_(#{})}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [id]}, {extra_keys, false}]
    }
).

-define(ClearVariableMonitoringResponse,
    {
        #{
            customData => fun 'CustomDataType'/1,
            clearMonitoringResult =>
                cmap:list_(#{
                    min_length => 1,
                    items => fun 'ClearMonitoringResultType'/1
                })
        },
        [{required, [clearMonitoringResult]}, {extra_keys, false}]
    }
).

-define(ClearedChargingLimitRequest,
    {
        #{
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingLimitSource => fun 'ChargingLimitSourceEnumType'/1
        },
        [{required, [chargingLimitSource]}, {extra_keys, false}]
    }
).

-define(ClearedChargingLimitResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(CostUpdatedRequest,
    {
        #{
            transactionId => cmap:string_(#{max_length => 36}),
            totalCost => fun cmap:number/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [totalCost, transactionId]}, {extra_keys, false}]
    }
).

-define(CostUpdatedResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(CustomerInformationRequest,
    {
        #{
            requestId => cmap:integer_(#{}),
            report => fun cmap:boolean/1,
            idToken => fun 'IdTokenType'/1,
            customerIdentifier => cmap:string_(#{max_length => 64}),
            customerCertificate => fun 'CertificateHashDataType'/1,
            customData => fun 'CustomDataType'/1,
            clear => fun cmap:boolean/1
        },
        [{required, [requestId, report, clear]}, {extra_keys, false}]
    }
).

-define(CustomerInformationResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'CustomerInformationStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(DataTransferRequest,
    {
        #{
            vendorId => cmap:string_(#{max_length => 255}),
            messageId => cmap:string_(#{max_length => 50}),
            data => fun(X) -> X end,
            customData => fun 'CustomDataType'/1
        },
        [{required, [vendorId]}, {extra_keys, false}]
    }
).

-define(DataTransferResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'DataTransferStatusEnumType'/1,
            data => fun(X) -> X end,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(DeleteCertificateRequest,
    {
        #{
            customData => fun 'CustomDataType'/1,
            certificateHashData => fun 'CertificateHashDataType'/1
        },
        [{required, [certificateHashData]}, {extra_keys, false}]
    }
).

-define(DeleteCertificateResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'DeleteCertificateStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(FirmwareStatusNotificationRequest,
    {
        #{
            status => fun 'FirmwareStatusEnumType'/1,
            requestId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(FirmwareStatusNotificationResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(Get15118EVCertificateRequest,
    {
        #{
            iso15118SchemaVersion => cmap:string_(#{max_length => 50}),
            exiRequest => cmap:string_(#{max_length => 5600}),
            customData => fun 'CustomDataType'/1,
            action => fun 'CertificateActionEnumType'/1
        },
        [
            {required, [iso15118SchemaVersion, action, exiRequest]},
            {extra_keys, false}
        ]
    }
).

-define(Get15118EVCertificateResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'Iso15118EVCertificateStatusEnumType'/1,
            exiResponse => cmap:string_(#{max_length => 5600}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [status, exiResponse]}, {extra_keys, false}]
    }
).

-define(GetBaseReportRequest,
    {
        #{
            requestId => cmap:integer_(#{}),
            reportBase => fun 'ReportBaseEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [requestId, reportBase]}, {extra_keys, false}]
    }
).

-define(GetBaseReportResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GenericDeviceModelStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(GetCertificateStatusRequest,
    {
        #{
            ocspRequestData => fun 'OCSPRequestDataType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [ocspRequestData]}, {extra_keys, false}]
    }
).

-define(GetCertificateStatusResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GetCertificateStatusEnumType'/1,
            ocspResult => cmap:string_(#{max_length => 5500}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(GetChargingProfilesRequest,
    {
        #{
            requestId => cmap:integer_(#{}),
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingProfile => fun 'ChargingProfileCriterionType'/1
        },
        [{required, [requestId, chargingProfile]}, {extra_keys, false}]
    }
).

-define(GetChargingProfilesResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GetChargingProfileStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(GetCompositeScheduleRequest,
    {
        #{
            evseId => cmap:integer_(#{}),
            duration => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingRateUnit => fun 'ChargingRateUnitEnumType'/1
        },
        [{required, [duration, evseId]}, {extra_keys, false}]
    }
).

-define(GetCompositeScheduleResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GenericStatusEnumType'/1,
            schedule => fun 'CompositeScheduleType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(GetDisplayMessagesRequest,
    {
        #{
            state => fun 'MessageStateEnumType'/1,
            requestId => cmap:integer_(#{}),
            priority => fun 'MessagePriorityEnumType'/1,
            id => cmap:list_(#{min_length => 1, items => cmap:integer_(#{})}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [requestId]}, {extra_keys, false}]
    }
).

-define(GetDisplayMessagesResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GetDisplayMessagesStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(GetInstalledCertificateIdsRequest,
    {
        #{
            customData => fun 'CustomDataType'/1,
            certificateType =>
                cmap:list_(#{
                    min_length => 1,
                    items => fun 'GetCertificateIdUseEnumType'/1
                })
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(GetInstalledCertificateIdsResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GetInstalledCertificateStatusEnumType'/1,
            customData => fun 'CustomDataType'/1,
            certificateHashDataChain =>
                cmap:list_(#{
                    min_length => 1,
                    items => fun 'CertificateHashDataChainType'/1
                })
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(GetLocalListVersionRequest,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(GetLocalListVersionResponse,
    {#{versionNumber => cmap:integer_(#{}), customData => fun 'CustomDataType'/1}, [
        {required, [versionNumber]}, {extra_keys, false}
    ]}
).

-define(GetLogRequest,
    {
        #{
            retryInterval => cmap:integer_(#{}),
            retries => cmap:integer_(#{}),
            requestId => cmap:integer_(#{}),
            logType => fun 'LogEnumType'/1,
            log => fun 'LogParametersType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [logType, requestId, log]}, {extra_keys, false}]
    }
).

-define(GetLogResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'LogStatusEnumType'/1,
            filename => cmap:string_(#{max_length => 255}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(GetMonitoringReportRequest,
    {
        #{
            requestId => cmap:integer_(#{}),
            monitoringCriteria =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 3,
                    items => fun 'MonitoringCriterionEnumType'/1
                }),
            customData => fun 'CustomDataType'/1,
            componentVariable =>
                cmap:list_(#{min_length => 1, items => fun 'ComponentVariableType'/1})
        },
        [{required, [requestId]}, {extra_keys, false}]
    }
).

-define(GetMonitoringReportResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GenericDeviceModelStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(GetReportRequest,
    {
        #{
            requestId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            componentVariable =>
                cmap:list_(#{min_length => 1, items => fun 'ComponentVariableType'/1}),
            componentCriteria =>
                cmap:list_(#{
                    min_length => 1,
                    max_length => 4,
                    items => fun 'ComponentCriterionEnumType'/1
                })
        },
        [{required, [requestId]}, {extra_keys, false}]
    }
).

-define(GetReportResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GenericDeviceModelStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(GetTransactionStatusRequest,
    {
        #{
            transactionId => cmap:string_(#{max_length => 36}),
            customData => fun 'CustomDataType'/1
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(GetTransactionStatusResponse,
    {
        #{
            ongoingIndicator => fun cmap:boolean/1,
            messagesInQueue => fun cmap:boolean/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [messagesInQueue]}, {extra_keys, false}]
    }
).

-define(GetVariablesRequest,
    {
        #{
            getVariableData =>
                cmap:list_(#{min_length => 1, items => fun 'GetVariableDataType'/1}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [getVariableData]}, {extra_keys, false}]
    }
).

-define(GetVariablesResponse,
    {
        #{
            getVariableResult =>
                cmap:list_(#{min_length => 1, items => fun 'GetVariableResultType'/1}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [getVariableResult]}, {extra_keys, false}]
    }
).

-define(HeartbeatRequest,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(HeartbeatResponse,
    {#{customData => fun 'CustomDataType'/1, currentTime => fun cmap:datetime/1}, [
        {required, [currentTime]}, {extra_keys, false}
    ]}
).

-define(InstallCertificateRequest,
    {
        #{
            customData => fun 'CustomDataType'/1,
            certificateType => fun 'InstallCertificateUseEnumType'/1,
            certificate => cmap:string_(#{max_length => 5500})
        },
        [{required, [certificateType, certificate]}, {extra_keys, false}]
    }
).

-define(InstallCertificateResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'InstallCertificateStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(LogStatusNotificationRequest,
    {
        #{
            status => fun 'UploadLogStatusEnumType'/1,
            requestId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(LogStatusNotificationResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(MeterValuesRequest,
    {
        #{
            meterValue =>
                cmap:list_(#{min_length => 1, items => fun 'MeterValueType'/1}),
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [evseId, meterValue]}, {extra_keys, false}]
    }
).

-define(MeterValuesResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(NotifyChargingLimitRequest,
    {
        #{
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingSchedule =>
                cmap:list_(#{min_length => 1, items => fun 'ChargingScheduleType'/1}),
            chargingLimit => fun 'ChargingLimitType'/1
        },
        [{required, [chargingLimit]}, {extra_keys, false}]
    }
).

-define(NotifyChargingLimitResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(NotifyCustomerInformationRequest,
    {
        #{
            tbc => fun cmap:boolean/1,
            seqNo => cmap:integer_(#{}),
            requestId => cmap:integer_(#{}),
            generatedAt => fun cmap:datetime/1,
            data => cmap:string_(#{max_length => 512}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [data, seqNo, generatedAt, requestId]}, {extra_keys, false}]
    }
).

-define(NotifyCustomerInformationResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(NotifyDisplayMessagesRequest,
    {
        #{
            tbc => fun cmap:boolean/1,
            requestId => cmap:integer_(#{}),
            messageInfo =>
                cmap:list_(#{min_length => 1, items => fun 'MessageInfoType'/1}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [requestId]}, {extra_keys, false}]
    }
).

-define(NotifyDisplayMessagesResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(NotifyEVChargingNeedsRequest,
    {
        #{
            maxScheduleTuples => cmap:integer_(#{}),
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingNeeds => fun 'ChargingNeedsType'/1
        },
        [{required, [evseId, chargingNeeds]}, {extra_keys, false}]
    }
).

-define(NotifyEVChargingNeedsResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'NotifyEVChargingNeedsStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(NotifyEVChargingScheduleRequest,
    {
        #{
            timeBase => fun cmap:datetime/1,
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingSchedule => fun 'ChargingScheduleType'/1
        },
        [{required, [timeBase, evseId, chargingSchedule]}, {extra_keys, false}]
    }
).

-define(NotifyEVChargingScheduleResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GenericStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(NotifyEventRequest,
    {
        #{
            tbc => fun cmap:boolean/1,
            seqNo => cmap:integer_(#{}),
            generatedAt => fun cmap:datetime/1,
            eventData => cmap:list_(#{min_length => 1, items => fun 'EventDataType'/1}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [generatedAt, seqNo, eventData]}, {extra_keys, false}]
    }
).

-define(NotifyEventResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(NotifyMonitoringReportRequest,
    {
        #{
            tbc => fun cmap:boolean/1,
            seqNo => cmap:integer_(#{}),
            requestId => cmap:integer_(#{}),
            monitor =>
                cmap:list_(#{min_length => 1, items => fun 'MonitoringDataType'/1}),
            generatedAt => fun cmap:datetime/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [requestId, seqNo, generatedAt]}, {extra_keys, false}]
    }
).

-define(NotifyMonitoringReportResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(NotifyReportRequest,
    {
        #{
            tbc => fun cmap:boolean/1,
            seqNo => cmap:integer_(#{}),
            requestId => cmap:integer_(#{}),
            reportData =>
                cmap:list_(#{min_length => 1, items => fun 'ReportDataType'/1}),
            generatedAt => fun cmap:datetime/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [requestId, generatedAt, seqNo]}, {extra_keys, false}]
    }
).

-define(NotifyReportResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(PublishFirmwareRequest,
    {
        #{
            retryInterval => cmap:integer_(#{}),
            retries => cmap:integer_(#{}),
            requestId => cmap:integer_(#{}),
            location => cmap:string_(#{max_length => 512}),
            customData => fun 'CustomDataType'/1,
            checksum => cmap:string_(#{max_length => 32})
        },
        [{required, [location, checksum, requestId]}, {extra_keys, false}]
    }
).

-define(PublishFirmwareResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GenericStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(PublishFirmwareStatusNotificationRequest,
    {
        #{
            status => fun 'PublishFirmwareStatusEnumType'/1,
            requestId => cmap:integer_(#{}),
            location =>
                cmap:list_(#{
                    min_length => 1,
                    items => cmap:string_(#{max_length => 512})
                }),
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(PublishFirmwareStatusNotificationResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(ReportChargingProfilesRequest,
    {
        #{
            tbc => fun cmap:boolean/1,
            requestId => cmap:integer_(#{}),
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingProfile =>
                cmap:list_(#{min_length => 1, items => fun 'ChargingProfileType'/1}),
            chargingLimitSource => fun 'ChargingLimitSourceEnumType'/1
        },
        [
            {required, [requestId, chargingLimitSource, evseId, chargingProfile]},
            {extra_keys, false}
        ]
    }
).

-define(ReportChargingProfilesResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(RequestStartTransactionRequest,
    {
        #{
            remoteStartId => cmap:integer_(#{}),
            idToken => fun 'IdTokenType'/1,
            groupIdToken => fun 'IdTokenType'/1,
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingProfile => fun 'ChargingProfileType'/1
        },
        [{required, [remoteStartId, idToken]}, {extra_keys, false}]
    }
).

-define(RequestStartTransactionResponse,
    {
        #{
            transactionId => cmap:string_(#{max_length => 36}),
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'RequestStartStopStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(RequestStopTransactionRequest,
    {
        #{
            transactionId => cmap:string_(#{max_length => 36}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [transactionId]}, {extra_keys, false}]
    }
).

-define(RequestStopTransactionResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'RequestStartStopStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(ReservationStatusUpdateRequest,
    {
        #{
            reservationUpdateStatus => fun 'ReservationUpdateStatusEnumType'/1,
            reservationId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [reservationId, reservationUpdateStatus]}, {extra_keys, false}]
    }
).

-define(ReservationStatusUpdateResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(ReserveNowRequest,
    {
        #{
            idToken => fun 'IdTokenType'/1,
            id => cmap:integer_(#{}),
            groupIdToken => fun 'IdTokenType'/1,
            expiryDateTime => fun cmap:datetime/1,
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            connectorType => fun 'ConnectorEnumType'/1
        },
        [{required, [id, expiryDateTime, idToken]}, {extra_keys, false}]
    }
).

-define(ReserveNowResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'ReserveNowStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(ResetRequest,
    {
        #{
            type => fun 'ResetEnumType'/1,
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [type]}, {extra_keys, false}]
    }
).

-define(ResetResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'ResetStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(SecurityEventNotificationRequest,
    {
        #{
            type => cmap:string_(#{max_length => 50}),
            timestamp => fun cmap:datetime/1,
            techInfo => cmap:string_(#{max_length => 255}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [type, timestamp]}, {extra_keys, false}]
    }
).

-define(SecurityEventNotificationResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(SendLocalListRequest,
    {
        #{
            versionNumber => cmap:integer_(#{}),
            updateType => fun 'UpdateEnumType'/1,
            localAuthorizationList =>
                cmap:list_(#{min_length => 1, items => fun 'AuthorizationData'/1}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [versionNumber, updateType]}, {extra_keys, false}]
    }
).

-define(SendLocalListResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'SendLocalListStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(SetChargingProfileRequest,
    {
        #{
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            chargingProfile => fun 'ChargingProfileType'/1
        },
        [{required, [evseId, chargingProfile]}, {extra_keys, false}]
    }
).

-define(SetChargingProfileResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'ChargingProfileStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(SetDisplayMessageRequest,
    {#{message => fun 'MessageInfoType'/1, customData => fun 'CustomDataType'/1}, [
        {required, [message]}, {extra_keys, false}
    ]}
).

-define(SetDisplayMessageResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'DisplayMessageStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(SetMonitoringBaseRequest,
    {
        #{
            monitoringBase => fun 'MonitoringBaseEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [monitoringBase]}, {extra_keys, false}]
    }
).

-define(SetMonitoringBaseResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GenericDeviceModelStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(SetMonitoringLevelRequest,
    {#{severity => cmap:integer_(#{}), customData => fun 'CustomDataType'/1}, [
        {required, [severity]}, {extra_keys, false}
    ]}
).

-define(SetMonitoringLevelResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GenericStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(SetNetworkProfileRequest,
    {
        #{
            customData => fun 'CustomDataType'/1,
            connectionData => fun 'NetworkConnectionProfileType'/1,
            configurationSlot => cmap:integer_(#{})
        },
        [{required, [configurationSlot, connectionData]}, {extra_keys, false}]
    }
).

-define(SetNetworkProfileResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'SetNetworkProfileStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(SetVariableMonitoringRequest,
    {
        #{
            setMonitoringData =>
                cmap:list_(#{min_length => 1, items => fun 'SetMonitoringDataType'/1}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [setMonitoringData]}, {extra_keys, false}]
    }
).

-define(SetVariableMonitoringResponse,
    {
        #{
            setMonitoringResult =>
                cmap:list_(#{min_length => 1, items => fun 'SetMonitoringResultType'/1}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [setMonitoringResult]}, {extra_keys, false}]
    }
).

-define(SetVariablesRequest,
    {
        #{
            setVariableData =>
                cmap:list_(#{min_length => 1, items => fun 'SetVariableDataType'/1}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [setVariableData]}, {extra_keys, false}]
    }
).

-define(SetVariablesResponse,
    {
        #{
            setVariableResult =>
                cmap:list_(#{min_length => 1, items => fun 'SetVariableResultType'/1}),
            customData => fun 'CustomDataType'/1
        },
        [{required, [setVariableResult]}, {extra_keys, false}]
    }
).

-define(SignCertificateRequest,
    {
        #{
            customData => fun 'CustomDataType'/1,
            csr => cmap:string_(#{max_length => 5500}),
            certificateType => fun 'CertificateSigningUseEnumType'/1
        },
        [{required, [csr]}, {extra_keys, false}]
    }
).

-define(SignCertificateResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'GenericStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(StatusNotificationRequest,
    {
        #{
            timestamp => fun cmap:datetime/1,
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            connectorStatus => fun 'ConnectorStatusEnumType'/1,
            connectorId => cmap:integer_(#{})
        },
        [
            {required, [timestamp, connectorStatus, evseId, connectorId]},
            {extra_keys, false}
        ]
    }
).

-define(StatusNotificationResponse,
    {#{customData => fun 'CustomDataType'/1}, [{required, []}, {extra_keys, false}]}
).

-define(TransactionEventRequest,
    {
        #{
            triggerReason => fun 'TriggerReasonEnumType'/1,
            transactionInfo => fun 'TransactionType'/1,
            timestamp => fun cmap:datetime/1,
            seqNo => cmap:integer_(#{}),
            reservationId => cmap:integer_(#{}),
            offline => fun cmap:boolean/1,
            numberOfPhasesUsed => cmap:integer_(#{}),
            meterValue =>
                cmap:list_(#{min_length => 1, items => fun 'MeterValueType'/1}),
            idToken => fun 'IdTokenType'/1,
            evse => fun 'EVSEType'/1,
            eventType => fun 'TransactionEventEnumType'/1,
            customData => fun 'CustomDataType'/1,
            cableMaxCurrent => cmap:integer_(#{})
        },
        [
            {required, [eventType, timestamp, triggerReason, seqNo, transactionInfo]},
            {extra_keys, false}
        ]
    }
).

-define(TransactionEventResponse,
    {
        #{
            updatedPersonalMessage => fun 'MessageContentType'/1,
            totalCost => fun cmap:number/1,
            idTokenInfo => fun 'IdTokenInfoType'/1,
            customData => fun 'CustomDataType'/1,
            chargingPriority => cmap:integer_(#{})
        },
        [{required, []}, {extra_keys, false}]
    }
).

-define(TriggerMessageRequest,
    {
        #{
            requestedMessage => fun 'MessageTriggerEnumType'/1,
            evse => fun 'EVSEType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [requestedMessage]}, {extra_keys, false}]
    }
).

-define(TriggerMessageResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'TriggerMessageStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(UnlockConnectorRequest,
    {
        #{
            evseId => cmap:integer_(#{}),
            customData => fun 'CustomDataType'/1,
            connectorId => cmap:integer_(#{})
        },
        [{required, [evseId, connectorId]}, {extra_keys, false}]
    }
).

-define(UnlockConnectorResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'UnlockStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(UnpublishFirmwareRequest,
    {
        #{
            customData => fun 'CustomDataType'/1,
            checksum => cmap:string_(#{max_length => 32})
        },
        [{required, [checksum]}, {extra_keys, false}]
    }
).

-define(UnpublishFirmwareResponse,
    {
        #{
            status => fun 'UnpublishFirmwareStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-define(UpdateFirmwareRequest,
    {
        #{
            retryInterval => cmap:integer_(#{}),
            retries => cmap:integer_(#{}),
            requestId => cmap:integer_(#{}),
            firmware => fun 'FirmwareType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [requestId, firmware]}, {extra_keys, false}]
    }
).

-define(UpdateFirmwareResponse,
    {
        #{
            statusInfo => fun 'StatusInfoType'/1,
            status => fun 'UpdateFirmwareStatusEnumType'/1,
            customData => fun 'CustomDataType'/1
        },
        [{required, [status]}, {extra_keys, false}]
    }
).

-spec 'ACChargingParametersType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ACChargingParametersType'().
'ACChargingParametersType'(Val) ->
    {Spec, Opts} = (?ACChargingParametersType),
    cmap:new(Spec, Val, Opts).

-spec 'APNAuthenticationEnumType'(
    string()
    | binary()
    | atom()
) -> 'APNAuthenticationEnumType'().
'APNAuthenticationEnumType'(Val) ->
    F = (?APNAuthenticationEnumType),
    F(Val).

-spec 'APNType'(#{atom() | binary() | string() => term()}) -> 'APNType'().
'APNType'(Val) ->
    {Spec, Opts} = (?APNType),
    cmap:new(Spec, Val, Opts).

-spec 'AdditionalInfoType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'AdditionalInfoType'().
'AdditionalInfoType'(Val) ->
    {Spec, Opts} = (?AdditionalInfoType),
    cmap:new(Spec, Val, Opts).

-spec 'AttributeEnumType'(string() | binary() | atom()) -> 'AttributeEnumType'().
'AttributeEnumType'(Val) ->
    F = (?AttributeEnumType),
    F(Val).

-spec 'AuthorizationData'(#{
    atom() | binary() | string() =>
        term()
}) -> 'AuthorizationData'().
'AuthorizationData'(Val) ->
    {Spec, Opts} = (?AuthorizationData),
    cmap:new(Spec, Val, Opts).

-spec 'AuthorizationStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'AuthorizationStatusEnumType'().
'AuthorizationStatusEnumType'(Val) ->
    F = (?AuthorizationStatusEnumType),
    F(Val).

-spec 'AuthorizeCertificateStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'AuthorizeCertificateStatusEnumType'().
'AuthorizeCertificateStatusEnumType'(Val) ->
    F = (?AuthorizeCertificateStatusEnumType),
    F(Val).

-spec 'BootReasonEnumType'(string() | binary() | atom()) -> 'BootReasonEnumType'().
'BootReasonEnumType'(Val) ->
    F = (?BootReasonEnumType),
    F(Val).

-spec 'CancelReservationStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'CancelReservationStatusEnumType'().
'CancelReservationStatusEnumType'(Val) ->
    F = (?CancelReservationStatusEnumType),
    F(Val).

-spec 'CertificateActionEnumType'(
    string()
    | binary()
    | atom()
) -> 'CertificateActionEnumType'().
'CertificateActionEnumType'(Val) ->
    F = (?CertificateActionEnumType),
    F(Val).

-spec 'CertificateHashDataChainType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'CertificateHashDataChainType'().
'CertificateHashDataChainType'(Val) ->
    {Spec, Opts} = (?CertificateHashDataChainType),
    cmap:new(Spec, Val, Opts).

-spec 'CertificateHashDataType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'CertificateHashDataType'().
'CertificateHashDataType'(Val) ->
    {Spec, Opts} = (?CertificateHashDataType),
    cmap:new(Spec, Val, Opts).

-spec 'CertificateSignedStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'CertificateSignedStatusEnumType'().
'CertificateSignedStatusEnumType'(Val) ->
    F = (?CertificateSignedStatusEnumType),
    F(Val).

-spec 'CertificateSigningUseEnumType'(
    string()
    | binary()
    | atom()
) -> 'CertificateSigningUseEnumType'().
'CertificateSigningUseEnumType'(Val) ->
    F = (?CertificateSigningUseEnumType),
    F(Val).

-spec 'ChangeAvailabilityStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'ChangeAvailabilityStatusEnumType'().
'ChangeAvailabilityStatusEnumType'(Val) ->
    F = (?ChangeAvailabilityStatusEnumType),
    F(Val).

-spec 'ChargingLimitSourceEnumType'(
    string()
    | binary()
    | atom()
) -> 'ChargingLimitSourceEnumType'().
'ChargingLimitSourceEnumType'(Val) ->
    F = (?ChargingLimitSourceEnumType),
    F(Val).

-spec 'ChargingLimitType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ChargingLimitType'().
'ChargingLimitType'(Val) ->
    {Spec, Opts} = (?ChargingLimitType),
    cmap:new(Spec, Val, Opts).

-spec 'ChargingNeedsType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ChargingNeedsType'().
'ChargingNeedsType'(Val) ->
    {Spec, Opts} = (?ChargingNeedsType),
    cmap:new(Spec, Val, Opts).

-spec 'ChargingProfileCriterionType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ChargingProfileCriterionType'().
'ChargingProfileCriterionType'(Val) ->
    {Spec, Opts} = (?ChargingProfileCriterionType),
    cmap:new(Spec, Val, Opts).

-spec 'ChargingProfileKindEnumType'(
    string()
    | binary()
    | atom()
) -> 'ChargingProfileKindEnumType'().
'ChargingProfileKindEnumType'(Val) ->
    F = (?ChargingProfileKindEnumType),
    F(Val).

-spec 'ChargingProfilePurposeEnumType'(
    string()
    | binary()
    | atom()
) -> 'ChargingProfilePurposeEnumType'().
'ChargingProfilePurposeEnumType'(Val) ->
    F = (?ChargingProfilePurposeEnumType),
    F(Val).

-spec 'ChargingProfileStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'ChargingProfileStatusEnumType'().
'ChargingProfileStatusEnumType'(Val) ->
    F = (?ChargingProfileStatusEnumType),
    F(Val).

-spec 'ChargingProfileType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ChargingProfileType'().
'ChargingProfileType'(Val) ->
    {Spec, Opts} = (?ChargingProfileType),
    cmap:new(Spec, Val, Opts).

-spec 'ChargingRateUnitEnumType'(
    string()
    | binary()
    | atom()
) -> 'ChargingRateUnitEnumType'().
'ChargingRateUnitEnumType'(Val) ->
    F = (?ChargingRateUnitEnumType),
    F(Val).

-spec 'ChargingSchedulePeriodType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ChargingSchedulePeriodType'().
'ChargingSchedulePeriodType'(Val) ->
    {Spec, Opts} = (?ChargingSchedulePeriodType),
    cmap:new(Spec, Val, Opts).

-spec 'ChargingScheduleType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ChargingScheduleType'().
'ChargingScheduleType'(Val) ->
    {Spec, Opts} = (?ChargingScheduleType),
    cmap:new(Spec, Val, Opts).

-spec 'ChargingStateEnumType'(
    string()
    | binary()
    | atom()
) -> 'ChargingStateEnumType'().
'ChargingStateEnumType'(Val) ->
    F = (?ChargingStateEnumType),
    F(Val).

-spec 'ChargingStationType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ChargingStationType'().
'ChargingStationType'(Val) ->
    {Spec, Opts} = (?ChargingStationType),
    cmap:new(Spec, Val, Opts).

-spec 'ClearCacheStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'ClearCacheStatusEnumType'().
'ClearCacheStatusEnumType'(Val) ->
    F = (?ClearCacheStatusEnumType),
    F(Val).

-spec 'ClearChargingProfileStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'ClearChargingProfileStatusEnumType'().
'ClearChargingProfileStatusEnumType'(Val) ->
    F = (?ClearChargingProfileStatusEnumType),
    F(Val).

-spec 'ClearChargingProfileType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ClearChargingProfileType'().
'ClearChargingProfileType'(Val) ->
    {Spec, Opts} = (?ClearChargingProfileType),
    cmap:new(Spec, Val, Opts).

-spec 'ClearMessageStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'ClearMessageStatusEnumType'().
'ClearMessageStatusEnumType'(Val) ->
    F = (?ClearMessageStatusEnumType),
    F(Val).

-spec 'ClearMonitoringResultType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ClearMonitoringResultType'().
'ClearMonitoringResultType'(Val) ->
    {Spec, Opts} = (?ClearMonitoringResultType),
    cmap:new(Spec, Val, Opts).

-spec 'ClearMonitoringStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'ClearMonitoringStatusEnumType'().
'ClearMonitoringStatusEnumType'(Val) ->
    F = (?ClearMonitoringStatusEnumType),
    F(Val).

-spec 'ComponentCriterionEnumType'(
    string()
    | binary()
    | atom()
) -> 'ComponentCriterionEnumType'().
'ComponentCriterionEnumType'(Val) ->
    F = (?ComponentCriterionEnumType),
    F(Val).

-spec 'ComponentType'(#{atom() | binary() | string() => term()}) -> 'ComponentType'().
'ComponentType'(Val) ->
    {Spec, Opts} = (?ComponentType),
    cmap:new(Spec, Val, Opts).

-spec 'ComponentVariableType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ComponentVariableType'().
'ComponentVariableType'(Val) ->
    {Spec, Opts} = (?ComponentVariableType),
    cmap:new(Spec, Val, Opts).

-spec 'CompositeScheduleType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'CompositeScheduleType'().
'CompositeScheduleType'(Val) ->
    {Spec, Opts} = (?CompositeScheduleType),
    cmap:new(Spec, Val, Opts).

-spec 'ConnectorEnumType'(string() | binary() | atom()) -> 'ConnectorEnumType'().
'ConnectorEnumType'(Val) ->
    F = (?ConnectorEnumType),
    F(Val).

-spec 'ConnectorStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'ConnectorStatusEnumType'().
'ConnectorStatusEnumType'(Val) ->
    F = (?ConnectorStatusEnumType),
    F(Val).

-spec 'ConsumptionCostType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'ConsumptionCostType'().
'ConsumptionCostType'(Val) ->
    {Spec, Opts} = (?ConsumptionCostType),
    cmap:new(Spec, Val, Opts).

-spec 'CostKindEnumType'(string() | binary() | atom()) -> 'CostKindEnumType'().
'CostKindEnumType'(Val) ->
    F = (?CostKindEnumType),
    F(Val).

-spec 'CostType'(#{atom() | binary() | string() => term()}) -> 'CostType'().
'CostType'(Val) ->
    {Spec, Opts} = (?CostType),
    cmap:new(Spec, Val, Opts).

-spec 'CustomDataType'(#{atom() | binary() | string() => term()}) -> 'CustomDataType'().
'CustomDataType'(Val) ->
    {Spec, Opts} = (?CustomDataType),
    cmap:new(Spec, Val, Opts).

-spec 'CustomerInformationStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'CustomerInformationStatusEnumType'().
'CustomerInformationStatusEnumType'(Val) ->
    F = (?CustomerInformationStatusEnumType),
    F(Val).

-spec 'DCChargingParametersType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'DCChargingParametersType'().
'DCChargingParametersType'(Val) ->
    {Spec, Opts} = (?DCChargingParametersType),
    cmap:new(Spec, Val, Opts).

-spec 'DataEnumType'(string() | binary() | atom()) -> 'DataEnumType'().
'DataEnumType'(Val) ->
    F = (?DataEnumType),
    F(Val).

-spec 'DataTransferStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'DataTransferStatusEnumType'().
'DataTransferStatusEnumType'(Val) ->
    F = (?DataTransferStatusEnumType),
    F(Val).

-spec 'DeleteCertificateStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'DeleteCertificateStatusEnumType'().
'DeleteCertificateStatusEnumType'(Val) ->
    F = (?DeleteCertificateStatusEnumType),
    F(Val).

-spec 'DisplayMessageStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'DisplayMessageStatusEnumType'().
'DisplayMessageStatusEnumType'(Val) ->
    F = (?DisplayMessageStatusEnumType),
    F(Val).

-spec 'EVSEType'(#{atom() | binary() | string() => term()}) -> 'EVSEType'().
'EVSEType'(Val) ->
    {Spec, Opts} = (?EVSEType),
    cmap:new(Spec, Val, Opts).

-spec 'EnergyTransferModeEnumType'(
    string()
    | binary()
    | atom()
) -> 'EnergyTransferModeEnumType'().
'EnergyTransferModeEnumType'(Val) ->
    F = (?EnergyTransferModeEnumType),
    F(Val).

-spec 'EventDataType'(#{atom() | binary() | string() => term()}) -> 'EventDataType'().
'EventDataType'(Val) ->
    {Spec, Opts} = (?EventDataType),
    cmap:new(Spec, Val, Opts).

-spec 'EventNotificationEnumType'(
    string()
    | binary()
    | atom()
) -> 'EventNotificationEnumType'().
'EventNotificationEnumType'(Val) ->
    F = (?EventNotificationEnumType),
    F(Val).

-spec 'EventTriggerEnumType'(string() | binary() | atom()) -> 'EventTriggerEnumType'().
'EventTriggerEnumType'(Val) ->
    F = (?EventTriggerEnumType),
    F(Val).

-spec 'FirmwareStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'FirmwareStatusEnumType'().
'FirmwareStatusEnumType'(Val) ->
    F = (?FirmwareStatusEnumType),
    F(Val).

-spec 'FirmwareType'(#{atom() | binary() | string() => term()}) -> 'FirmwareType'().
'FirmwareType'(Val) ->
    {Spec, Opts} = (?FirmwareType),
    cmap:new(Spec, Val, Opts).

-spec 'GenericDeviceModelStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'GenericDeviceModelStatusEnumType'().
'GenericDeviceModelStatusEnumType'(Val) ->
    F = (?GenericDeviceModelStatusEnumType),
    F(Val).

-spec 'GenericStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'GenericStatusEnumType'().
'GenericStatusEnumType'(Val) ->
    F = (?GenericStatusEnumType),
    F(Val).

-spec 'GetCertificateIdUseEnumType'(
    string()
    | binary()
    | atom()
) -> 'GetCertificateIdUseEnumType'().
'GetCertificateIdUseEnumType'(Val) ->
    F = (?GetCertificateIdUseEnumType),
    F(Val).

-spec 'GetCertificateStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'GetCertificateStatusEnumType'().
'GetCertificateStatusEnumType'(Val) ->
    F = (?GetCertificateStatusEnumType),
    F(Val).

-spec 'GetChargingProfileStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'GetChargingProfileStatusEnumType'().
'GetChargingProfileStatusEnumType'(Val) ->
    F = (?GetChargingProfileStatusEnumType),
    F(Val).

-spec 'GetDisplayMessagesStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'GetDisplayMessagesStatusEnumType'().
'GetDisplayMessagesStatusEnumType'(Val) ->
    F = (?GetDisplayMessagesStatusEnumType),
    F(Val).

-spec 'GetInstalledCertificateStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'GetInstalledCertificateStatusEnumType'().
'GetInstalledCertificateStatusEnumType'(Val) ->
    F = (?GetInstalledCertificateStatusEnumType),
    F(Val).

-spec 'GetVariableDataType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'GetVariableDataType'().
'GetVariableDataType'(Val) ->
    {Spec, Opts} = (?GetVariableDataType),
    cmap:new(Spec, Val, Opts).

-spec 'GetVariableResultType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'GetVariableResultType'().
'GetVariableResultType'(Val) ->
    {Spec, Opts} = (?GetVariableResultType),
    cmap:new(Spec, Val, Opts).

-spec 'GetVariableStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'GetVariableStatusEnumType'().
'GetVariableStatusEnumType'(Val) ->
    F = (?GetVariableStatusEnumType),
    F(Val).

-spec 'HashAlgorithmEnumType'(
    string()
    | binary()
    | atom()
) -> 'HashAlgorithmEnumType'().
'HashAlgorithmEnumType'(Val) ->
    F = (?HashAlgorithmEnumType),
    F(Val).

-spec 'IdTokenEnumType'(string() | binary() | atom()) -> 'IdTokenEnumType'().
'IdTokenEnumType'(Val) ->
    F = (?IdTokenEnumType),
    F(Val).

-spec 'IdTokenInfoType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'IdTokenInfoType'().
'IdTokenInfoType'(Val) ->
    {Spec, Opts} = (?IdTokenInfoType),
    cmap:new(Spec, Val, Opts).

-spec 'IdTokenType'(#{atom() | binary() | string() => term()}) -> 'IdTokenType'().
'IdTokenType'(Val) ->
    {Spec, Opts} = (?IdTokenType),
    cmap:new(Spec, Val, Opts).

-spec 'InstallCertificateStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'InstallCertificateStatusEnumType'().
'InstallCertificateStatusEnumType'(Val) ->
    F = (?InstallCertificateStatusEnumType),
    F(Val).

-spec 'InstallCertificateUseEnumType'(
    string()
    | binary()
    | atom()
) -> 'InstallCertificateUseEnumType'().
'InstallCertificateUseEnumType'(Val) ->
    F = (?InstallCertificateUseEnumType),
    F(Val).

-spec 'Iso15118EVCertificateStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'Iso15118EVCertificateStatusEnumType'().
'Iso15118EVCertificateStatusEnumType'(Val) ->
    F = (?Iso15118EVCertificateStatusEnumType),
    F(Val).

-spec 'LocationEnumType'(string() | binary() | atom()) -> 'LocationEnumType'().
'LocationEnumType'(Val) ->
    F = (?LocationEnumType),
    F(Val).

-spec 'LogEnumType'(string() | binary() | atom()) -> 'LogEnumType'().
'LogEnumType'(Val) ->
    F = (?LogEnumType),
    F(Val).

-spec 'LogParametersType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'LogParametersType'().
'LogParametersType'(Val) ->
    {Spec, Opts} = (?LogParametersType),
    cmap:new(Spec, Val, Opts).

-spec 'LogStatusEnumType'(string() | binary() | atom()) -> 'LogStatusEnumType'().
'LogStatusEnumType'(Val) ->
    F = (?LogStatusEnumType),
    F(Val).

-spec 'MeasurandEnumType'(string() | binary() | atom()) -> 'MeasurandEnumType'().
'MeasurandEnumType'(Val) ->
    F = (?MeasurandEnumType),
    F(Val).

-spec 'MessageContentType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'MessageContentType'().
'MessageContentType'(Val) ->
    {Spec, Opts} = (?MessageContentType),
    cmap:new(Spec, Val, Opts).

-spec 'MessageFormatEnumType'(
    string()
    | binary()
    | atom()
) -> 'MessageFormatEnumType'().
'MessageFormatEnumType'(Val) ->
    F = (?MessageFormatEnumType),
    F(Val).

-spec 'MessageInfoType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'MessageInfoType'().
'MessageInfoType'(Val) ->
    {Spec, Opts} = (?MessageInfoType),
    cmap:new(Spec, Val, Opts).

-spec 'MessagePriorityEnumType'(
    string()
    | binary()
    | atom()
) -> 'MessagePriorityEnumType'().
'MessagePriorityEnumType'(Val) ->
    F = (?MessagePriorityEnumType),
    F(Val).

-spec 'MessageStateEnumType'(string() | binary() | atom()) -> 'MessageStateEnumType'().
'MessageStateEnumType'(Val) ->
    F = (?MessageStateEnumType),
    F(Val).

-spec 'MessageTriggerEnumType'(
    string()
    | binary()
    | atom()
) -> 'MessageTriggerEnumType'().
'MessageTriggerEnumType'(Val) ->
    F = (?MessageTriggerEnumType),
    F(Val).

-spec 'MeterValueType'(#{atom() | binary() | string() => term()}) -> 'MeterValueType'().
'MeterValueType'(Val) ->
    {Spec, Opts} = (?MeterValueType),
    cmap:new(Spec, Val, Opts).

-spec 'ModemType'(#{atom() | binary() | string() => term()}) -> 'ModemType'().
'ModemType'(Val) ->
    {Spec, Opts} = (?ModemType),
    cmap:new(Spec, Val, Opts).

-spec 'MonitorEnumType'(string() | binary() | atom()) -> 'MonitorEnumType'().
'MonitorEnumType'(Val) ->
    F = (?MonitorEnumType),
    F(Val).

-spec 'MonitoringBaseEnumType'(
    string()
    | binary()
    | atom()
) -> 'MonitoringBaseEnumType'().
'MonitoringBaseEnumType'(Val) ->
    F = (?MonitoringBaseEnumType),
    F(Val).

-spec 'MonitoringCriterionEnumType'(
    string()
    | binary()
    | atom()
) -> 'MonitoringCriterionEnumType'().
'MonitoringCriterionEnumType'(Val) ->
    F = (?MonitoringCriterionEnumType),
    F(Val).

-spec 'MonitoringDataType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'MonitoringDataType'().
'MonitoringDataType'(Val) ->
    {Spec, Opts} = (?MonitoringDataType),
    cmap:new(Spec, Val, Opts).

-spec 'MutabilityEnumType'(string() | binary() | atom()) -> 'MutabilityEnumType'().
'MutabilityEnumType'(Val) ->
    F = (?MutabilityEnumType),
    F(Val).

-spec 'NetworkConnectionProfileType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'NetworkConnectionProfileType'().
'NetworkConnectionProfileType'(Val) ->
    {Spec, Opts} = (?NetworkConnectionProfileType),
    cmap:new(Spec, Val, Opts).

-spec 'NotifyEVChargingNeedsStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'NotifyEVChargingNeedsStatusEnumType'().
'NotifyEVChargingNeedsStatusEnumType'(Val) ->
    F = (?NotifyEVChargingNeedsStatusEnumType),
    F(Val).

-spec 'OCPPInterfaceEnumType'(
    string()
    | binary()
    | atom()
) -> 'OCPPInterfaceEnumType'().
'OCPPInterfaceEnumType'(Val) ->
    F = (?OCPPInterfaceEnumType),
    F(Val).

-spec 'OCPPTransportEnumType'(
    string()
    | binary()
    | atom()
) -> 'OCPPTransportEnumType'().
'OCPPTransportEnumType'(Val) ->
    F = (?OCPPTransportEnumType),
    F(Val).

-spec 'OCPPVersionEnumType'(string() | binary() | atom()) -> 'OCPPVersionEnumType'().
'OCPPVersionEnumType'(Val) ->
    F = (?OCPPVersionEnumType),
    F(Val).

-spec 'OCSPRequestDataType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'OCSPRequestDataType'().
'OCSPRequestDataType'(Val) ->
    {Spec, Opts} = (?OCSPRequestDataType),
    cmap:new(Spec, Val, Opts).

-spec 'OperationalStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'OperationalStatusEnumType'().
'OperationalStatusEnumType'(Val) ->
    F = (?OperationalStatusEnumType),
    F(Val).

-spec 'PhaseEnumType'(string() | binary() | atom()) -> 'PhaseEnumType'().
'PhaseEnumType'(Val) ->
    F = (?PhaseEnumType),
    F(Val).

-spec 'PublishFirmwareStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'PublishFirmwareStatusEnumType'().
'PublishFirmwareStatusEnumType'(Val) ->
    F = (?PublishFirmwareStatusEnumType),
    F(Val).

-spec 'ReadingContextEnumType'(
    string()
    | binary()
    | atom()
) -> 'ReadingContextEnumType'().
'ReadingContextEnumType'(Val) ->
    F = (?ReadingContextEnumType),
    F(Val).

-spec 'ReasonEnumType'(string() | binary() | atom()) -> 'ReasonEnumType'().
'ReasonEnumType'(Val) ->
    F = (?ReasonEnumType),
    F(Val).

-spec 'RecurrencyKindEnumType'(
    string()
    | binary()
    | atom()
) -> 'RecurrencyKindEnumType'().
'RecurrencyKindEnumType'(Val) ->
    F = (?RecurrencyKindEnumType),
    F(Val).

-spec 'RegistrationStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'RegistrationStatusEnumType'().
'RegistrationStatusEnumType'(Val) ->
    F = (?RegistrationStatusEnumType),
    F(Val).

-spec 'RelativeTimeIntervalType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'RelativeTimeIntervalType'().
'RelativeTimeIntervalType'(Val) ->
    {Spec, Opts} = (?RelativeTimeIntervalType),
    cmap:new(Spec, Val, Opts).

-spec 'ReportBaseEnumType'(string() | binary() | atom()) -> 'ReportBaseEnumType'().
'ReportBaseEnumType'(Val) ->
    F = (?ReportBaseEnumType),
    F(Val).

-spec 'ReportDataType'(#{atom() | binary() | string() => term()}) -> 'ReportDataType'().
'ReportDataType'(Val) ->
    {Spec, Opts} = (?ReportDataType),
    cmap:new(Spec, Val, Opts).

-spec 'RequestStartStopStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'RequestStartStopStatusEnumType'().
'RequestStartStopStatusEnumType'(Val) ->
    F = (?RequestStartStopStatusEnumType),
    F(Val).

-spec 'ReservationUpdateStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'ReservationUpdateStatusEnumType'().
'ReservationUpdateStatusEnumType'(Val) ->
    F = (?ReservationUpdateStatusEnumType),
    F(Val).

-spec 'ReserveNowStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'ReserveNowStatusEnumType'().
'ReserveNowStatusEnumType'(Val) ->
    F = (?ReserveNowStatusEnumType),
    F(Val).

-spec 'ResetEnumType'(string() | binary() | atom()) -> 'ResetEnumType'().
'ResetEnumType'(Val) ->
    F = (?ResetEnumType),
    F(Val).

-spec 'ResetStatusEnumType'(string() | binary() | atom()) -> 'ResetStatusEnumType'().
'ResetStatusEnumType'(Val) ->
    F = (?ResetStatusEnumType),
    F(Val).

-spec 'SalesTariffEntryType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'SalesTariffEntryType'().
'SalesTariffEntryType'(Val) ->
    {Spec, Opts} = (?SalesTariffEntryType),
    cmap:new(Spec, Val, Opts).

-spec 'SalesTariffType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'SalesTariffType'().
'SalesTariffType'(Val) ->
    {Spec, Opts} = (?SalesTariffType),
    cmap:new(Spec, Val, Opts).

-spec 'SampledValueType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'SampledValueType'().
'SampledValueType'(Val) ->
    {Spec, Opts} = (?SampledValueType),
    cmap:new(Spec, Val, Opts).

-spec 'SendLocalListStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'SendLocalListStatusEnumType'().
'SendLocalListStatusEnumType'(Val) ->
    F = (?SendLocalListStatusEnumType),
    F(Val).

-spec 'SetMonitoringDataType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'SetMonitoringDataType'().
'SetMonitoringDataType'(Val) ->
    {Spec, Opts} = (?SetMonitoringDataType),
    cmap:new(Spec, Val, Opts).

-spec 'SetMonitoringResultType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'SetMonitoringResultType'().
'SetMonitoringResultType'(Val) ->
    {Spec, Opts} = (?SetMonitoringResultType),
    cmap:new(Spec, Val, Opts).

-spec 'SetMonitoringStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'SetMonitoringStatusEnumType'().
'SetMonitoringStatusEnumType'(Val) ->
    F = (?SetMonitoringStatusEnumType),
    F(Val).

-spec 'SetNetworkProfileStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'SetNetworkProfileStatusEnumType'().
'SetNetworkProfileStatusEnumType'(Val) ->
    F = (?SetNetworkProfileStatusEnumType),
    F(Val).

-spec 'SetVariableDataType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'SetVariableDataType'().
'SetVariableDataType'(Val) ->
    {Spec, Opts} = (?SetVariableDataType),
    cmap:new(Spec, Val, Opts).

-spec 'SetVariableResultType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'SetVariableResultType'().
'SetVariableResultType'(Val) ->
    {Spec, Opts} = (?SetVariableResultType),
    cmap:new(Spec, Val, Opts).

-spec 'SetVariableStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'SetVariableStatusEnumType'().
'SetVariableStatusEnumType'(Val) ->
    F = (?SetVariableStatusEnumType),
    F(Val).

-spec 'SignedMeterValueType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'SignedMeterValueType'().
'SignedMeterValueType'(Val) ->
    {Spec, Opts} = (?SignedMeterValueType),
    cmap:new(Spec, Val, Opts).

-spec 'StatusInfoType'(#{atom() | binary() | string() => term()}) -> 'StatusInfoType'().
'StatusInfoType'(Val) ->
    {Spec, Opts} = (?StatusInfoType),
    cmap:new(Spec, Val, Opts).

-spec 'TransactionEventEnumType'(
    string()
    | binary()
    | atom()
) -> 'TransactionEventEnumType'().
'TransactionEventEnumType'(Val) ->
    F = (?TransactionEventEnumType),
    F(Val).

-spec 'TransactionType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'TransactionType'().
'TransactionType'(Val) ->
    {Spec, Opts} = (?TransactionType),
    cmap:new(Spec, Val, Opts).

-spec 'TriggerMessageStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'TriggerMessageStatusEnumType'().
'TriggerMessageStatusEnumType'(Val) ->
    F = (?TriggerMessageStatusEnumType),
    F(Val).

-spec 'TriggerReasonEnumType'(
    string()
    | binary()
    | atom()
) -> 'TriggerReasonEnumType'().
'TriggerReasonEnumType'(Val) ->
    F = (?TriggerReasonEnumType),
    F(Val).

-spec 'UnitOfMeasureType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'UnitOfMeasureType'().
'UnitOfMeasureType'(Val) ->
    {Spec, Opts} = (?UnitOfMeasureType),
    cmap:new(Spec, Val, Opts).

-spec 'UnlockStatusEnumType'(string() | binary() | atom()) -> 'UnlockStatusEnumType'().
'UnlockStatusEnumType'(Val) ->
    F = (?UnlockStatusEnumType),
    F(Val).

-spec 'UnpublishFirmwareStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'UnpublishFirmwareStatusEnumType'().
'UnpublishFirmwareStatusEnumType'(Val) ->
    F = (?UnpublishFirmwareStatusEnumType),
    F(Val).

-spec 'UpdateEnumType'(string() | binary() | atom()) -> 'UpdateEnumType'().
'UpdateEnumType'(Val) ->
    F = (?UpdateEnumType),
    F(Val).

-spec 'UpdateFirmwareStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'UpdateFirmwareStatusEnumType'().
'UpdateFirmwareStatusEnumType'(Val) ->
    F = (?UpdateFirmwareStatusEnumType),
    F(Val).

-spec 'UploadLogStatusEnumType'(
    string()
    | binary()
    | atom()
) -> 'UploadLogStatusEnumType'().
'UploadLogStatusEnumType'(Val) ->
    F = (?UploadLogStatusEnumType),
    F(Val).

-spec 'VPNEnumType'(string() | binary() | atom()) -> 'VPNEnumType'().
'VPNEnumType'(Val) ->
    F = (?VPNEnumType),
    F(Val).

-spec 'VPNType'(#{atom() | binary() | string() => term()}) -> 'VPNType'().
'VPNType'(Val) ->
    {Spec, Opts} = (?VPNType),
    cmap:new(Spec, Val, Opts).

-spec 'VariableAttributeType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'VariableAttributeType'().
'VariableAttributeType'(Val) ->
    {Spec, Opts} = (?VariableAttributeType),
    cmap:new(Spec, Val, Opts).

-spec 'VariableCharacteristicsType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'VariableCharacteristicsType'().
'VariableCharacteristicsType'(Val) ->
    {Spec, Opts} = (?VariableCharacteristicsType),
    cmap:new(Spec, Val, Opts).

-spec 'VariableMonitoringType'(#{
    atom() | binary() | string() =>
        term()
}) -> 'VariableMonitoringType'().
'VariableMonitoringType'(Val) ->
    {Spec, Opts} = (?VariableMonitoringType),
    cmap:new(Spec, Val, Opts).

-spec 'VariableType'(#{atom() | binary() | string() => term()}) -> 'VariableType'().
'VariableType'(Val) ->
    {Spec, Opts} = (?VariableType),
    cmap:new(Spec, Val, Opts).

-spec authorize_request('AuthorizeRequest'()) -> message('AuthorizeRequest'()).
authorize_request(AuthorizeRequest) ->
    {Spec, Opts} = (?AuthorizeRequest),
    {?MODULE, 'AuthorizeRequest', cmap:new(Spec, AuthorizeRequest, Opts)}.

-spec authorize_response('AuthorizeResponse'()) -> message('AuthorizeResponse'()).
authorize_response(AuthorizeResponse) ->
    {Spec, Opts} = (?AuthorizeResponse),
    {?MODULE, 'AuthorizeResponse', cmap:new(Spec, AuthorizeResponse, Opts)}.

-spec boot_notification_request('BootNotificationRequest'()) ->
    message('BootNotificationRequest'()).
boot_notification_request(BootNotificationRequest) ->
    {Spec, Opts} = (?BootNotificationRequest),
    {?MODULE, 'BootNotificationRequest', cmap:new(Spec, BootNotificationRequest, Opts)}.

-spec boot_notification_response('BootNotificationResponse'()) ->
    message('BootNotificationResponse'()).
boot_notification_response(BootNotificationResponse) ->
    {Spec, Opts} = (?BootNotificationResponse),
    {?MODULE, 'BootNotificationResponse', cmap:new(Spec, BootNotificationResponse, Opts)}.

-spec cancel_reservation_request('CancelReservationRequest'()) ->
    message('CancelReservationRequest'()).
cancel_reservation_request(CancelReservationRequest) ->
    {Spec, Opts} = (?CancelReservationRequest),
    {?MODULE, 'CancelReservationRequest', cmap:new(Spec, CancelReservationRequest, Opts)}.

-spec cancel_reservation_response('CancelReservationResponse'()) ->
    message('CancelReservationResponse'()).
cancel_reservation_response(CancelReservationResponse) ->
    {Spec, Opts} = (?CancelReservationResponse),
    {?MODULE, 'CancelReservationResponse', cmap:new(Spec, CancelReservationResponse, Opts)}.

-spec certificate_signed_request('CertificateSignedRequest'()) ->
    message('CertificateSignedRequest'()).
certificate_signed_request(CertificateSignedRequest) ->
    {Spec, Opts} = (?CertificateSignedRequest),
    {?MODULE, 'CertificateSignedRequest', cmap:new(Spec, CertificateSignedRequest, Opts)}.

-spec certificate_signed_response('CertificateSignedResponse'()) ->
    message('CertificateSignedResponse'()).
certificate_signed_response(CertificateSignedResponse) ->
    {Spec, Opts} = (?CertificateSignedResponse),
    {?MODULE, 'CertificateSignedResponse', cmap:new(Spec, CertificateSignedResponse, Opts)}.

-spec change_availability_request('ChangeAvailabilityRequest'()) ->
    message('ChangeAvailabilityRequest'()).
change_availability_request(ChangeAvailabilityRequest) ->
    {Spec, Opts} = (?ChangeAvailabilityRequest),
    {?MODULE, 'ChangeAvailabilityRequest', cmap:new(Spec, ChangeAvailabilityRequest, Opts)}.

-spec change_availability_response('ChangeAvailabilityResponse'()) ->
    message('ChangeAvailabilityResponse'()).
change_availability_response(ChangeAvailabilityResponse) ->
    {Spec, Opts} = (?ChangeAvailabilityResponse),
    {?MODULE, 'ChangeAvailabilityResponse', cmap:new(Spec, ChangeAvailabilityResponse, Opts)}.

-spec clear_cache_request('ClearCacheRequest'()) -> message('ClearCacheRequest'()).
clear_cache_request(ClearCacheRequest) ->
    {Spec, Opts} = (?ClearCacheRequest),
    {?MODULE, 'ClearCacheRequest', cmap:new(Spec, ClearCacheRequest, Opts)}.

-spec clear_cache_response('ClearCacheResponse'()) -> message('ClearCacheResponse'()).
clear_cache_response(ClearCacheResponse) ->
    {Spec, Opts} = (?ClearCacheResponse),
    {?MODULE, 'ClearCacheResponse', cmap:new(Spec, ClearCacheResponse, Opts)}.

-spec clear_charging_profile_request('ClearChargingProfileRequest'()) ->
    message('ClearChargingProfileRequest'()).
clear_charging_profile_request(ClearChargingProfileRequest) ->
    {Spec, Opts} = (?ClearChargingProfileRequest),
    {?MODULE, 'ClearChargingProfileRequest', cmap:new(Spec, ClearChargingProfileRequest, Opts)}.

-spec clear_charging_profile_response('ClearChargingProfileResponse'()) ->
    message('ClearChargingProfileResponse'()).
clear_charging_profile_response(ClearChargingProfileResponse) ->
    {Spec, Opts} = (?ClearChargingProfileResponse),
    {?MODULE, 'ClearChargingProfileResponse', cmap:new(Spec, ClearChargingProfileResponse, Opts)}.

-spec clear_display_message_request('ClearDisplayMessageRequest'()) ->
    message('ClearDisplayMessageRequest'()).
clear_display_message_request(ClearDisplayMessageRequest) ->
    {Spec, Opts} = (?ClearDisplayMessageRequest),
    {?MODULE, 'ClearDisplayMessageRequest', cmap:new(Spec, ClearDisplayMessageRequest, Opts)}.

-spec clear_display_message_response('ClearDisplayMessageResponse'()) ->
    message('ClearDisplayMessageResponse'()).
clear_display_message_response(ClearDisplayMessageResponse) ->
    {Spec, Opts} = (?ClearDisplayMessageResponse),
    {?MODULE, 'ClearDisplayMessageResponse', cmap:new(Spec, ClearDisplayMessageResponse, Opts)}.

-spec clear_variable_monitoring_request('ClearVariableMonitoringRequest'()) ->
    message('ClearVariableMonitoringRequest'()).
clear_variable_monitoring_request(ClearVariableMonitoringRequest) ->
    {Spec, Opts} = (?ClearVariableMonitoringRequest),
    {?MODULE, 'ClearVariableMonitoringRequest',
        cmap:new(Spec, ClearVariableMonitoringRequest, Opts)}.

-spec clear_variable_monitoring_response('ClearVariableMonitoringResponse'()) ->
    message('ClearVariableMonitoringResponse'()).
clear_variable_monitoring_response(ClearVariableMonitoringResponse) ->
    {Spec, Opts} = (?ClearVariableMonitoringResponse),
    {?MODULE, 'ClearVariableMonitoringResponse',
        cmap:new(Spec, ClearVariableMonitoringResponse, Opts)}.

-spec cleared_charging_limit_request('ClearedChargingLimitRequest'()) ->
    message('ClearedChargingLimitRequest'()).
cleared_charging_limit_request(ClearedChargingLimitRequest) ->
    {Spec, Opts} = (?ClearedChargingLimitRequest),
    {?MODULE, 'ClearedChargingLimitRequest', cmap:new(Spec, ClearedChargingLimitRequest, Opts)}.

-spec cleared_charging_limit_response('ClearedChargingLimitResponse'()) ->
    message('ClearedChargingLimitResponse'()).
cleared_charging_limit_response(ClearedChargingLimitResponse) ->
    {Spec, Opts} = (?ClearedChargingLimitResponse),
    {?MODULE, 'ClearedChargingLimitResponse', cmap:new(Spec, ClearedChargingLimitResponse, Opts)}.

-spec cost_updated_request('CostUpdatedRequest'()) -> message('CostUpdatedRequest'()).
cost_updated_request(CostUpdatedRequest) ->
    {Spec, Opts} = (?CostUpdatedRequest),
    {?MODULE, 'CostUpdatedRequest', cmap:new(Spec, CostUpdatedRequest, Opts)}.

-spec cost_updated_response('CostUpdatedResponse'()) -> message('CostUpdatedResponse'()).
cost_updated_response(CostUpdatedResponse) ->
    {Spec, Opts} = (?CostUpdatedResponse),
    {?MODULE, 'CostUpdatedResponse', cmap:new(Spec, CostUpdatedResponse, Opts)}.

-spec customer_information_request('CustomerInformationRequest'()) ->
    message('CustomerInformationRequest'()).
customer_information_request(CustomerInformationRequest) ->
    {Spec, Opts} = (?CustomerInformationRequest),
    {?MODULE, 'CustomerInformationRequest', cmap:new(Spec, CustomerInformationRequest, Opts)}.

-spec customer_information_response('CustomerInformationResponse'()) ->
    message('CustomerInformationResponse'()).
customer_information_response(CustomerInformationResponse) ->
    {Spec, Opts} = (?CustomerInformationResponse),
    {?MODULE, 'CustomerInformationResponse', cmap:new(Spec, CustomerInformationResponse, Opts)}.

-spec data_transfer_request('DataTransferRequest'()) -> message('DataTransferRequest'()).
data_transfer_request(DataTransferRequest) ->
    {Spec, Opts} = (?DataTransferRequest),
    {?MODULE, 'DataTransferRequest', cmap:new(Spec, DataTransferRequest, Opts)}.

-spec data_transfer_response('DataTransferResponse'()) -> message('DataTransferResponse'()).
data_transfer_response(DataTransferResponse) ->
    {Spec, Opts} = (?DataTransferResponse),
    {?MODULE, 'DataTransferResponse', cmap:new(Spec, DataTransferResponse, Opts)}.

-spec delete_certificate_request('DeleteCertificateRequest'()) ->
    message('DeleteCertificateRequest'()).
delete_certificate_request(DeleteCertificateRequest) ->
    {Spec, Opts} = (?DeleteCertificateRequest),
    {?MODULE, 'DeleteCertificateRequest', cmap:new(Spec, DeleteCertificateRequest, Opts)}.

-spec delete_certificate_response('DeleteCertificateResponse'()) ->
    message('DeleteCertificateResponse'()).
delete_certificate_response(DeleteCertificateResponse) ->
    {Spec, Opts} = (?DeleteCertificateResponse),
    {?MODULE, 'DeleteCertificateResponse', cmap:new(Spec, DeleteCertificateResponse, Opts)}.

-spec firmware_status_notification_request('FirmwareStatusNotificationRequest'()) ->
    message('FirmwareStatusNotificationRequest'()).
firmware_status_notification_request(FirmwareStatusNotificationRequest) ->
    {Spec, Opts} = (?FirmwareStatusNotificationRequest),
    {?MODULE, 'FirmwareStatusNotificationRequest',
        cmap:new(Spec, FirmwareStatusNotificationRequest, Opts)}.

-spec firmware_status_notification_response('FirmwareStatusNotificationResponse'()) ->
    message('FirmwareStatusNotificationResponse'()).
firmware_status_notification_response(FirmwareStatusNotificationResponse) ->
    {Spec, Opts} = (?FirmwareStatusNotificationResponse),
    {?MODULE, 'FirmwareStatusNotificationResponse',
        cmap:new(Spec, FirmwareStatusNotificationResponse, Opts)}.

-spec get15118ev_certificate_request('Get15118EVCertificateRequest'()) ->
    message('Get15118EVCertificateRequest'()).
get15118ev_certificate_request(Get15118EVCertificateRequest) ->
    {Spec, Opts} = (?Get15118EVCertificateRequest),
    {?MODULE, 'Get15118EVCertificateRequest', cmap:new(Spec, Get15118EVCertificateRequest, Opts)}.

-spec get15118ev_certificate_response('Get15118EVCertificateResponse'()) ->
    message('Get15118EVCertificateResponse'()).
get15118ev_certificate_response(Get15118EVCertificateResponse) ->
    {Spec, Opts} = (?Get15118EVCertificateResponse),
    {?MODULE, 'Get15118EVCertificateResponse', cmap:new(Spec, Get15118EVCertificateResponse, Opts)}.

-spec get_base_report_request('GetBaseReportRequest'()) -> message('GetBaseReportRequest'()).
get_base_report_request(GetBaseReportRequest) ->
    {Spec, Opts} = (?GetBaseReportRequest),
    {?MODULE, 'GetBaseReportRequest', cmap:new(Spec, GetBaseReportRequest, Opts)}.

-spec get_base_report_response('GetBaseReportResponse'()) -> message('GetBaseReportResponse'()).
get_base_report_response(GetBaseReportResponse) ->
    {Spec, Opts} = (?GetBaseReportResponse),
    {?MODULE, 'GetBaseReportResponse', cmap:new(Spec, GetBaseReportResponse, Opts)}.

-spec get_certificate_status_request('GetCertificateStatusRequest'()) ->
    message('GetCertificateStatusRequest'()).
get_certificate_status_request(GetCertificateStatusRequest) ->
    {Spec, Opts} = (?GetCertificateStatusRequest),
    {?MODULE, 'GetCertificateStatusRequest', cmap:new(Spec, GetCertificateStatusRequest, Opts)}.

-spec get_certificate_status_response('GetCertificateStatusResponse'()) ->
    message('GetCertificateStatusResponse'()).
get_certificate_status_response(GetCertificateStatusResponse) ->
    {Spec, Opts} = (?GetCertificateStatusResponse),
    {?MODULE, 'GetCertificateStatusResponse', cmap:new(Spec, GetCertificateStatusResponse, Opts)}.

-spec get_charging_profiles_request('GetChargingProfilesRequest'()) ->
    message('GetChargingProfilesRequest'()).
get_charging_profiles_request(GetChargingProfilesRequest) ->
    {Spec, Opts} = (?GetChargingProfilesRequest),
    {?MODULE, 'GetChargingProfilesRequest', cmap:new(Spec, GetChargingProfilesRequest, Opts)}.

-spec get_charging_profiles_response('GetChargingProfilesResponse'()) ->
    message('GetChargingProfilesResponse'()).
get_charging_profiles_response(GetChargingProfilesResponse) ->
    {Spec, Opts} = (?GetChargingProfilesResponse),
    {?MODULE, 'GetChargingProfilesResponse', cmap:new(Spec, GetChargingProfilesResponse, Opts)}.

-spec get_composite_schedule_request('GetCompositeScheduleRequest'()) ->
    message('GetCompositeScheduleRequest'()).
get_composite_schedule_request(GetCompositeScheduleRequest) ->
    {Spec, Opts} = (?GetCompositeScheduleRequest),
    {?MODULE, 'GetCompositeScheduleRequest', cmap:new(Spec, GetCompositeScheduleRequest, Opts)}.

-spec get_composite_schedule_response('GetCompositeScheduleResponse'()) ->
    message('GetCompositeScheduleResponse'()).
get_composite_schedule_response(GetCompositeScheduleResponse) ->
    {Spec, Opts} = (?GetCompositeScheduleResponse),
    {?MODULE, 'GetCompositeScheduleResponse', cmap:new(Spec, GetCompositeScheduleResponse, Opts)}.

-spec get_display_messages_request('GetDisplayMessagesRequest'()) ->
    message('GetDisplayMessagesRequest'()).
get_display_messages_request(GetDisplayMessagesRequest) ->
    {Spec, Opts} = (?GetDisplayMessagesRequest),
    {?MODULE, 'GetDisplayMessagesRequest', cmap:new(Spec, GetDisplayMessagesRequest, Opts)}.

-spec get_display_messages_response('GetDisplayMessagesResponse'()) ->
    message('GetDisplayMessagesResponse'()).
get_display_messages_response(GetDisplayMessagesResponse) ->
    {Spec, Opts} = (?GetDisplayMessagesResponse),
    {?MODULE, 'GetDisplayMessagesResponse', cmap:new(Spec, GetDisplayMessagesResponse, Opts)}.

-spec get_installed_certificate_ids_request('GetInstalledCertificateIdsRequest'()) ->
    message('GetInstalledCertificateIdsRequest'()).
get_installed_certificate_ids_request(GetInstalledCertificateIdsRequest) ->
    {Spec, Opts} = (?GetInstalledCertificateIdsRequest),
    {?MODULE, 'GetInstalledCertificateIdsRequest',
        cmap:new(Spec, GetInstalledCertificateIdsRequest, Opts)}.

-spec get_installed_certificate_ids_response('GetInstalledCertificateIdsResponse'()) ->
    message('GetInstalledCertificateIdsResponse'()).
get_installed_certificate_ids_response(GetInstalledCertificateIdsResponse) ->
    {Spec, Opts} = (?GetInstalledCertificateIdsResponse),
    {?MODULE, 'GetInstalledCertificateIdsResponse',
        cmap:new(Spec, GetInstalledCertificateIdsResponse, Opts)}.

-spec get_local_list_version_request('GetLocalListVersionRequest'()) ->
    message('GetLocalListVersionRequest'()).
get_local_list_version_request(GetLocalListVersionRequest) ->
    {Spec, Opts} = (?GetLocalListVersionRequest),
    {?MODULE, 'GetLocalListVersionRequest', cmap:new(Spec, GetLocalListVersionRequest, Opts)}.

-spec get_local_list_version_response('GetLocalListVersionResponse'()) ->
    message('GetLocalListVersionResponse'()).
get_local_list_version_response(GetLocalListVersionResponse) ->
    {Spec, Opts} = (?GetLocalListVersionResponse),
    {?MODULE, 'GetLocalListVersionResponse', cmap:new(Spec, GetLocalListVersionResponse, Opts)}.

-spec get_log_request('GetLogRequest'()) -> message('GetLogRequest'()).
get_log_request(GetLogRequest) ->
    {Spec, Opts} = (?GetLogRequest),
    {?MODULE, 'GetLogRequest', cmap:new(Spec, GetLogRequest, Opts)}.

-spec get_log_response('GetLogResponse'()) -> message('GetLogResponse'()).
get_log_response(GetLogResponse) ->
    {Spec, Opts} = (?GetLogResponse),
    {?MODULE, 'GetLogResponse', cmap:new(Spec, GetLogResponse, Opts)}.

-spec get_monitoring_report_request('GetMonitoringReportRequest'()) ->
    message('GetMonitoringReportRequest'()).
get_monitoring_report_request(GetMonitoringReportRequest) ->
    {Spec, Opts} = (?GetMonitoringReportRequest),
    {?MODULE, 'GetMonitoringReportRequest', cmap:new(Spec, GetMonitoringReportRequest, Opts)}.

-spec get_monitoring_report_response('GetMonitoringReportResponse'()) ->
    message('GetMonitoringReportResponse'()).
get_monitoring_report_response(GetMonitoringReportResponse) ->
    {Spec, Opts} = (?GetMonitoringReportResponse),
    {?MODULE, 'GetMonitoringReportResponse', cmap:new(Spec, GetMonitoringReportResponse, Opts)}.

-spec get_report_request('GetReportRequest'()) -> message('GetReportRequest'()).
get_report_request(GetReportRequest) ->
    {Spec, Opts} = (?GetReportRequest),
    {?MODULE, 'GetReportRequest', cmap:new(Spec, GetReportRequest, Opts)}.

-spec get_report_response('GetReportResponse'()) -> message('GetReportResponse'()).
get_report_response(GetReportResponse) ->
    {Spec, Opts} = (?GetReportResponse),
    {?MODULE, 'GetReportResponse', cmap:new(Spec, GetReportResponse, Opts)}.

-spec get_transaction_status_request('GetTransactionStatusRequest'()) ->
    message('GetTransactionStatusRequest'()).
get_transaction_status_request(GetTransactionStatusRequest) ->
    {Spec, Opts} = (?GetTransactionStatusRequest),
    {?MODULE, 'GetTransactionStatusRequest', cmap:new(Spec, GetTransactionStatusRequest, Opts)}.

-spec get_transaction_status_response('GetTransactionStatusResponse'()) ->
    message('GetTransactionStatusResponse'()).
get_transaction_status_response(GetTransactionStatusResponse) ->
    {Spec, Opts} = (?GetTransactionStatusResponse),
    {?MODULE, 'GetTransactionStatusResponse', cmap:new(Spec, GetTransactionStatusResponse, Opts)}.

-spec get_variables_request('GetVariablesRequest'()) -> message('GetVariablesRequest'()).
get_variables_request(GetVariablesRequest) ->
    {Spec, Opts} = (?GetVariablesRequest),
    {?MODULE, 'GetVariablesRequest', cmap:new(Spec, GetVariablesRequest, Opts)}.

-spec get_variables_response('GetVariablesResponse'()) -> message('GetVariablesResponse'()).
get_variables_response(GetVariablesResponse) ->
    {Spec, Opts} = (?GetVariablesResponse),
    {?MODULE, 'GetVariablesResponse', cmap:new(Spec, GetVariablesResponse, Opts)}.

-spec heartbeat_request('HeartbeatRequest'()) -> message('HeartbeatRequest'()).
heartbeat_request(HeartbeatRequest) ->
    {Spec, Opts} = (?HeartbeatRequest),
    {?MODULE, 'HeartbeatRequest', cmap:new(Spec, HeartbeatRequest, Opts)}.

-spec heartbeat_response('HeartbeatResponse'()) -> message('HeartbeatResponse'()).
heartbeat_response(HeartbeatResponse) ->
    {Spec, Opts} = (?HeartbeatResponse),
    {?MODULE, 'HeartbeatResponse', cmap:new(Spec, HeartbeatResponse, Opts)}.

-spec install_certificate_request('InstallCertificateRequest'()) ->
    message('InstallCertificateRequest'()).
install_certificate_request(InstallCertificateRequest) ->
    {Spec, Opts} = (?InstallCertificateRequest),
    {?MODULE, 'InstallCertificateRequest', cmap:new(Spec, InstallCertificateRequest, Opts)}.

-spec install_certificate_response('InstallCertificateResponse'()) ->
    message('InstallCertificateResponse'()).
install_certificate_response(InstallCertificateResponse) ->
    {Spec, Opts} = (?InstallCertificateResponse),
    {?MODULE, 'InstallCertificateResponse', cmap:new(Spec, InstallCertificateResponse, Opts)}.

-spec log_status_notification_request('LogStatusNotificationRequest'()) ->
    message('LogStatusNotificationRequest'()).
log_status_notification_request(LogStatusNotificationRequest) ->
    {Spec, Opts} = (?LogStatusNotificationRequest),
    {?MODULE, 'LogStatusNotificationRequest', cmap:new(Spec, LogStatusNotificationRequest, Opts)}.

-spec log_status_notification_response('LogStatusNotificationResponse'()) ->
    message('LogStatusNotificationResponse'()).
log_status_notification_response(LogStatusNotificationResponse) ->
    {Spec, Opts} = (?LogStatusNotificationResponse),
    {?MODULE, 'LogStatusNotificationResponse', cmap:new(Spec, LogStatusNotificationResponse, Opts)}.

-spec meter_values_request('MeterValuesRequest'()) -> message('MeterValuesRequest'()).
meter_values_request(MeterValuesRequest) ->
    {Spec, Opts} = (?MeterValuesRequest),
    {?MODULE, 'MeterValuesRequest', cmap:new(Spec, MeterValuesRequest, Opts)}.

-spec meter_values_response('MeterValuesResponse'()) -> message('MeterValuesResponse'()).
meter_values_response(MeterValuesResponse) ->
    {Spec, Opts} = (?MeterValuesResponse),
    {?MODULE, 'MeterValuesResponse', cmap:new(Spec, MeterValuesResponse, Opts)}.

-spec notify_charging_limit_request('NotifyChargingLimitRequest'()) ->
    message('NotifyChargingLimitRequest'()).
notify_charging_limit_request(NotifyChargingLimitRequest) ->
    {Spec, Opts} = (?NotifyChargingLimitRequest),
    {?MODULE, 'NotifyChargingLimitRequest', cmap:new(Spec, NotifyChargingLimitRequest, Opts)}.

-spec notify_charging_limit_response('NotifyChargingLimitResponse'()) ->
    message('NotifyChargingLimitResponse'()).
notify_charging_limit_response(NotifyChargingLimitResponse) ->
    {Spec, Opts} = (?NotifyChargingLimitResponse),
    {?MODULE, 'NotifyChargingLimitResponse', cmap:new(Spec, NotifyChargingLimitResponse, Opts)}.

-spec notify_customer_information_request('NotifyCustomerInformationRequest'()) ->
    message('NotifyCustomerInformationRequest'()).
notify_customer_information_request(NotifyCustomerInformationRequest) ->
    {Spec, Opts} = (?NotifyCustomerInformationRequest),
    {?MODULE, 'NotifyCustomerInformationRequest',
        cmap:new(Spec, NotifyCustomerInformationRequest, Opts)}.

-spec notify_customer_information_response('NotifyCustomerInformationResponse'()) ->
    message('NotifyCustomerInformationResponse'()).
notify_customer_information_response(NotifyCustomerInformationResponse) ->
    {Spec, Opts} = (?NotifyCustomerInformationResponse),
    {?MODULE, 'NotifyCustomerInformationResponse',
        cmap:new(Spec, NotifyCustomerInformationResponse, Opts)}.

-spec notify_display_messages_request('NotifyDisplayMessagesRequest'()) ->
    message('NotifyDisplayMessagesRequest'()).
notify_display_messages_request(NotifyDisplayMessagesRequest) ->
    {Spec, Opts} = (?NotifyDisplayMessagesRequest),
    {?MODULE, 'NotifyDisplayMessagesRequest', cmap:new(Spec, NotifyDisplayMessagesRequest, Opts)}.

-spec notify_display_messages_response('NotifyDisplayMessagesResponse'()) ->
    message('NotifyDisplayMessagesResponse'()).
notify_display_messages_response(NotifyDisplayMessagesResponse) ->
    {Spec, Opts} = (?NotifyDisplayMessagesResponse),
    {?MODULE, 'NotifyDisplayMessagesResponse', cmap:new(Spec, NotifyDisplayMessagesResponse, Opts)}.

-spec notify_event_request('NotifyEventRequest'()) -> message('NotifyEventRequest'()).
notify_event_request(NotifyEventRequest) ->
    {Spec, Opts} = (?NotifyEventRequest),
    {?MODULE, 'NotifyEventRequest', cmap:new(Spec, NotifyEventRequest, Opts)}.

-spec notify_event_response('NotifyEventResponse'()) -> message('NotifyEventResponse'()).
notify_event_response(NotifyEventResponse) ->
    {Spec, Opts} = (?NotifyEventResponse),
    {?MODULE, 'NotifyEventResponse', cmap:new(Spec, NotifyEventResponse, Opts)}.

-spec notify_monitoring_report_request('NotifyMonitoringReportRequest'()) ->
    message('NotifyMonitoringReportRequest'()).
notify_monitoring_report_request(NotifyMonitoringReportRequest) ->
    {Spec, Opts} = (?NotifyMonitoringReportRequest),
    {?MODULE, 'NotifyMonitoringReportRequest', cmap:new(Spec, NotifyMonitoringReportRequest, Opts)}.

-spec notify_monitoring_report_response('NotifyMonitoringReportResponse'()) ->
    message('NotifyMonitoringReportResponse'()).
notify_monitoring_report_response(NotifyMonitoringReportResponse) ->
    {Spec, Opts} = (?NotifyMonitoringReportResponse),
    {?MODULE, 'NotifyMonitoringReportResponse',
        cmap:new(Spec, NotifyMonitoringReportResponse, Opts)}.

-spec notify_report_request('NotifyReportRequest'()) -> message('NotifyReportRequest'()).
notify_report_request(NotifyReportRequest) ->
    {Spec, Opts} = (?NotifyReportRequest),
    {?MODULE, 'NotifyReportRequest', cmap:new(Spec, NotifyReportRequest, Opts)}.

-spec notify_report_response('NotifyReportResponse'()) -> message('NotifyReportResponse'()).
notify_report_response(NotifyReportResponse) ->
    {Spec, Opts} = (?NotifyReportResponse),
    {?MODULE, 'NotifyReportResponse', cmap:new(Spec, NotifyReportResponse, Opts)}.

-spec notifyev_charging_needs_request('NotifyEVChargingNeedsRequest'()) ->
    message('NotifyEVChargingNeedsRequest'()).
notifyev_charging_needs_request(NotifyEVChargingNeedsRequest) ->
    {Spec, Opts} = (?NotifyEVChargingNeedsRequest),
    {?MODULE, 'NotifyEVChargingNeedsRequest', cmap:new(Spec, NotifyEVChargingNeedsRequest, Opts)}.

-spec notifyev_charging_needs_response('NotifyEVChargingNeedsResponse'()) ->
    message('NotifyEVChargingNeedsResponse'()).
notifyev_charging_needs_response(NotifyEVChargingNeedsResponse) ->
    {Spec, Opts} = (?NotifyEVChargingNeedsResponse),
    {?MODULE, 'NotifyEVChargingNeedsResponse', cmap:new(Spec, NotifyEVChargingNeedsResponse, Opts)}.

-spec notifyev_charging_schedule_request('NotifyEVChargingScheduleRequest'()) ->
    message('NotifyEVChargingScheduleRequest'()).
notifyev_charging_schedule_request(NotifyEVChargingScheduleRequest) ->
    {Spec, Opts} = (?NotifyEVChargingScheduleRequest),
    {?MODULE, 'NotifyEVChargingScheduleRequest',
        cmap:new(Spec, NotifyEVChargingScheduleRequest, Opts)}.

-spec notifyev_charging_schedule_response('NotifyEVChargingScheduleResponse'()) ->
    message('NotifyEVChargingScheduleResponse'()).
notifyev_charging_schedule_response(NotifyEVChargingScheduleResponse) ->
    {Spec, Opts} = (?NotifyEVChargingScheduleResponse),
    {?MODULE, 'NotifyEVChargingScheduleResponse',
        cmap:new(Spec, NotifyEVChargingScheduleResponse, Opts)}.

-spec publish_firmware_request('PublishFirmwareRequest'()) -> message('PublishFirmwareRequest'()).
publish_firmware_request(PublishFirmwareRequest) ->
    {Spec, Opts} = (?PublishFirmwareRequest),
    {?MODULE, 'PublishFirmwareRequest', cmap:new(Spec, PublishFirmwareRequest, Opts)}.

-spec publish_firmware_response('PublishFirmwareResponse'()) ->
    message('PublishFirmwareResponse'()).
publish_firmware_response(PublishFirmwareResponse) ->
    {Spec, Opts} = (?PublishFirmwareResponse),
    {?MODULE, 'PublishFirmwareResponse', cmap:new(Spec, PublishFirmwareResponse, Opts)}.

-spec publish_firmware_status_notification_request('PublishFirmwareStatusNotificationRequest'()) ->
    message('PublishFirmwareStatusNotificationRequest'()).
publish_firmware_status_notification_request(PublishFirmwareStatusNotificationRequest) ->
    {Spec, Opts} = (?PublishFirmwareStatusNotificationRequest),
    {?MODULE, 'PublishFirmwareStatusNotificationRequest',
        cmap:new(Spec, PublishFirmwareStatusNotificationRequest, Opts)}.

-spec publish_firmware_status_notification_response('PublishFirmwareStatusNotificationResponse'()) ->
    message('PublishFirmwareStatusNotificationResponse'()).
publish_firmware_status_notification_response(PublishFirmwareStatusNotificationResponse) ->
    {Spec, Opts} = (?PublishFirmwareStatusNotificationResponse),
    {?MODULE, 'PublishFirmwareStatusNotificationResponse',
        cmap:new(Spec, PublishFirmwareStatusNotificationResponse, Opts)}.

-spec report_charging_profiles_request('ReportChargingProfilesRequest'()) ->
    message('ReportChargingProfilesRequest'()).
report_charging_profiles_request(ReportChargingProfilesRequest) ->
    {Spec, Opts} = (?ReportChargingProfilesRequest),
    {?MODULE, 'ReportChargingProfilesRequest', cmap:new(Spec, ReportChargingProfilesRequest, Opts)}.

-spec report_charging_profiles_response('ReportChargingProfilesResponse'()) ->
    message('ReportChargingProfilesResponse'()).
report_charging_profiles_response(ReportChargingProfilesResponse) ->
    {Spec, Opts} = (?ReportChargingProfilesResponse),
    {?MODULE, 'ReportChargingProfilesResponse',
        cmap:new(Spec, ReportChargingProfilesResponse, Opts)}.

-spec request_start_transaction_request('RequestStartTransactionRequest'()) ->
    message('RequestStartTransactionRequest'()).
request_start_transaction_request(RequestStartTransactionRequest) ->
    {Spec, Opts} = (?RequestStartTransactionRequest),
    {?MODULE, 'RequestStartTransactionRequest',
        cmap:new(Spec, RequestStartTransactionRequest, Opts)}.

-spec request_start_transaction_response('RequestStartTransactionResponse'()) ->
    message('RequestStartTransactionResponse'()).
request_start_transaction_response(RequestStartTransactionResponse) ->
    {Spec, Opts} = (?RequestStartTransactionResponse),
    {?MODULE, 'RequestStartTransactionResponse',
        cmap:new(Spec, RequestStartTransactionResponse, Opts)}.

-spec request_stop_transaction_request('RequestStopTransactionRequest'()) ->
    message('RequestStopTransactionRequest'()).
request_stop_transaction_request(RequestStopTransactionRequest) ->
    {Spec, Opts} = (?RequestStopTransactionRequest),
    {?MODULE, 'RequestStopTransactionRequest', cmap:new(Spec, RequestStopTransactionRequest, Opts)}.

-spec request_stop_transaction_response('RequestStopTransactionResponse'()) ->
    message('RequestStopTransactionResponse'()).
request_stop_transaction_response(RequestStopTransactionResponse) ->
    {Spec, Opts} = (?RequestStopTransactionResponse),
    {?MODULE, 'RequestStopTransactionResponse',
        cmap:new(Spec, RequestStopTransactionResponse, Opts)}.

-spec reservation_status_update_request('ReservationStatusUpdateRequest'()) ->
    message('ReservationStatusUpdateRequest'()).
reservation_status_update_request(ReservationStatusUpdateRequest) ->
    {Spec, Opts} = (?ReservationStatusUpdateRequest),
    {?MODULE, 'ReservationStatusUpdateRequest',
        cmap:new(Spec, ReservationStatusUpdateRequest, Opts)}.

-spec reservation_status_update_response('ReservationStatusUpdateResponse'()) ->
    message('ReservationStatusUpdateResponse'()).
reservation_status_update_response(ReservationStatusUpdateResponse) ->
    {Spec, Opts} = (?ReservationStatusUpdateResponse),
    {?MODULE, 'ReservationStatusUpdateResponse',
        cmap:new(Spec, ReservationStatusUpdateResponse, Opts)}.

-spec reserve_now_request('ReserveNowRequest'()) -> message('ReserveNowRequest'()).
reserve_now_request(ReserveNowRequest) ->
    {Spec, Opts} = (?ReserveNowRequest),
    {?MODULE, 'ReserveNowRequest', cmap:new(Spec, ReserveNowRequest, Opts)}.

-spec reserve_now_response('ReserveNowResponse'()) -> message('ReserveNowResponse'()).
reserve_now_response(ReserveNowResponse) ->
    {Spec, Opts} = (?ReserveNowResponse),
    {?MODULE, 'ReserveNowResponse', cmap:new(Spec, ReserveNowResponse, Opts)}.

-spec reset_request('ResetRequest'()) -> message('ResetRequest'()).
reset_request(ResetRequest) ->
    {Spec, Opts} = (?ResetRequest),
    {?MODULE, 'ResetRequest', cmap:new(Spec, ResetRequest, Opts)}.

-spec reset_response('ResetResponse'()) -> message('ResetResponse'()).
reset_response(ResetResponse) ->
    {Spec, Opts} = (?ResetResponse),
    {?MODULE, 'ResetResponse', cmap:new(Spec, ResetResponse, Opts)}.

-spec security_event_notification_request('SecurityEventNotificationRequest'()) ->
    message('SecurityEventNotificationRequest'()).
security_event_notification_request(SecurityEventNotificationRequest) ->
    {Spec, Opts} = (?SecurityEventNotificationRequest),
    {?MODULE, 'SecurityEventNotificationRequest',
        cmap:new(Spec, SecurityEventNotificationRequest, Opts)}.

-spec security_event_notification_response('SecurityEventNotificationResponse'()) ->
    message('SecurityEventNotificationResponse'()).
security_event_notification_response(SecurityEventNotificationResponse) ->
    {Spec, Opts} = (?SecurityEventNotificationResponse),
    {?MODULE, 'SecurityEventNotificationResponse',
        cmap:new(Spec, SecurityEventNotificationResponse, Opts)}.

-spec send_local_list_request('SendLocalListRequest'()) -> message('SendLocalListRequest'()).
send_local_list_request(SendLocalListRequest) ->
    {Spec, Opts} = (?SendLocalListRequest),
    {?MODULE, 'SendLocalListRequest', cmap:new(Spec, SendLocalListRequest, Opts)}.

-spec send_local_list_response('SendLocalListResponse'()) -> message('SendLocalListResponse'()).
send_local_list_response(SendLocalListResponse) ->
    {Spec, Opts} = (?SendLocalListResponse),
    {?MODULE, 'SendLocalListResponse', cmap:new(Spec, SendLocalListResponse, Opts)}.

-spec set_charging_profile_request('SetChargingProfileRequest'()) ->
    message('SetChargingProfileRequest'()).
set_charging_profile_request(SetChargingProfileRequest) ->
    {Spec, Opts} = (?SetChargingProfileRequest),
    {?MODULE, 'SetChargingProfileRequest', cmap:new(Spec, SetChargingProfileRequest, Opts)}.

-spec set_charging_profile_response('SetChargingProfileResponse'()) ->
    message('SetChargingProfileResponse'()).
set_charging_profile_response(SetChargingProfileResponse) ->
    {Spec, Opts} = (?SetChargingProfileResponse),
    {?MODULE, 'SetChargingProfileResponse', cmap:new(Spec, SetChargingProfileResponse, Opts)}.

-spec set_display_message_request('SetDisplayMessageRequest'()) ->
    message('SetDisplayMessageRequest'()).
set_display_message_request(SetDisplayMessageRequest) ->
    {Spec, Opts} = (?SetDisplayMessageRequest),
    {?MODULE, 'SetDisplayMessageRequest', cmap:new(Spec, SetDisplayMessageRequest, Opts)}.

-spec set_display_message_response('SetDisplayMessageResponse'()) ->
    message('SetDisplayMessageResponse'()).
set_display_message_response(SetDisplayMessageResponse) ->
    {Spec, Opts} = (?SetDisplayMessageResponse),
    {?MODULE, 'SetDisplayMessageResponse', cmap:new(Spec, SetDisplayMessageResponse, Opts)}.

-spec set_monitoring_base_request('SetMonitoringBaseRequest'()) ->
    message('SetMonitoringBaseRequest'()).
set_monitoring_base_request(SetMonitoringBaseRequest) ->
    {Spec, Opts} = (?SetMonitoringBaseRequest),
    {?MODULE, 'SetMonitoringBaseRequest', cmap:new(Spec, SetMonitoringBaseRequest, Opts)}.

-spec set_monitoring_base_response('SetMonitoringBaseResponse'()) ->
    message('SetMonitoringBaseResponse'()).
set_monitoring_base_response(SetMonitoringBaseResponse) ->
    {Spec, Opts} = (?SetMonitoringBaseResponse),
    {?MODULE, 'SetMonitoringBaseResponse', cmap:new(Spec, SetMonitoringBaseResponse, Opts)}.

-spec set_monitoring_level_request('SetMonitoringLevelRequest'()) ->
    message('SetMonitoringLevelRequest'()).
set_monitoring_level_request(SetMonitoringLevelRequest) ->
    {Spec, Opts} = (?SetMonitoringLevelRequest),
    {?MODULE, 'SetMonitoringLevelRequest', cmap:new(Spec, SetMonitoringLevelRequest, Opts)}.

-spec set_monitoring_level_response('SetMonitoringLevelResponse'()) ->
    message('SetMonitoringLevelResponse'()).
set_monitoring_level_response(SetMonitoringLevelResponse) ->
    {Spec, Opts} = (?SetMonitoringLevelResponse),
    {?MODULE, 'SetMonitoringLevelResponse', cmap:new(Spec, SetMonitoringLevelResponse, Opts)}.

-spec set_network_profile_request('SetNetworkProfileRequest'()) ->
    message('SetNetworkProfileRequest'()).
set_network_profile_request(SetNetworkProfileRequest) ->
    {Spec, Opts} = (?SetNetworkProfileRequest),
    {?MODULE, 'SetNetworkProfileRequest', cmap:new(Spec, SetNetworkProfileRequest, Opts)}.

-spec set_network_profile_response('SetNetworkProfileResponse'()) ->
    message('SetNetworkProfileResponse'()).
set_network_profile_response(SetNetworkProfileResponse) ->
    {Spec, Opts} = (?SetNetworkProfileResponse),
    {?MODULE, 'SetNetworkProfileResponse', cmap:new(Spec, SetNetworkProfileResponse, Opts)}.

-spec set_variable_monitoring_request('SetVariableMonitoringRequest'()) ->
    message('SetVariableMonitoringRequest'()).
set_variable_monitoring_request(SetVariableMonitoringRequest) ->
    {Spec, Opts} = (?SetVariableMonitoringRequest),
    {?MODULE, 'SetVariableMonitoringRequest', cmap:new(Spec, SetVariableMonitoringRequest, Opts)}.

-spec set_variable_monitoring_response('SetVariableMonitoringResponse'()) ->
    message('SetVariableMonitoringResponse'()).
set_variable_monitoring_response(SetVariableMonitoringResponse) ->
    {Spec, Opts} = (?SetVariableMonitoringResponse),
    {?MODULE, 'SetVariableMonitoringResponse', cmap:new(Spec, SetVariableMonitoringResponse, Opts)}.

-spec set_variables_request('SetVariablesRequest'()) -> message('SetVariablesRequest'()).
set_variables_request(SetVariablesRequest) ->
    {Spec, Opts} = (?SetVariablesRequest),
    {?MODULE, 'SetVariablesRequest', cmap:new(Spec, SetVariablesRequest, Opts)}.

-spec set_variables_response('SetVariablesResponse'()) -> message('SetVariablesResponse'()).
set_variables_response(SetVariablesResponse) ->
    {Spec, Opts} = (?SetVariablesResponse),
    {?MODULE, 'SetVariablesResponse', cmap:new(Spec, SetVariablesResponse, Opts)}.

-spec sign_certificate_request('SignCertificateRequest'()) -> message('SignCertificateRequest'()).
sign_certificate_request(SignCertificateRequest) ->
    {Spec, Opts} = (?SignCertificateRequest),
    {?MODULE, 'SignCertificateRequest', cmap:new(Spec, SignCertificateRequest, Opts)}.

-spec sign_certificate_response('SignCertificateResponse'()) ->
    message('SignCertificateResponse'()).
sign_certificate_response(SignCertificateResponse) ->
    {Spec, Opts} = (?SignCertificateResponse),
    {?MODULE, 'SignCertificateResponse', cmap:new(Spec, SignCertificateResponse, Opts)}.

-spec status_notification_request('StatusNotificationRequest'()) ->
    message('StatusNotificationRequest'()).
status_notification_request(StatusNotificationRequest) ->
    {Spec, Opts} = (?StatusNotificationRequest),
    {?MODULE, 'StatusNotificationRequest', cmap:new(Spec, StatusNotificationRequest, Opts)}.

-spec status_notification_response('StatusNotificationResponse'()) ->
    message('StatusNotificationResponse'()).
status_notification_response(StatusNotificationResponse) ->
    {Spec, Opts} = (?StatusNotificationResponse),
    {?MODULE, 'StatusNotificationResponse', cmap:new(Spec, StatusNotificationResponse, Opts)}.

-spec transaction_event_request('TransactionEventRequest'()) ->
    message('TransactionEventRequest'()).
transaction_event_request(TransactionEventRequest) ->
    {Spec, Opts} = (?TransactionEventRequest),
    {?MODULE, 'TransactionEventRequest', cmap:new(Spec, TransactionEventRequest, Opts)}.

-spec transaction_event_response('TransactionEventResponse'()) ->
    message('TransactionEventResponse'()).
transaction_event_response(TransactionEventResponse) ->
    {Spec, Opts} = (?TransactionEventResponse),
    {?MODULE, 'TransactionEventResponse', cmap:new(Spec, TransactionEventResponse, Opts)}.

-spec trigger_message_request('TriggerMessageRequest'()) -> message('TriggerMessageRequest'()).
trigger_message_request(TriggerMessageRequest) ->
    {Spec, Opts} = (?TriggerMessageRequest),
    {?MODULE, 'TriggerMessageRequest', cmap:new(Spec, TriggerMessageRequest, Opts)}.

-spec trigger_message_response('TriggerMessageResponse'()) -> message('TriggerMessageResponse'()).
trigger_message_response(TriggerMessageResponse) ->
    {Spec, Opts} = (?TriggerMessageResponse),
    {?MODULE, 'TriggerMessageResponse', cmap:new(Spec, TriggerMessageResponse, Opts)}.

-spec unlock_connector_request('UnlockConnectorRequest'()) -> message('UnlockConnectorRequest'()).
unlock_connector_request(UnlockConnectorRequest) ->
    {Spec, Opts} = (?UnlockConnectorRequest),
    {?MODULE, 'UnlockConnectorRequest', cmap:new(Spec, UnlockConnectorRequest, Opts)}.

-spec unlock_connector_response('UnlockConnectorResponse'()) ->
    message('UnlockConnectorResponse'()).
unlock_connector_response(UnlockConnectorResponse) ->
    {Spec, Opts} = (?UnlockConnectorResponse),
    {?MODULE, 'UnlockConnectorResponse', cmap:new(Spec, UnlockConnectorResponse, Opts)}.

-spec unpublish_firmware_request('UnpublishFirmwareRequest'()) ->
    message('UnpublishFirmwareRequest'()).
unpublish_firmware_request(UnpublishFirmwareRequest) ->
    {Spec, Opts} = (?UnpublishFirmwareRequest),
    {?MODULE, 'UnpublishFirmwareRequest', cmap:new(Spec, UnpublishFirmwareRequest, Opts)}.

-spec unpublish_firmware_response('UnpublishFirmwareResponse'()) ->
    message('UnpublishFirmwareResponse'()).
unpublish_firmware_response(UnpublishFirmwareResponse) ->
    {Spec, Opts} = (?UnpublishFirmwareResponse),
    {?MODULE, 'UnpublishFirmwareResponse', cmap:new(Spec, UnpublishFirmwareResponse, Opts)}.

-spec update_firmware_request('UpdateFirmwareRequest'()) -> message('UpdateFirmwareRequest'()).
update_firmware_request(UpdateFirmwareRequest) ->
    {Spec, Opts} = (?UpdateFirmwareRequest),
    {?MODULE, 'UpdateFirmwareRequest', cmap:new(Spec, UpdateFirmwareRequest, Opts)}.

-spec update_firmware_response('UpdateFirmwareResponse'()) -> message('UpdateFirmwareResponse'()).
update_firmware_response(UpdateFirmwareResponse) ->
    {Spec, Opts} = (?UpdateFirmwareResponse),
    {?MODULE, 'UpdateFirmwareResponse', cmap:new(Spec, UpdateFirmwareResponse, Opts)}.

-spec decode(
    MessageType :: binary(),
    Direction :: request | response,
    Payload :: json:decode_value()
) ->
    {ok, message()}
    | {error, Reason :: any()}.
decode(MessageType, request, Payload) ->
    decode(binary_to_existing_atom(<<MessageType/binary, "Request">>), Payload);
decode(MessageType, response, Payload) ->
    decode(binary_to_existing_atom(<<MessageType/binary, "Response">>), Payload).
-spec decode(PayloadType :: payload_type(), Payload :: json:decode_value()) ->
    {ok, message()}
    | {error,
        Reason ::
            any()}.
decode(PayloadType, Payload) ->
    try PayloadType(Payload) of
        Message -> {ok, {?MODULE, PayloadType, Message}}
    catch
        _:Reason -> {error, Reason}
    end.
